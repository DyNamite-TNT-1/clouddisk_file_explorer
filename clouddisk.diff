diff --git a/lib/api/api_url.dart b/lib/api/api_url.dart
index 8659ef5..1541b3e 100644
--- a/lib/api/api_url.dart
+++ b/lib/api/api_url.dart
@@ -1,5 +1,5 @@
-const baseUrl = "https://groupware57.hanbiro.net";
-const loginUrl = "$baseUrl/ngw/sign/auth?is_checking_otp=1";
+const baseUrl = "https://gw.hanbiro.vn";
+const loginUrl = "$baseUrl/ngw/sign/auth";
 
 String getFolderUrl(String type, String id) {
   return "$baseUrl/cloud/api/get.php?type=$type&id=$id";
diff --git a/lib/api/requests/login_req.dart b/lib/api/requests/login_req.dart
index b1173ee..8ac0df4 100644
--- a/lib/api/requests/login_req.dart
+++ b/lib/api/requests/login_req.dart
@@ -1,9 +1,9 @@
 class LogInRequest {
-  final String gwid;
-  final String gwpass;
-  final String model;
-  final String code;
-  final String deviceid;
+  String gwid;
+  String gwpass;
+  String model;
+  String code;
+  String deviceid;
   LogInRequest(this.gwid, this.gwpass, this.model, this.code, this.deviceid);
 
   Map getMap() {
@@ -18,9 +18,9 @@ class LogInRequest {
 }
 
 final LogInRequest logInRequest = LogInRequest(
-  "oRfAa0Ex1ZVsHLimNx5XpV1eeiNs+g2OhPIDYHI8IpWFhHNQ2Nm0C1KuISROSJj9NZ6rpnL6ZsYduCKvD38he8bfK7lQHB/3EcDEZWRUgCyv4z61OAf2pMXhQfbOWvCMfsdJ0JBun7iC1mQ7aSLzT/JJYDUybwJbPx72GOjQ1j4=",
-  "wtsaWk7utF6GtHIFZKwXYarexC/Qp4fY/5xAjq7+gC/afF1d1/Gt7FEgU1UcnHxLtNHOn2dgC8Z7qdTMonGaZ+aRTGWh70sfxy0QLL7Ij/RyjqqIwqGuxNXrSOkwcp3EiN1S/6z7maMTl5XZ6c/Bww3w/G1mcsmnPCZ6gaJzMMk=",
-  "samsung SM-N970F",
-  "212970",
-  "2eaba74b-e0b5-49cb-b9ab-f9630845d43b",
+  "aZcd4/kTCtwy43oLBv/XZauLTqncqSl3GaNCee5+OKDmz6ItmyIX9Gf3dMftuhfYfRJDrlj8pd4YrRpAQ0EGqc81PbE9tFYy+U7dqUHmcwcS26rZw334yM7T/pskp9YVPwZwd2T5OpVSHqiGEBB9NbLD1MwPeeGgyQ7FPVRqn5U=",
+  "fK2i43LlgZ2X2/O5pl8tTudt5YPlvXRvS3ax/rU+Xa+8TNitrRifTYKUs7GEZsU4ATOeVhy3rCzJ4T8/jmGsfXgDGS1E4d9U3dnV5QM34lAzjzpJlo87nsGHUJjA9Yvjtpw42RihXk+y7RVtpcgCKwkBQ2mjP0fxuUVTYJvQv8I=",
+  "",
+  "",
+  "",
 );
diff --git a/lib/api/responses/login_res.dart b/lib/api/responses/login_res.dart
index cedb31c..a1262f2 100644
--- a/lib/api/responses/login_res.dart
+++ b/lib/api/responses/login_res.dart
@@ -6,8 +6,8 @@ class LogInResponse {
   LogInResponse(Map map) {
     success = map["success"];
     msg = map["msg"];
-    session = map["session"];
-    hmailkey = map["hmail_key"];
+    session = map["session"] ?? "";
+    hmailkey = map["hmail_key"] ?? "";
   }
 
   Map getMap() {
diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
index a5c2e11..be7a67e 100644
--- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
@@ -68,7 +68,7 @@ class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
           emit(FolderTreeLoaded(folders.listFolders));
         }
       }
-      if (event is SortEvent) {
+      if (event is SortListEvent) {
         ListFolders folders = ListFolders(listFolders: []);
         if (!isClosed) {
           emit(FolderTreeLoading());
diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
index 3250eeb..01c98f2 100644
--- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
+++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
@@ -16,11 +16,11 @@ class LoadEvent extends FolderTreeEvent {
   List<Object> get props => [id];
 }
 
-class SortEvent extends FolderTreeEvent {
+class SortListEvent extends FolderTreeEvent {
   final String id;
   final String sort;
   final String order;
-  const SortEvent(this.id, this.sort, this.order);
+  const SortListEvent(this.id, this.sort, this.order);
   @override
   List<Object> get props => [id, sort, order];
 }
diff --git a/lib/bloc/login_bloc/login_bloc.dart b/lib/bloc/login_bloc/login_bloc.dart
index 80452f2..9b31b87 100644
--- a/lib/bloc/login_bloc/login_bloc.dart
+++ b/lib/bloc/login_bloc/login_bloc.dart
@@ -14,17 +14,26 @@ class LoginBloc extends Bloc<LoginEvent, LoginState> {
   LoginBloc() : super(LoginInitial()) {
     on<LoginEvent>((event, emit) async {
       if (event is ClickedLoginEvent) {
-        emit(LoginLoading());
+        if (!isClosed) {
+          emit(LoginLoading());
+        }
         final value = await api.post(loginUrl, event.req.getMap(), loginHeader);
         var loginRes = LogInResponse(value);
         if (loginRes.success == true) {
           prefs.setSession(loginRes.session); //save session vào preference
           prefs.setHmailKey(loginRes.hmailkey); //save hmailKey vào preference
-          emit(LoginSuccessLoaded(loginRes));
+          if (!isClosed) {
+            emit(LoginSuccessLoaded(loginRes));
+          }
         } else {
-          emit(const LoginFailLoaded("Không đăng nhập được"));
+          if (!isClosed) {
+            emit(const LoginFailLoaded("Không đăng nhập được"));
+          }
         }
       }
     });
   }
 }
+
+// sortBloc bo ngoai cung de shared bloc
+// 
diff --git a/lib/bloc/sort_bloc/sort_bloc.dart b/lib/bloc/sort_bloc/sort_bloc.dart
new file mode 100644
index 0000000..7532423
--- /dev/null
+++ b/lib/bloc/sort_bloc/sort_bloc.dart
@@ -0,0 +1,19 @@
+// ignore: depend_on_referenced_packages
+import 'package:bloc/bloc.dart';
+import 'package:equatable/equatable.dart';
+
+part 'sort_event.dart';
+part 'sort_state.dart';
+
+//This bloc to manage event Clicked Sort in dialog
+class SortBloc extends Bloc<SortEvent, SortState> {
+  SortBloc() : super(SortInitial()) {
+    on<SortEvent>((event, emit) {
+      if (event is ClickedSortEvent) {
+        if (!isClosed) {
+          emit(SortClicked(event.sortType, event.order));
+        }
+      }
+    });
+  }
+}
diff --git a/lib/bloc/sort_bloc/sort_event.dart b/lib/bloc/sort_bloc/sort_event.dart
new file mode 100644
index 0000000..cd23756
--- /dev/null
+++ b/lib/bloc/sort_bloc/sort_event.dart
@@ -0,0 +1,16 @@
+part of 'sort_bloc.dart';
+
+abstract class SortEvent extends Equatable {
+  const SortEvent();
+
+  @override
+  List<Object> get props => [];
+}
+
+class ClickedSortEvent extends SortEvent {
+  final String sortType;
+  final String order;
+  const ClickedSortEvent(this.sortType, this.order);
+  @override
+  List<Object> get props => [sortType, order];
+}
diff --git a/lib/bloc/sort_bloc/sort_state.dart b/lib/bloc/sort_bloc/sort_state.dart
new file mode 100644
index 0000000..da29893
--- /dev/null
+++ b/lib/bloc/sort_bloc/sort_state.dart
@@ -0,0 +1,19 @@
+part of 'sort_bloc.dart';
+
+abstract class SortState extends Equatable {
+  const SortState();
+
+  @override
+  List<Object> get props => [];
+}
+
+class SortInitial extends SortState {}
+
+class SortClicked extends SortState {
+  final String sortType;
+  final String order;
+  const SortClicked(this.sortType, this.order);
+
+  @override
+  List<Object> get props => [sortType, order];
+}
diff --git a/lib/components/auth_button.dart b/lib/components/auth_button.dart
index 90e3bdb..aa69f42 100644
--- a/lib/components/auth_button.dart
+++ b/lib/components/auth_button.dart
@@ -1,20 +1,15 @@
 import 'package:flutter/material.dart';
 
-class AuthButton extends StatefulWidget {
-  const AuthButton({
+class AuthButton extends StatelessWidget {
+  AuthButton({
     Key? key,
     required this.label,
     required this.onTap,
   }) : super(key: key);
   final String label;
   final VoidCallback onTap;
+  final Color color = Colors.blue.shade700;
 
-  @override
-  State<AuthButton> createState() => _AuthButtonState();
-}
-
-class _AuthButtonState extends State<AuthButton> {
-  Color color = Colors.blue.shade700;
   @override
   Widget build(BuildContext context) {
     return Container(
@@ -22,7 +17,7 @@ class _AuthButtonState extends State<AuthButton> {
       width: double.infinity,
       child: InkWell(
         onTap: () {
-          widget.onTap();
+          onTap();
         },
         child: Container(
           alignment: Alignment.center,
@@ -31,7 +26,7 @@ class _AuthButtonState extends State<AuthButton> {
             color: color,
           ),
           child: Text(
-            widget.label,
+            label,
             style: const TextStyle(
               color: Colors.white,
               fontSize: 16,
diff --git a/lib/components/item_file.dart b/lib/components/item_file.dart
index eb04bbc..82944d1 100644
--- a/lib/components/item_file.dart
+++ b/lib/components/item_file.dart
@@ -40,7 +40,7 @@ class _ItemFileState extends State<ItemFile> {
       }
     }
     if (widget.item.buildThumbnail(widget.item.ext) != "") {
-      getImage(widget.item.ext).then((_) {});
+      getImage(widget.item.ext);
     }
     super.initState();
   }
diff --git a/lib/components/list_items.dart b/lib/components/list_items.dart
index 4074578..3f17523 100644
--- a/lib/components/list_items.dart
+++ b/lib/components/list_items.dart
@@ -1,5 +1,4 @@
 import 'package:clouddisk_login_form/components/item_file.dart';
-import 'package:clouddisk_login_form/global_variable/global_variable.dart';
 import 'package:clouddisk_login_form/models/item.dart';
 import 'package:flutter/material.dart';
 
@@ -11,6 +10,7 @@ class ListItems extends StatefulWidget {
   });
   final List<Folder> items;
   final VoidCallback onPressed;
+
   @override
   State<ListItems> createState() => _ListItemsState();
 }
@@ -25,10 +25,10 @@ class _ListItemsState extends State<ListItems> {
               item: widget.items[index],
               onPressed: (value) {
                 if (widget.items[index].type == "dir") {
-                  preId = currentId;
                   Navigator.of(context).pushNamed("/folderScreen", arguments: {
                     "folderId": widget.items[index].id.toString(),
                     "currentPath": "/${widget.items[index].text}",
+                    // "sortBloc": context.read<SortBloc>()
                   });
                 } else {
                   widget.onPressed();
diff --git a/lib/global_variable/global_variable.dart b/lib/global_variable/global_variable.dart
index 52adbe2..a5068f0 100644
--- a/lib/global_variable/global_variable.dart
+++ b/lib/global_variable/global_variable.dart
@@ -3,12 +3,9 @@ import 'package:clouddisk_login_form/utils/preferences.dart';
 
 UserPreferences prefs = UserPreferences();
 Api api = Api();
-
 List<Map<String, dynamic>> listMapChecked = [];
-bool isSort = false;
-bool isClickedSort = false;
-bool isClickedDefault = false;
-String sortType = "size";
-String order = "asc";
-String currentId = "";
-String preId = "";
+// bool isSort = false;
+// String sortType = "size";
+// String order = "asc";
+// String currentId = "";
+// String preId = "";
diff --git a/lib/main.dart b/lib/main.dart
index 1def681..9d74415 100644
--- a/lib/main.dart
+++ b/lib/main.dart
@@ -1,5 +1,7 @@
+import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
 import 'package:clouddisk_login_form/bloc/login_bloc/login_bloc.dart';
 import 'package:clouddisk_login_form/bloc/send_file_bloc/send_file_bloc.dart';
+import 'package:clouddisk_login_form/bloc/sort_bloc/sort_bloc.dart';
 import 'package:clouddisk_login_form/global_variable/global_variable.dart';
 import 'package:clouddisk_login_form/presentation/pages/home_page/home_page.dart';
 import 'package:clouddisk_login_form/presentation/pages/login_page/login_screen.dart';
@@ -10,18 +12,49 @@ void main() {
   runApp(const MyApp());
 }
 
-class MyApp extends StatelessWidget {
+class MyApp extends StatefulWidget {
   const MyApp({super.key});
 
+  @override
+  State<MyApp> createState() => _MyAppState();
+}
+
+class _MyAppState extends State<MyApp> {
+  final LoginBloc loginBloc = LoginBloc();
+  final SendFileBloc sendFileBloc = SendFileBloc();
+  final SortBloc sortBloc = SortBloc();
+  @override
+  void dispose() {
+    loginBloc.close();
+    sendFileBloc.close();
+    super.dispose();
+  }
+
   @override
   Widget build(BuildContext context) {
-    return MaterialApp(
-      title: 'Flutter Demo',
-      debugShowCheckedModeBanner: false,
-      theme: ThemeData(
-        primarySwatch: Colors.cyan,
+    return MultiBlocProvider(
+      providers: [
+        BlocProvider(
+          create: (context) => loginBloc,
+        ),
+        BlocProvider(
+          create: (context) => sendFileBloc,
+        ),
+        BlocProvider(
+          create: (context) => sortBloc,
+        ),
+        // sortBloc
+        // add event.
+        // lang nghe sortbloc
+      ],
+      child: MaterialApp(
+        title: 'Flutter Demo',
+        debugShowCheckedModeBanner: false,
+        theme: ThemeData(
+          primarySwatch: Colors.cyan,
+        ),
+        home: const MyHomePage(),
       ),
-      home: const MyHomePage(),
     );
   }
 }
@@ -34,8 +67,6 @@ class MyHomePage extends StatefulWidget {
 }
 
 class _MyHomePageState extends State<MyHomePage> {
-  final LoginBloc loginBloc = LoginBloc();
-  final SendFileBloc sendFileBloc = SendFileBloc();
   bool hasCookie = false;
   var session = "";
   var hmailkey = "";
@@ -56,27 +87,10 @@ class _MyHomePageState extends State<MyHomePage> {
     super.initState();
   }
 
-  @override
-  void dispose() {
-    loginBloc.close();
-    sendFileBloc.close();
-    super.dispose();
-  }
-
   @override
   Widget build(BuildContext context) {
     return Scaffold(
-      body: MultiBlocProvider(
-        providers: [
-          BlocProvider(
-            create: (context) => loginBloc,
-          ),
-          BlocProvider(
-            create: (context) => sendFileBloc,
-          ),
-        ],
-        child: hasCookie ? const HomePage() : const LoginScreen(),
-      ),
+      body: hasCookie ? const HomePage() : const LoginScreen(),
     );
   }
 }
diff --git a/lib/models/item.dart b/lib/models/item.dart
index f059b42..cee655a 100644
--- a/lib/models/item.dart
+++ b/lib/models/item.dart
@@ -84,7 +84,7 @@ class Folder extends Item {
   }
 
   String formatBytes(String size, int decimals) {
-    var isNum = RegExp(r'^[0-9]*$').hasMatch(regdate);
+    var isNum = RegExp(r'^[0-9]*$').hasMatch(size);
     if (isNum) {
       //decimals: làm tròn tới decimals số thập phân
       int bytes = int.parse(size);
@@ -94,7 +94,8 @@ class Folder extends Item {
       return '${(bytes / pow(1024, i)).toStringAsFixed(decimals)} ${suffixes[i]}';
     }
     //Nếu không thì in ra lỗi
-    return "size is not only contains number";
+    // print("size is not only contains number");
+    return "";
   }
 
   String formatDates(String regdate) {
@@ -109,12 +110,13 @@ class Folder extends Item {
       return dateString;
     }
     //Nếu không thì in ra lỗi
-    return "regdate is not only contains number";
+    // print("regdate is not only contains number");
+    return "";
   }
 
   String buildThumbnail(String ext) {
     if (ext[0] != "/") return "";
-    return "https://groupware57.hanbiro.net${ext}_76x76.png";
+    return "https://gw.hanbiro.vn${ext}_76x76.png";
   }
 
   factory Folder.fromJson(Map<String, dynamic> json) {
diff --git a/lib/presentation/pages/home_page/conponents/sort_dialog.dart b/lib/presentation/pages/home_page/conponents/sort_dialog.dart
index a9dd698..af564e2 100644
--- a/lib/presentation/pages/home_page/conponents/sort_dialog.dart
+++ b/lib/presentation/pages/home_page/conponents/sort_dialog.dart
@@ -72,6 +72,7 @@ class _SortDialogState extends State<SortDialog> {
             ),
             InkWell(
               onTap: () {
+                //add event
                 Navigator.of(context).pop();
               },
               child: const Icon(
diff --git a/lib/presentation/pages/home_page/home_page.dart b/lib/presentation/pages/home_page/home_page.dart
index d88869c..74ea6e3 100644
--- a/lib/presentation/pages/home_page/home_page.dart
+++ b/lib/presentation/pages/home_page/home_page.dart
@@ -1,5 +1,6 @@
 import 'package:clouddisk_login_form/api/params/send_file_par.dart';
 import 'package:clouddisk_login_form/bloc/send_file_bloc/send_file_bloc.dart';
+import 'package:clouddisk_login_form/bloc/sort_bloc/sort_bloc.dart';
 import 'package:clouddisk_login_form/presentation/pages/home_page/conponents/send_dialog.dart';
 import 'package:clouddisk_login_form/presentation/pages/home_page/conponents/sort_dialog.dart';
 import 'package:flutter/material.dart';
@@ -22,7 +23,15 @@ class _HomePageState extends State<HomePage> {
   var path = "";
   int initialValue1 = 0;
   int initialValue2 = 0;
+  String sortType = "size";
+  String order = "asc";
   SendFile sendFile = SendFile([], "set");
+  late SortBloc sortBloc;
+  @override
+  initState() {
+    sortBloc = context.read<SortBloc>();
+    super.initState();
+  }
 
   Future<void> onSend(BuildContext context) {
     return showDialog(
@@ -30,78 +39,73 @@ class _HomePageState extends State<HomePage> {
         context: context,
         builder: (context) {
           List<Map<String, dynamic>> listFileSend = [];
-          return SendDialog(
-            onSend: (p0, p1) {
-              Navigator.of(context).pop();
-              for (var element in listMapChecked) {
-                listFileSend.add({
-                  "id": element["id"],
-                  "name": element["name"],
-                  "count": p0,
-                  "expire": p1,
-                });
-              }
-              sendFile.files = listFileSend;
-              addEvent(); //gọi function ở dưới để sử dụng context của HomePage, vì context của HomePage nằm trong BlocProvider ở main.dart
-            },
+          return BlocProvider.value(
+            value: context.read<SendFileBloc>(),
+            child: SendDialog(
+              onSend: (p0, p1) {
+                Navigator.of(context).pop();
+                for (var element in listMapChecked) {
+                  listFileSend.add({
+                    "id": element["id"],
+                    "name": element["name"],
+                    "count": p0,
+                    "expire": p1,
+                  });
+                }
+                sendFile.files = listFileSend;
+                context.read<SendFileBloc>().add(CLickedSendEvent(sendFile));
+              },
+            ),
           );
         });
   }
 
-  void addEvent() {
-    context.read<SendFileBloc>().add(CLickedSendEvent(sendFile));
-  }
-
-  void onSelected(BuildContext context, int value) {
+  void onSelected(BuildContext context, int value) async {
     switch (value) {
       case 0:
-        showDialog(
+        await showDialog(
           context: context,
           builder: (context) {
-            return SortDialog(
-              onValueChange: (int value1, int value2) {
-                initialValue1 = value1;
-                initialValue2 = value2;
-                switch (value1) {
-                  case 0:
-                    sortType = "size";
-                    break;
-                  case 1:
-                    sortType = "name";
-                    break;
-                  case 2:
-                    sortType = "time";
-                    break;
-                }
-                switch (value2) {
-                  case 0:
-                    order = "asc";
-                    break;
-                  case 1:
-                    order = "desc";
-                    break;
-                }
-              },
-              onSave: () {
-                print("Sort Type: $sortType");
-                print("Order: $order");
-                Navigator.of(context).pop();
-                setState(() {
-                  //nhấn Save sẽ gán isSort = true để tiến hành sort, isDefault = false
-                  isSort = true;
-                  // isClickedSort = true;
-                });
-              },
-              onDefault: () {
-                Navigator.of(context).pop();
-                setState(() {
-                  //nhấn Save as Default sẽ gán isDefault = true để trở lại list ban đầu chưa sort, isSort = false
-                  //isClickedDefault có nghĩa là ấn nút Default hay không chứ không có nghĩa list đó default hay không
-                  isClickedDefault = true;
-                });
-              },
-              initValue1: initialValue1,
-              initValue2: initialValue2,
+            return BlocProvider.value(
+              value: context.read<SortBloc>(),
+              child: SortDialog(
+                onValueChange: (int value1, int value2) {
+                  initialValue1 = value1;
+                  initialValue2 = value2;
+                  switch (value1) {
+                    case 0:
+                      sortType = "size";
+                      break;
+                    case 1:
+                      sortType = "name";
+                      break;
+                    case 2:
+                      sortType = "time";
+                      break;
+                  }
+                  switch (value2) {
+                    case 0:
+                      order = "asc";
+                      break;
+                    case 1:
+                      order = "desc";
+                      break;
+                  }
+                },
+                onSave: () {
+                  print("Sort Type: $sortType");
+                  print("Order: $order");
+                  Navigator.of(context).pop();
+                  context
+                      .read<SortBloc>()
+                      .add(ClickedSortEvent(sortType, order));
+                },
+                onDefault: () {
+                  Navigator.of(context).pop();
+                },
+                initValue1: initialValue1,
+                initValue2: initialValue2,
+              ),
             );
           },
         );
@@ -116,6 +120,7 @@ class _HomePageState extends State<HomePage> {
         return Scaffold(
           appBar: AppBar(
             elevation: 0,
+            automaticallyImplyLeading: false,
             title: Row(
               mainAxisAlignment: MainAxisAlignment.start,
               children: [
@@ -125,7 +130,6 @@ class _HomePageState extends State<HomePage> {
                   child: IconButton(
                     padding: const EdgeInsets.all(0),
                     onPressed: () {
-                      currentId = preId;
                       setState(() {
                         //xóa thằng cuối khi pop
                         var chars = path.split("/");
@@ -196,7 +200,6 @@ class _HomePageState extends State<HomePage> {
           ),
           body: WillPopScope(
             onWillPop: () async {
-              currentId = preId;
               setState(() {
                 //xóa thằng cuối khi pop
                 var chars = path.split("/");
@@ -232,17 +235,21 @@ class _HomePageState extends State<HomePage> {
                     var arguments = settings.arguments as Map;
                     var folderId = arguments["folderId"];
                     var currentPath = arguments["currentPath"];
+                    // SortBloc sortBloc = arguments["sortBloc"];
                     path += currentPath;
                     if (path[0] == "/") path = path.substring(1);
                     return MaterialPageRoute(
                       settings: settings,
                       builder: (context) {
-                        return FolderScreen(
-                          folderId: folderId,
-                          currentPath: path,
-                          onPressed: () {
-                            setState(() {});
-                          },
+                        return BlocProvider.value(
+                          value: sortBloc,
+                          child: FolderScreen(
+                            folderId: folderId,
+                            currentPath: path,
+                            onPressed: () {
+                              setState(() {});
+                            },
+                          ),
                         );
                       },
                     );
diff --git a/lib/presentation/pages/login_page/login_screen.dart b/lib/presentation/pages/login_page/login_screen.dart
index 703ed33..84f7676 100644
--- a/lib/presentation/pages/login_page/login_screen.dart
+++ b/lib/presentation/pages/login_page/login_screen.dart
@@ -19,6 +19,11 @@ class _LoginScreenState extends State<LoginScreen> {
   TextEditingController domainController = TextEditingController();
   TextEditingController idController = TextEditingController();
   TextEditingController passwordController = TextEditingController();
+  TextEditingController otpController = TextEditingController();
+  @override
+  void initState() {
+    super.initState();
+  }
 
   @override
   void dispose() {
@@ -30,6 +35,7 @@ class _LoginScreenState extends State<LoginScreen> {
 
   @override
   Widget build(BuildContext context) {
+    Size size = MediaQuery.of(context).size;
     return BlocListener<LoginBloc, LoginState>(
       listener: (context, state) {
         if (state is LoginSuccessLoaded) {
@@ -46,84 +52,98 @@ class _LoginScreenState extends State<LoginScreen> {
           return Stack(
             children: [
               Container(
+                height: size.height,
                 decoration: const BoxDecoration(color: Colors.lightBlue),
-                child: Center(
-                  child: Padding(
-                    padding: const EdgeInsets.fromLTRB(32, 86, 32, 0),
-                    child: Column(
-                      children: [
-                        Container(
-                          padding: const EdgeInsets.all(12),
-                          decoration: BoxDecoration(
-                            border: Border.all(
-                              color: Colors.white,
-                              width: 1,
+                child: SingleChildScrollView(
+                  child: Center(
+                    child: Padding(
+                      padding: const EdgeInsets.fromLTRB(32, 86, 32, 0),
+                      child: Column(
+                        children: [
+                          Container(
+                            padding: const EdgeInsets.all(12),
+                            decoration: BoxDecoration(
+                              border: Border.all(
+                                color: Colors.white,
+                                width: 1,
+                              ),
+                            ),
+                            child: const Text(
+                              'HANBIRO',
+                              style: TextStyle(
+                                fontSize: 12,
+                                letterSpacing: 20.0,
+                                color: Colors.white,
+                              ),
                             ),
                           ),
-                          child: const Text(
-                            'HANBIRO',
+                          const SizedBox(
+                            height: 12,
+                          ),
+                          const Text(
+                            'Cloud Disk',
                             style: TextStyle(
-                              fontSize: 12,
-                              letterSpacing: 20.0,
+                              fontSize: 48,
+                              letterSpacing: 2.0,
                               color: Colors.white,
                             ),
                           ),
-                        ),
-                        const SizedBox(
-                          height: 12,
-                        ),
-                        const Text(
-                          'Cloud Disk',
-                          style: TextStyle(
-                            fontSize: 48,
-                            letterSpacing: 2.0,
-                            color: Colors.white,
+                          const SizedBox(
+                            height: 36,
+                          ),
+                          AuthInput(
+                            controller: domainController,
+                            label: "Domain",
+                            icon: Icons.language,
+                            keyboardType: TextInputType.name,
+                            isPassword: false,
+                          ),
+                          const SizedBox(
+                            height: 8,
+                          ),
+                          AuthInput(
+                            controller: idController,
+                            label: "ID",
+                            icon: Icons.person,
+                            keyboardType: TextInputType.name,
+                            isPassword: false,
                           ),
-                        ),
-                        const SizedBox(
-                          height: 36,
-                        ),
-                        AuthInput(
-                          controller: domainController,
-                          label: "Domain",
-                          icon: Icons.language,
-                          keyboardType: TextInputType.name,
-                          isPassword: false,
-                        ),
-                        const SizedBox(
-                          height: 8,
-                        ),
-                        AuthInput(
-                          controller: idController,
-                          label: "ID",
-                          icon: Icons.person,
-                          keyboardType: TextInputType.name,
-                          isPassword: false,
-                        ),
-                        const SizedBox(
-                          height: 8,
-                        ),
-                        AuthInput(
-                          controller: passwordController,
-                          label: "Password",
-                          icon: Icons.lock,
-                          keyboardType: TextInputType.visiblePassword,
-                          isPassword: true,
-                        ),
-                        const SizedBox(
-                          height: 56,
-                        ),
-                        AuthButton(
-                          label: "Log In",
-                          onTap: () {
-                            // BlocProvider.of<LoginBloc>(context)
-                            //     .add(ClickedLoginEvent(logInRequest));
-                            context
-                                .read<LoginBloc>()
-                                .add(ClickedLoginEvent(logInRequest));
-                          },
-                        ),
-                      ],
+                          const SizedBox(
+                            height: 8,
+                          ),
+                          AuthInput(
+                            controller: passwordController,
+                            label: "Password",
+                            icon: Icons.lock,
+                            keyboardType: TextInputType.visiblePassword,
+                            isPassword: true,
+                          ),
+                          const SizedBox(
+                            height: 8,
+                          ),
+                          AuthInput(
+                            controller: otpController,
+                            label: "OTP",
+                            icon: Icons.code,
+                            keyboardType: TextInputType.phone,
+                            isPassword: false,
+                          ),
+                          const SizedBox(
+                            height: 56,
+                          ),
+                          AuthButton(
+                            label: "Log In",
+                            onTap: () {
+                              // BlocProvider.of<LoginBloc>(context)
+                              //     .add(ClickedLoginEvent(logInRequest));
+                              logInRequest.code = otpController.text;
+                              context
+                                  .read<LoginBloc>()
+                                  .add(ClickedLoginEvent(logInRequest));
+                            },
+                          ),
+                        ],
+                      ),
                     ),
                   ),
                 ),
@@ -138,9 +158,10 @@ class _LoginScreenState extends State<LoginScreen> {
                 ),
               if (state is LoginFailLoaded)
                 Center(
-                  child: SizedBox(
-                    height: 100,
-                    width: 50,
+                  child: Container(
+                    color: Colors.amber.shade50,
+                    height: 50,
+                    width: 100,
                     child: Text(state.error),
                   ),
                 ),
diff --git a/lib/presentation/screens/folder_screen.dart b/lib/presentation/screens/folder_screen.dart
index 7017a49..45213d0 100644
--- a/lib/presentation/screens/folder_screen.dart
+++ b/lib/presentation/screens/folder_screen.dart
@@ -1,6 +1,6 @@
 import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+import 'package:clouddisk_login_form/bloc/sort_bloc/sort_bloc.dart';
 import 'package:clouddisk_login_form/components/list_items.dart';
-import 'package:clouddisk_login_form/global_variable/global_variable.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter_bloc/flutter_bloc.dart';
 
@@ -23,12 +23,12 @@ class _FolderScreenState extends State<FolderScreen> {
 
   @override
   void initState() {
-    if (isSort) {
-      folderTreeBloc.add(SortEvent(widget.folderId, sortType, order));
-    } else {
-      folderTreeBloc.add(LoadEvent(widget.folderId));
-    }
-    currentId = widget.folderId;
+    // if (widget.isSort) {
+    //   folderTreeBloc
+    //       .add(SortListEvent(widget.folderId, widget.sortType, widget.order));
+    // } else {
+    folderTreeBloc.add(LoadEvent(widget.folderId));
+    // }
     super.initState();
   }
 
@@ -39,42 +39,36 @@ class _FolderScreenState extends State<FolderScreen> {
   }
 
   Future<void> _refresh() async {
-    if (isSort) {
-      folderTreeBloc.add(SortEvent(widget.folderId, sortType, order));
-    } else {
-      folderTreeBloc.add(LoadEvent(widget.folderId));
-    }
+    // if (widget.isSort) {
+    //   folderTreeBloc
+    //       .add(SortListEvent(widget.folderId, widget.sortType, widget.order));
+    // } else {
+    folderTreeBloc.add(LoadEvent(widget.folderId));
+    // }
   }
 
   @override
   Widget build(BuildContext context) {
-    // print(isSort);
-    // print("$currentId...${widget.folderId}...$preId");
-    // //=>> thêm điều kiện "currentId == widget.folderId" để chỉ áp dụng cho 1 màn hình đang hiển thị
-    // // Bấm save, tức là tiêu chí sort được áp dụng. (k áp dụng tiêu chí sort đó cho sau này, nghĩa là khi kill app, mở lên lại thì app default)
-    // // Khi push màn hình mới thì sẽ auto sort màn hình mới đó theo tiêu chí sort
-    // // Khi pop, màn hình giữ nguyên như cũ, pull down to refresh mới sort theo tiêu chí sort
-    // if (isSort && currentId == widget.folderId) {
-    //   folderTreeBloc.add(SortEvent(widget.folderId, sortType, order));
-    // }
-    // else {
-    //   currentId == widget.folderId;
-    // }
-    // Save as default, tức là áp dụng tiêu chí sort đó cho sau này, nghĩa là khi kill app, mở lên lại thì app sẽ theo tiêu chí sort đó
     return BlocProvider(
       create: (context) => folderTreeBloc,
-      child: BlocListener<FolderTreeBloc, FolderTreeState>(
+      child: BlocListener<SortBloc, SortState>(
         listener: (context, state) {
-          if (state is FolderTreeLoading) {
-            print("loading");
-          } else if (state is FolderTreeLoaded) {
-            print("loaded");
+          if (state is SortClicked) {
+            folderTreeBloc.add(
+                SortListEvent(widget.folderId, state.sortType, state.order));
           }
         },
-        child: BlocBuilder<FolderTreeBloc, FolderTreeState>(
-          builder: (context, state) {
-            return Scaffold(
-              body: Column(
+        child: BlocListener<FolderTreeBloc, FolderTreeState>(
+          listener: (context, state) {
+            // if (state is FolderTreeLoading) {
+            //   print("loading");
+            // } else if (state is FolderTreeLoaded) {
+            //   print("loaded");
+            // }
+          },
+          child: BlocBuilder<FolderTreeBloc, FolderTreeState>(
+            builder: (context, state) {
+              return Column(
                 children: [
                   widget.folderId == ""
                       ? Container()
@@ -108,9 +102,9 @@ class _FolderScreenState extends State<FolderScreen> {
                       ),
                     ),
                 ],
-              ),
-            );
-          },
+              );
+            },
+          ),
         ),
       ),
     );
