diff --git a/clouddisk.diff b/clouddisk.diff
index a72cf1a..05d06d4 100644
--- a/clouddisk.diff
+++ b/clouddisk.diff
@@ -1,700 +1,8483 @@
-diff --git a/lib/api/api_header.dart b/lib/api/api_header.dart
-index c4f6717..f7e96cc 100644
---- a/lib/api/api_header.dart
-+++ b/lib/api/api_header.dart
-@@ -14,8 +14,6 @@ final loginHeader = {
-   'device_id': '1e10f743-196e-4bc0-aee7-8c14690f2ac4',
-   'X-REQUESTED-WITH': 'XMLHttpRequest',
-   "User_Agent": "Android 1.66 APP_HANBIRO_2.0.0.2",
--  // "Cookie":
--  //     ";HANBIRO_GW=010254fedc4eaa12683367c2601053f919d8fd28b35cfd8c2f42173ed918e48eb9ab17480894076ec3ad7e268176e6b3;hmail_key=33b0cd76a231a3a0a6e247d814c23f9a;cook=kie",
- };
- List<String> cookie = [
-   ";HANBIRO_GW=${user.session}",
-@@ -23,7 +21,7 @@ List<String> cookie = [
-   "cook=kie",
- ];
- 
--//header của getFolder
-+//header của getFolder, sortFolder
- final folderHeader = {
-   "Cookie": cookie.join(";"),
- };
-diff --git a/lib/api/api_url.dart b/lib/api/api_url.dart
-index bb797ab..9a90953 100644
---- a/lib/api/api_url.dart
-+++ b/lib/api/api_url.dart
-@@ -4,3 +4,7 @@ const loginUrl = "$baseUrl/ngw/sign/auth?is_checking_otp=1";
- String getFolderUrl(String type, String id) {
-   return "$baseUrl/cloud/api/get.php?type=$type&id=$id";
- }
-+
-+String sortFolderUrl(String type, String id, String sort, String order) {
-+  return "$baseUrl/cloud/api/get.php?type=$type&id=$id&sort=[{\"sort\":\"$sort\",\"order\":\"$order\"}]";
-+}
+diff --git a/clouddisk.diff b/clouddisk.diff
+index a7d2880..a72cf1a 100644
+--- a/clouddisk.diff
++++ b/clouddisk.diff
+@@ -1,7532 +1,918 @@
+-diff --git a/android/app/src/main/AndroidManifest.xml b/android/app/src/main/AndroidManifest.xml
+-index 914ca7a..5f9ad94 100644
+---- a/android/app/src/main/AndroidManifest.xml
+-+++ b/android/app/src/main/AndroidManifest.xml
+-@@ -31,4 +31,6 @@
+-             android:name="flutterEmbedding"
+-             android:value="2" />
+-     </application>
+-+<uses-permission android:name="android.permission.INTERNET"/>
+-+
+- </manifest>
+-diff --git a/clouddisk.diff b/clouddisk.diff
+-index c236fd2..43f3fa5 100644
+---- a/clouddisk.diff
+-+++ b/clouddisk.diff
+-@@ -1,3003 +1,4194 @@
+--diff --git a/clouddisk.diff b/clouddisk.diff
+-+diff --git a/assets/fonts/AppIcon.ttf b/assets/fonts/AppIcon.ttf
+- new file mode 100644
+--index 0000000..d953055
+----- /dev/null
+-+index 0000000..9ae3931
+-+Binary files /dev/null and b/assets/fonts/AppIcon.ttf differ
+-+diff --git a/assets/images/bg_profile.jpg b/assets/images/bg_profile.jpg
+-+deleted file mode 100644
+-+index 54e1c30..0000000
+-+Binary files a/assets/images/bg_profile.jpg and /dev/null differ
+-+diff --git a/clouddisk.diff b/clouddisk.diff
+-+index d953055..c236fd2 100644
+-+--- a/clouddisk.diff
+- +++ b/clouddisk.diff
+--@@ -0,0 +1,1776 @@
+--+diff --git a/clouddisk.diff b/clouddisk.diff
+--+new file mode 100644
+--+index 0000000..ce906bf
+--+--- /dev/null
+--++++ b/clouddisk.diff
+--+@@ -0,0 +1,1000 @@
+--++diff --git a/lib/api/auth.dart b/lib/api/auth.dart
+--++index ee47d2a..fa16976 100644
+--++--- a/lib/api/auth.dart
+--+++++ b/lib/api/auth.dart
+--++@@ -1,8 +1,12 @@
+--+++// ignore: depend_on_referenced_packages
+-+@@ -1,33 +1,1037 @@
+-+ diff --git a/clouddisk.diff b/clouddisk.diff
+-+ new file mode 100644
+-+-index 0000000..ce906bf
+-++index 0000000..d953055
+-+ --- /dev/null
+-+ +++ b/clouddisk.diff
+-+-@@ -0,0 +1,1000 @@
+-+-+diff --git a/lib/api/auth.dart b/lib/api/auth.dart
+-+-+index ee47d2a..fa16976 100644
+-+-+--- a/lib/api/auth.dart
+-+-++++ b/lib/api/auth.dart
+-+-+@@ -1,8 +1,12 @@
+-+-++// ignore: depend_on_referenced_packages
+-+-++import 'package:clouddisk_login_form/models/user.dart';
+-+-+ import 'package:dio/dio.dart';
+-+-+ 
+-+-+-const baseUrl =
+-+-+-    'https://groupware57.hanbiro.net/ngw/sign/auth?is_checking_otp=1';
+-+-+-const defaultHeader = {
+-+-++const baseUrl = "https://groupware57.hanbiro.net";
+-+-++const loginUrl = "$baseUrl/ngw/sign/auth?is_checking_otp=1";
+-+-++const getFolderUrl = "$baseUrl/cloud/api/get.php?access=1&type=dir";
+-++@@ -0,0 +1,1776 @@
+-+++diff --git a/clouddisk.diff b/clouddisk.diff
+-+++new file mode 100644
+-+++index 0000000..ce906bf
+-+++--- /dev/null
+-++++++ b/clouddisk.diff
+-+++@@ -0,0 +1,1000 @@
+-++++diff --git a/lib/api/auth.dart b/lib/api/auth.dart
+-++++index ee47d2a..fa16976 100644
+-++++--- a/lib/api/auth.dart
+-+++++++ b/lib/api/auth.dart
+-++++@@ -1,8 +1,12 @@
+-+++++// ignore: depend_on_referenced_packages
+-+++++import 'package:clouddisk_login_form/models/user.dart';
+-++++ import 'package:dio/dio.dart';
+-++++ 
+-++++-const baseUrl =
+-++++-    'https://groupware57.hanbiro.net/ngw/sign/auth?is_checking_otp=1';
+-++++-const defaultHeader = {
+-+++++const baseUrl = "https://groupware57.hanbiro.net";
+-+++++const loginUrl = "$baseUrl/ngw/sign/auth?is_checking_otp=1";
+-+++++const getFolderUrl = "$baseUrl/cloud/api/get.php?access=1&type=dir";
+-+++++//header của login
+-+++++final loginHeader = {
+-++++   "Content-Type": "application/x-www-form-urlencoded",
+-++++   'APP_TYPE': 'clouddisk',
+-++++   'App-Type': 'clouddisk',
+-++++@@ -15,20 +19,53 @@ const defaultHeader = {
+-++++   'device_id': '1e10f743-196e-4bc0-aee7-8c14690f2ac4',
+-++++   'X-REQUESTED-WITH': 'XMLHttpRequest',
+-++++   "User_Agent": "Android 1.66 APP_HANBIRO_2.0.0.2",
+-+++++  "Cookie":
+-+++++      ";HANBIRO_GW=010254fedc4eaa12683367c2601053f919d8fd28b35cfd8c2f42173ed918e48eb9ab17480894076ec3ad7e268176e6b3;hmail_key=33b0cd76a231a3a0a6e247d814c23f9a;cook=kie",
+-+++++};
+-+++++List<String> cookie = [
+-+++++  ";HANBIRO_GW=${user.session}",
+-+++++  "hmail_key=${user.hmailKey}",
+-+++++  "cook=kie",
+-+++++];
+-+++++
+-+++++//header của getFolder
+-+++++final folderHeader = {
+-+++++  "Cookie": cookie.join(";"),
+-++++ };
+-++++ 
+-++++ class AuthApi {
+-++++   final Dio _dio = Dio();
+-+++++  Future<String> get(url, Map<String, dynamic>? header) async {
+-+++++    var response = await _dio.get(
+-+++++      url,
+-+++++      options: Options(
+-+++++        headers: header,
+-+++++      ),
+-+++++    );
+-+++++    var responseData = response.data;
+-+++++    return responseData;
+-+++++  }
+-++++ 
+-++++-  Future<Map> post(url, Map req) async {
+-+++++  Future<Map> post(url, Map req, Map<String, dynamic>? header) async {
+-++++     var response = await _dio.post(
+-++++       url,
+-++++       data: req,
+-++++       options: Options(
+-++++-        headers: defaultHeader,
+-+++++        headers: header,
+-++++       ),
+-++++     );
+-++++     var responseData = response.data;
+-+++++
+-++++     return responseData;
+-++++   }
+-++++ }
+-+++++
+-+++++Future getFolderlv2() async {
+-+++++  AuthApi api = AuthApi();
+-+++++
+-+++++  String url =
+-+++++      "https://groupware57.hanbiro.net/cloud/api/get.php?cache=false&id=my&type=file";
+-+++++  var resp = await api.get(url, folderHeader);
+-+++++  // ignore: unnecessary_type_check
+-+++++  print(resp);
+-+++++}
+-++++diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+-++++index 1919d98..2e25020 100644
+-++++--- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+-+++++++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+-++++@@ -1,5 +1,8 @@
+-++++ // ignore: depend_on_referenced_packages
+-+++++import 'dart:convert';
+-+++++
+-++++ import 'package:bloc/bloc.dart';
+-+++++import 'package:clouddisk_login_form/api/auth.dart';
+-++++ import 'package:equatable/equatable.dart';
+-++++ 
+-++++ import 'package:clouddisk_login_form/models/item.dart';
+-++++@@ -8,47 +11,52 @@ part 'folder_tree_event.dart';
+-++++ part 'folder_tree_state.dart';
+-++++ 
+-++++ class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
+-++++-  List<int> ids = []; // Tạo một list gồm những id
+-+++++  // List<int> ids = []; // Tạo một list gồm những id
+-+++++  AuthApi api = AuthApi();
+-+++++
+-++++   FolderTreeBloc() : super(FolderTreeInitial()) {
+-++++     on<FolderTreeEvent>((event, emit) async {
+-++++       if (event is LoadEvent) {
+-++++         emit(FolderTreeLoading());
+-++++-        final id = event.id;
+-++++-        for (Folder folder in folders) {
+-++++-          if (folder.id == id) {
+-++++-            ids.add(id); // Lưu những id đã đi qua vào ids
+-++++-            await Future.delayed(const Duration(seconds: 1), () {
+-++++-              //Tạo cảm giác load data
+-++++-              emit(FolderTreeLoaded(folder.children));
+-++++-            });
+-++++-            // emit(FolderTreeLoaded(folder.children));
+-++++-            break;
+-++++-          }
+-++++-        }
+-++++-      }
+-++++-      if (event is BackEvent) {
+-++++-        emit(FolderTreeLoading());
+-++++-        //ids.last tức là id của folder đang hiển thị
+-++++-        if (ids.last != 0) {
+-++++-          //nếu folder đang hiển thị không phải folder gốc thì sẽ xóa nó đi
+-++++-          ids.removeLast();
+-++++-        } else {
+-++++-          // nếu đang ở folder gốc thì clear toàn bộ ids và gán phần tử đầu tiên là folder gốc
+-++++-          ids.clear();
+-++++-          ids.add(0);
+-++++-        }
+-++++-        final preId = ids[ids.length - 1];
+-++++-        //preId lưu trữ id của folder trước folder hiện tại, nếu id đang = 0 thì ids chỉ có mỗi một phần tử là 0, vì đã clear ở trên
+-++++-        for (Folder folder in folders) {
+-++++-          if (folder.id == preId) {
+-++++-            await Future.delayed(const Duration(seconds: 1), () {
+-++++-              //Tạo cảm giác load data
+-++++-              emit(FolderTreeLoaded(folder.children));
+-++++-            });
+-++++-            break;
+-++++-          }
+-++++-        }
+-+++++
+-+++++        // final id = event.id;
+-+++++        // for (Folder folder in folders) {
+-+++++        //   if (folder.id == id) {
+-+++++        // ids.add(id); // Lưu những id đã đi qua vào ids
+-+++++        final resp = await api.get(getFolderUrl, folderHeader);
+-+++++        final json = jsonDecode(resp) as List;
+-+++++        folders =
+-+++++            json.map((folderJson) => Folder.fromJson(folderJson)).toList();
+-+++++        emit(FolderTreeLoaded(folders));
+-+++++
+-+++++        // emit(FolderTreeLoaded(folder.children));
+-+++++        //     break;
+-+++++        //   }
+-+++++        // }
+-++++       }
+-+++++      // if (event is BackEvent) {
+-+++++      //   emit(FolderTreeLoading());
+-+++++      //   //ids.last tức là id của folder đang hiển thị
+-+++++      //   if (ids.last != 0) {
+-+++++      //     //nếu folder đang hiển thị không phải folder gốc thì sẽ xóa nó đi
+-+++++      //     ids.removeLast();
+-+++++      //   } else {
+-+++++      //     // nếu đang ở folder gốc thì clear toàn bộ ids và gán phần tử đầu tiên là folder gốc
+-+++++      //     ids.clear();
+-+++++      //     ids.add(0);
+-+++++      //   }
+-+++++      //   final preId = ids[ids.length - 1];
+-+++++      //   //preId lưu trữ id của folder trước folder hiện tại, nếu id đang = 0 thì ids chỉ có mỗi một phần tử là 0, vì đã clear ở trên
+-+++++      //   for (Folder folder in folders) {
+-+++++      //     if (folder.id == preId) {
+-+++++      //       await Future.delayed(const Duration(seconds: 1), () {
+-+++++      //         //Tạo cảm giác load data
+-+++++      //         emit(FolderTreeLoaded(folder.children));
+-+++++      //       });
+-+++++      //       break;
+-+++++      //     }
+-+++++      //   }
+-+++++      // }
+-++++     });
+-++++   }
+-++++ }
+-++++diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
+-++++index be623fd..9784692 100644
+-++++--- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
+-+++++++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
+-++++@@ -8,16 +8,16 @@ abstract class FolderTreeEvent extends Equatable {
+-++++ }
+-++++ 
+-++++ class LoadEvent extends FolderTreeEvent {
+-++++-  final int id;
+-+++++  final String id;
+-++++   const LoadEvent(this.id);
+-++++ 
+-++++   @override
+-++++   List<Object> get props => [id];
+-++++ }
+-++++ 
+-++++-class BackEvent extends FolderTreeEvent {
+-++++-  const BackEvent();
+-+++++// class BackEvent extends FolderTreeEvent {
+-+++++//   const BackEvent();
+-++++ 
+-++++-  @override
+-++++-  List<Object> get props => [];
+-++++-}
+-+++++//   @override
+-+++++//   List<Object> get props => [];
+-+++++// }
+-++++diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_state.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_state.dart
+-++++index 50bad17..35ef393 100644
+-++++--- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_state.dart
+-+++++++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_state.dart
+-++++@@ -12,8 +12,7 @@ class FolderTreeInitial extends FolderTreeState {}
+-++++ class FolderTreeLoading extends FolderTreeState {}
+-++++ 
+-++++ class FolderTreeLoaded extends FolderTreeState {
+-++++-  final List<Item> items;
+-++++-
+-+++++  final List<Folder> items;
+-++++   const FolderTreeLoaded(this.items);
+-++++ 
+-++++   @override
+-++++diff --git a/lib/bloc/login/bloc/login_bloc.dart b/lib/bloc/login/bloc/login_bloc.dart
+-++++index ce24ca5..c8c83ae 100644
+-++++--- a/lib/bloc/login/bloc/login_bloc.dart
+-+++++++ b/lib/bloc/login/bloc/login_bloc.dart
+-++++@@ -1,5 +1,6 @@
+-++++ // ignore: depend_on_referenced_packages
+-++++ import 'package:bloc/bloc.dart';
+-+++++import 'package:clouddisk_login_form/models/user.dart';
+-++++ import 'package:equatable/equatable.dart';
+-++++ 
+-++++ import 'package:clouddisk_login_form/api/auth.dart';
+-++++@@ -14,9 +15,11 @@ class LoginBloc extends Bloc<LoginEvent, LoginState> {
+-++++     on<LoginEvent>((event, emit) async {
+-++++       if (event is ClickedLoginEvent) {
+-++++         emit(LoginLoading());
+-++++-        final value = await api.post(baseUrl, event.req.getMap());
+-+++++        final value = await api.post(loginUrl, event.req.getMap(), loginHeader);
+-++++         var loginRes = LogInResponse(value);
+-++++         if (loginRes.success == true) {
+-+++++          user.hmailKey = loginRes.hmailkey;
+-+++++          user.session = loginRes.session;
+-++++           emit(LoginSuccessLoaded(loginRes));
+-++++         } else {
+-++++           emit(const LoginFailLoaded("Không đăng nhập được"));
+-++++diff --git a/lib/components/auth_input.dart b/lib/components/auth_input.dart
+-++++index 94239a2..ea94596 100644
+-++++--- a/lib/components/auth_input.dart
+-+++++++ b/lib/components/auth_input.dart
+-++++@@ -57,7 +57,7 @@ class _AuthInputState extends State<AuthInput> {
+-++++               decoration: InputDecoration(
+-++++                 labelText: widget.label,
+-++++                 floatingLabelBehavior: FloatingLabelBehavior.auto,
+-++++-                contentPadding: const EdgeInsets.only(top: -8, bottom: 4),
+-+++++                contentPadding: const EdgeInsets.only(top: -6, bottom: 4),
+-++++                 border: InputBorder.none,
+-++++                 suffixIcon: widget.isPassword
+-++++                     ? IconButton(
+-++++diff --git a/lib/components/item_file.dart b/lib/components/item_file.dart
+-++++index ea9ad83..3476abc 100644
+-++++--- a/lib/components/item_file.dart
+-+++++++ b/lib/components/item_file.dart
+-++++@@ -2,7 +2,7 @@ import 'package:clouddisk_login_form/models/item.dart';
+-++++ import 'package:flutter/material.dart';
+-++++ 
+-++++ class ItemFile extends StatelessWidget {
+-++++-  final Item item;
+-+++++  final Folder item;
+-++++   final VoidCallback onPressed;
+-++++ 
+-++++   const ItemFile({
+-++++@@ -18,7 +18,7 @@ class ItemFile extends StatelessWidget {
+-++++         onPressed();
+-++++       },
+-++++       child: Container(
+-++++-        padding: const EdgeInsets.only(top: 12, bottom: 12, left: 16),
+-+++++        padding: const EdgeInsets.only(top: 16, bottom: 16, left: 16),
+-++++         decoration: BoxDecoration(
+-++++             border: Border(
+-++++           bottom: BorderSide(
+-++++@@ -27,27 +27,27 @@ class ItemFile extends StatelessWidget {
+-++++         )),
+-++++         child: Row(
+-++++           children: [
+-++++-            Container(
+-++++-              padding: const EdgeInsets.all(4),
+-++++-              decoration: BoxDecoration(
+-++++-                // borderRadius: BorderRadius.circular(12),
+-++++-                shape: BoxShape.circle,
+-++++-                color: item is Folder ? ((item as Folder).color) : null,
+-++++-              ),
+-++++-              child: item is Folder
+-++++-                  ? Icon(
+-++++-                      (item as Folder).icon,
+-++++-                      color: Colors.white,
+-++++-                      size: 20,
+-++++-                    )
+-++++-                  : null,
+-++++-            ),
+-+++++            // Container(
+-+++++            //   padding: const EdgeInsets.all(4),
+-+++++            //   decoration: BoxDecoration(
+-+++++            //     // borderRadius: BorderRadius.circular(12),
+-+++++            //     shape: BoxShape.circle,
+-+++++            //     // color: item is Folder ? ((item as Folder).color) : null,
+-+++++            //   ),
+-+++++            //   child: item is Folder
+-+++++            //       ? Icon(
+-+++++            //           (item as Folder).icon,
+-+++++            //           color: Colors.white,
+-+++++            //           size: 20,
+-+++++            //         )
+-+++++            //       : null,
+-+++++            // ),
+-++++             const SizedBox(
+-++++               width: 8,
+-++++             ),
+-++++             Center(
+-++++               child: Text(
+-++++-                '${item.title}${item is File ? '.${(item as File).extension}' : ''}',
+-+++++                item.text,
+-++++                 style: const TextStyle(
+-++++                   fontSize: 16,
+-++++                   fontWeight: FontWeight.w400,
+-++++diff --git a/lib/components/item_leading.dart b/lib/components/item_leading.dart
+-++++new file mode 100644
+-++++index 0000000..ba70dc1
+-++++--- /dev/null
+-+++++++ b/lib/components/item_leading.dart
+-++++@@ -0,0 +1,43 @@
+-+++++import 'package:flutter/material.dart';
+-+++++
+-+++++class ItemLeading extends StatelessWidget {
+-+++++  const ItemLeading({
+-+++++    Key? key,
+-+++++    required this.icon,
+-+++++    required this.content,
+-+++++    required this.onPressed,
+-+++++  }) : super(key: key);
+-+++++  final IconData icon;
+-+++++  final String content;
+-+++++  final VoidCallback onPressed;
+-+++++
+-+++++  @override
+-+++++  Widget build(BuildContext context) {
+-+++++    return InkWell(
+-+++++      onTap: () {
+-+++++        onPressed();
+-+++++      },
+-+++++      child: Padding(
+-+++++        padding: const EdgeInsets.all(16.0),
+-+++++        child: Row(
+-+++++          children: [
+-+++++            Icon(
+-+++++              icon,
+-+++++              color: Colors.grey.shade700,
+-+++++            ),
+-+++++            const SizedBox(
+-+++++              width: 24,
+-+++++            ),
+-+++++            Text(
+-+++++              content,
+-+++++              style: const TextStyle(
+-+++++                fontSize: 18,
+-+++++                color: Colors.black,
+-+++++              ),
+-+++++            )
+-+++++          ],
+-+++++        ),
+-+++++      ),
+-+++++    );
+-+++++  }
+-+++++}
+-++++diff --git a/lib/components/list_items.dart b/lib/components/list_items.dart
+-++++index 111fe6a..2df6c65 100644
+-++++--- a/lib/components/list_items.dart
+-+++++++ b/lib/components/list_items.dart
+-++++@@ -3,10 +3,9 @@ import 'package:clouddisk_login_form/components/item_file.dart';
+-++++ import 'package:clouddisk_login_form/models/item.dart';
+-++++ import 'package:flutter/material.dart';
+-++++ import 'package:flutter_bloc/flutter_bloc.dart';
+-++++-import 'package:pull_to_refresh/pull_to_refresh.dart';
+-++++ 
+-++++ class ListItems extends StatefulWidget {
+-++++-  final List<Item> items;
+-+++++  final List<Folder> items;
+-++++   const ListItems({super.key, required this.items});
+-++++ 
+-++++   @override
+-++++@@ -14,64 +13,30 @@ class ListItems extends StatefulWidget {
+-++++ }
+-++++ 
+-++++ class _ListItemsState extends State<ListItems> {
+-++++-  RefreshController refreshController =
+-++++-      RefreshController(initialRefresh: false);
+-++++-
+-++++-  void onRefresh() async {
+-++++-    // monitor network fetch
+-++++-    await Future.delayed(Duration(milliseconds: 1000));
+-++++-    refreshController.refreshCompleted();
+-++++-  }
+-++++-
+-++++   @override
+-++++   Widget build(BuildContext context) {
+-++++-    return SmartRefresher(
+-++++-      controller: refreshController,
+-++++-      enablePullDown: true,
+-++++-      header: CustomHeader(
+-++++-        builder: ((context, mode) {
+-++++-          Widget body;
+-++++-          if (mode == LoadStatus.idle) {
+-++++-            body = const Text("pull down to refresh");
+-++++-          } else if (mode == LoadStatus.loading) {
+-++++-            body = const Text("loading");
+-++++-          } else if (mode == LoadStatus.canLoading) {
+-++++-            body = const Text("release to refresh");
+-++++-          } else {
+-++++-            body = const Text("No more Data");
+-++++-          }
+-++++-          return SizedBox(
+-++++-            height: 35,
+-++++-            child: Center(
+-++++-              child: body,
+-+++++    return (widget.items.isNotEmpty)
+-+++++        ? ListView.builder(
+-+++++            itemCount: widget.items.length,
+-+++++            itemBuilder: (context, index) => ItemFile(
+-+++++              item: widget.items[index],
+-+++++              onPressed: () {
+-+++++                if (widget.items[index] is Folder) {
+-+++++                  // BlocProvider.of<FolderTreeBloc>(context).add(
+-+++++                  //   LoadEvent(widget.items[index].id),
+-+++++                  // );
+-+++++                }
+-+++++              },
+-++++             ),
+-++++-          );
+-++++-        }),
+-++++-      ),
+-++++-      onRefresh: onRefresh,
+-++++-      child: (widget.items.isNotEmpty)
+-++++-          ? ListView.builder(
+-++++-              itemCount: widget.items.length,
+-++++-              itemBuilder: (context, index) => ItemFile(
+-++++-                item: widget.items[index],
+-++++-                onPressed: () {
+-++++-                  if (widget.items[index] is Folder) {
+-++++-                    BlocProvider.of<FolderTreeBloc>(context).add(
+-++++-                      LoadEvent(widget.items[index].id),
+-++++-                    );
+-++++-                  }
+-++++-                },
+-++++-              ),
+-++++-            )
+-++++-          : const Center(
+-++++-              child: Text(
+-++++-                "No Data",
+-++++-                style: TextStyle(
+-++++-                  fontSize: 18,
+-++++-                  color: Colors.black54,
+-++++-                ),
+-+++++          )
+-+++++        : const Center(
+-+++++            child: Text(
+-+++++              "No Data",
+-+++++              style: TextStyle(
+-+++++                fontSize: 18,
+-+++++                color: Colors.black54,
+-++++               ),
+-++++             ),
+-++++-    );
+-+++++          );
+-++++   }
+-++++ }
+-++++diff --git a/lib/main.dart b/lib/main.dart
+-++++index 4b3d10f..e311817 100644
+-++++--- a/lib/main.dart
+-+++++++ b/lib/main.dart
+-++++@@ -1,12 +1,9 @@
+-++++ import 'package:clouddisk_login_form/bloc/login/bloc/login_bloc.dart';
+-++++-import 'package:clouddisk_login_form/models/item.dart';
+-++++-import 'package:clouddisk_login_form/presentation/pages/home_page/home_page.dart';
+-++++ import 'package:clouddisk_login_form/presentation/pages/login_page/login_screen.dart';
+-++++ import 'package:flutter/material.dart';
+-++++ import 'package:flutter_bloc/flutter_bloc.dart';
+-++++ 
+-++++ void main() {
+-++++-  fakeData();
+-++++   runApp(const MyApp());
+-++++ }
+-++++ 
+-++++diff --git a/lib/models/item.dart b/lib/models/item.dart
+-++++index ab39e47..3e288be 100644
+-++++--- a/lib/models/item.dart
+-+++++++ b/lib/models/item.dart
+-++++@@ -1,87 +1,21 @@
+-++++-import 'package:flutter/material.dart';
+-++++-
+-++++-class Item {
+-++++-  int id;
+-++++-  String title;
+-++++-  Item(this.id, this.title);
+-++++-}
+-++++-
+-++++-class File extends Item {
+-++++-  String extension;
+-++++-  String image;
+-++++-  File(int id, String title, this.image, this.extension) : super(id, title);
+-++++-}
+-++++-
+-++++-class Folder extends Item {
+-++++-  IconData? icon;
+-++++-  Color? color;
+-++++-  List<Item> children;
+-+++++class Folder {
+-+++++  final String id;
+-+++++  final String text;
+-++++   Folder(
+-++++-    int id,
+-++++-    String title,
+-++++-    this.icon,
+-++++-    this.color,
+-++++-    this.children,
+-++++-  ) : super(id, title);
+-++++-  void addChildren(List<Item> items) {
+-++++-    for (Item item in items) {
+-++++-      children.add(item);
+-++++-    }
+-++++-  }
+-+++++    this.id,
+-+++++    this.text,
+-+++++  );
+-++++ 
+-++++-  void updateIconandColor(List<Item> items) {
+-++++-    for (Item item in items) {
+-++++-      if (item is Folder) {
+-++++-        item.icon = icon;
+-++++-        item.color = color;
+-++++-      }
+-++++-    }
+-+++++  factory Folder.fromJson(Map<String, dynamic> json) {
+-+++++    return Folder(
+-+++++      json['id'] as String,
+-+++++      json['text'] as String,
+-+++++    );
+-++++   }
+-++++-}
+-++++-
+-++++-List<File> files = [
+-++++-  File(0, 'a', 'assets/images/file-image.png', "jpg"),
+-++++-  File(1, 'smile', 'assets/images/file-image.png', "gif"),
+-++++-  File(2, 'z', 'assets/images/file-image.png', "txt"),
+-++++-  File(3, 'Beauty', 'assets/images/image.jpg', "jpg"),
+-++++-  File(4, 'MusicFile', 'assets/images/file-image.png', "mp3"),
+-++++-];
+-++++ 
+-++++-List<Folder> folders = [
+-++++-  Folder(0, 'Home', null, null, []),
+-++++-  Folder(1, 'My', Icons.folder, Colors.blueAccent.shade400, []),
+-++++-  Folder(2, 'CloudFolder', Icons.cloud_sync, Colors.green.shade900, []),
+-++++-  Folder(3, 'Company', Icons.snippet_folder, Colors.orange.shade400, []),
+-++++-  Folder(4, 'Shared', Icons.share, Colors.purple.shade800, []),
+-++++-  Folder(5, 'Notification Folder', Icons.campaign_outlined, Colors.brown, []),
+-++++-  Folder(6, 'Guest Folder', Icons.source, Colors.teal.shade700, []),
+-++++-  Folder(7, 'Trash', Icons.delete_outline, Colors.red.shade900, []),
+-++++-  Folder(8, 'QA', null, null, []),
+-++++-  Folder(9, 'Tester', null, null, []),
+-++++-  Folder(10, 'Secure', null, null, []),
+-++++-];
+-++++-
+-++++-void fakeData() {
+-++++-  folders[0].addChildren([
+-++++-    folders[1],
+-++++-    folders[2],
+-++++-    folders[3],
+-++++-    folders[4],
+-++++-    folders[5],
+-++++-    folders[6],
+-++++-    folders[7],
+-++++-  ]);
+-++++-  folders[1].addChildren([
+-++++-    folders[8],
+-++++-    files[0],
+-++++-    folders[9],
+-++++-  ]);
+-++++-  folders[2].addChildren([
+-++++-    files[1],
+-++++-  ]);
+-++++-  folders[3].addChildren([
+-++++-    folders[10],
+-++++-  ]);
+-++++-  folders[1].updateIconandColor(folders[1].children);
+-++++-  folders[3].updateIconandColor(folders[3].children);
+-+++++  @override
+-+++++  String toString() => 'Folder(id: $id, text: $text)';
+-++++ }
+-+++++
+-+++++List<Folder> folders = [];
+-+++++List<Folder> subFolders = [];
+-++++diff --git a/lib/models/login.dart b/lib/models/login.dart
+-++++index 74b988f..9bcd0a5 100644
+-++++--- a/lib/models/login.dart
+-+++++++ b/lib/models/login.dart
+-++++@@ -21,22 +21,32 @@ class LogInRequest {
+-++++ }
+-++++ 
+-++++ final LogInRequest logInRequest = LogInRequest(
+-++++-    "cmGw7OXyYe4:APA91bGYAL29_GyI7wx3IcFiVYsxZbt8FtJJezhs1Ot_F0F1vEHljzkmV28p9owvsI3ABM3yvqwpkEdqCXJWTGwXb9XQwFtDYqaS-9Inc",
+-++++-    "oRfAa0Ex1ZVsHLimNx5XpV1eeiNs+g2OhPIDYHI8IpWFhHNQ2Nm0C1KuISROSJj9NZ6rpnL6ZsYduCKvD38he8bfK7lQHB/3EcDEZWRUgCyv4z61OAf2pMXhQfbOWvCMfsdJ0JBun7iC1mQ7aSLzT/JJYDUybwJbPx72GOjQ1j4=",
+-++++-    "wtsaWk7utF6GtHIFZKwXYarexC/Qp4fY/5xAjq7+gC/afF1d1/Gt7FEgU1UcnHxLtNHOn2dgC8Z7qdTMonGaZ+aRTGWh70sfxy0QLL7Ij/RyjqqIwqGuxNXrSOkwcp3EiN1S/6z7maMTl5XZ6c/Bww3w/G1mcsmnPCZ6gaJzMMk=",
+-++++-    "samsung SM-N970F",
+-++++-    "212970",
+-++++-    "2eaba74b-e0b5-49cb-b9ab-f9630845d43b");
+-+++++  "cmGw7OXyYe4:APA91bGYAL29_GyI7wx3IcFiVYsxZbt8FtJJezhs1Ot_F0F1vEHljzkmV28p9owvsI3ABM3yvqwpkEdqCXJWTGwXb9XQwFtDYqaS-9Inc",
+-+++++  "oRfAa0Ex1ZVsHLimNx5XpV1eeiNs+g2OhPIDYHI8IpWFhHNQ2Nm0C1KuISROSJj9NZ6rpnL6ZsYduCKvD38he8bfK7lQHB/3EcDEZWRUgCyv4z61OAf2pMXhQfbOWvCMfsdJ0JBun7iC1mQ7aSLzT/JJYDUybwJbPx72GOjQ1j4=",
+-+++++  "wtsaWk7utF6GtHIFZKwXYarexC/Qp4fY/5xAjq7+gC/afF1d1/Gt7FEgU1UcnHxLtNHOn2dgC8Z7qdTMonGaZ+aRTGWh70sfxy0QLL7Ij/RyjqqIwqGuxNXrSOkwcp3EiN1S/6z7maMTl5XZ6c/Bww3w/G1mcsmnPCZ6gaJzMMk=",
+-+++++  "samsung SM-N970F",
+-+++++  "212970",
+-+++++  "2eaba74b-e0b5-49cb-b9ab-f9630845d43b",
+-+++++);
+-++++ 
+-++++ class LogInResponse {
+-++++   late bool success;
+-++++   late final String? msg;
+-+++++  late String session;
+-+++++  late String hmailkey;
+-++++   LogInResponse(Map map) {
+-++++-    success = map['success'];
+-++++-    msg = map['msg'];
+-+++++    success = map["success"];
+-+++++    msg = map["msg"];
+-+++++    session = map["session"];
+-+++++    hmailkey = map["hmail_key"];
+-++++   }
+-++++ 
+-++++   Map getMap() {
+-++++-    return {"success": success};
+-+++++    return {
+-+++++      "success": success,
+-+++++      "msg": msg,
+-+++++      "session": session,
+-+++++      "hmail_key": hmailkey,
+-+++++    };
+-++++   }
+-++++ }
+-++++diff --git a/lib/models/user.dart b/lib/models/user.dart
+-++++new file mode 100644
+-++++index 0000000..3d2ffba
+-++++--- /dev/null
+-+++++++ b/lib/models/user.dart
+-++++@@ -0,0 +1,7 @@
+-+++++class User {
+-+++++  String session;
+-+++++  String hmailKey;
+-+++++  User(this.session, this.hmailKey);
+-+++++}
+-+++++
+-+++++User user = User("", "");
+-++++diff --git a/lib/presentation/pages/home_page/home_page.dart b/lib/presentation/pages/home_page/home_page.dart
+-++++index b7d302d..7031ef0 100644
+-++++--- a/lib/presentation/pages/home_page/home_page.dart
+-+++++++ b/lib/presentation/pages/home_page/home_page.dart
+-++++@@ -1,4 +1,6 @@
+-+++++import 'package:clouddisk_login_form/api/auth.dart';
+-++++ import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+-+++++import 'package:clouddisk_login_form/models/item.dart';
+-++++ import 'package:clouddisk_login_form/presentation/screens/folder_screen.dart';
+-++++ import 'package:flutter/material.dart';
+-++++ import 'package:flutter_bloc/flutter_bloc.dart';
+-++++@@ -15,12 +17,14 @@ class _HomePageState extends State<HomePage> {
+-++++   final FolderTreeBloc folderTreeBloc = FolderTreeBloc();
+-++++   @override
+-++++   void initState() {
+-++++-    folderTreeBloc.add(const LoadEvent(0));
+-+++++    folderTreeBloc.add(const LoadEvent(""));
+-++++     super.initState();
+-++++   }
+-++++ 
+-++++   @override
+-++++   Widget build(BuildContext context) {
+-+++++    getFolderlv2();
+-+++++
+-++++     void onSelected(BuildContext context, int value) {
+-++++       switch (value) {
+-++++         case 0:
+-++++@@ -30,67 +34,26 @@ class _HomePageState extends State<HomePage> {
+-++++       }
+-++++     }
+-++++ 
+-++++-    //add drawer under appBar by using Scaffold below Scaffold
+-++++     return Scaffold(
+-++++       appBar: PreferredSize(
+-++++         preferredSize: const Size.fromHeight(50),
+-++++         child: AppBar(
+-++++           title: const Text("Home"),
+-++++-          leading: IconButton(
+-++++-            onPressed: () {
+-++++-              if (scaffoldKey.currentState!.isDrawerOpen) {
+-++++-                Navigator.pop((context));
+-++++-              } else {
+-++++-                scaffoldKey.currentState!.openDrawer();
+-++++-              }
+-++++-            },
+-++++-            icon: const Icon(Icons.menu),
+-++++-          ),
+-++++           actions: [
+-++++             Theme(
+-++++               data: Theme.of(context).copyWith(
+-++++                   iconTheme: const IconThemeData(color: Colors.white),
+-++++                   textTheme: const TextTheme().apply(bodyColor: Colors.white)),
+-++++               child: PopupMenuButton<int>(
+-++++-                offset: const Offset(0, 60),
+-++++-                shape: const TooltipShape(),
+-+++++                offset: const Offset(0, 50),
+-++++                 color: Colors.indigo.shade900,
+-++++                 onSelected: (value) {
+-++++                   onSelected(context, value);
+-++++                 },
+-++++                 itemBuilder: ((context) {
+-++++                   return [
+-++++-                    popupMenuItem("Download"),
+-++++                     popupMenuItem("New Folder"),
+-++++-                    popupMenuItem("Delete"),
+-++++-                    popupMenuItem("Copy"),
+-++++-                    popupMenuItem("Move"),
+-++++-                    popupMenuItem("Favorite"),
+-++++                     popupMenuItem("Sort"),
+-++++-                    // const PopupMenuItem<int>(
+-++++-                    //   value: 1,
+-++++-                    //   child: Text("New Folder"),
+-++++-                    // ),
+-++++-                    // const PopupMenuItem<int>(
+-++++-                    //   value: 2,
+-++++-                    //   child: Text("Delete"),
+-++++-                    // ),
+-++++-                    // const PopupMenuItem<int>(
+-++++-                    //   value: 3,
+-++++-                    //   child: Text("Copy"),
+-++++-                    // ),
+-++++-                    // const PopupMenuItem<int>(
+-++++-                    //   value: 4,
+-++++-                    //   child: Text("Move"),
+-++++-                    // ),
+-++++-                    // const PopupMenuItem<int>(
+-++++-                    //   value: 5,
+-++++-                    //   child: Text("Favorite"),
+-++++-                    // ),
+-++++-                    // const PopupMenuItem<int>(
+-++++-                    //   value: 6,
+-++++-                    //   child: Text("Sort"),
+-++++-                    // ),
+-++++                   ];
+-++++                 }),
+-++++               ),
+-++++@@ -98,51 +61,25 @@ class _HomePageState extends State<HomePage> {
+-++++           ],
+-++++         ),
+-++++       ),
+-++++-      body: Scaffold(
+-++++-        key: scaffoldKey,
+-++++-        drawer: Drawer(
+-++++-          child: ListView(
+-++++-            children: [
+-++++-              DrawerHeader(
+-++++-                padding: const EdgeInsets.all(0),
+-++++-                margin: const EdgeInsets.only(bottom: 0),
+-++++-                child: Image.asset(
+-++++-                  "assets/images/bg_profile.jpg",
+-++++-                  fit: BoxFit.fill,
+-++++-                ),
+-++++-              ),
+-++++-              ListTile(
+-++++-                title: const Text("Item => 1"),
+-++++-                onTap: () {
+-++++-                  print("tap1");
+-++++-                },
+-++++-              ),
+-++++-              ListTile(
+-++++-                title: const Text("Item => 2"),
+-++++-                onTap: () {
+-++++-                  print("tap2");
+-++++-                },
+-++++-              ),
+-++++-            ],
+-++++-          ),
+-++++-        ),
+-++++-        body: BlocProvider(
+-++++-          create: (context) => folderTreeBloc,
+-++++-          child: BlocBuilder<FolderTreeBloc, FolderTreeState>(
+-++++-            builder: (context, state) {
+-++++-              if (state is FolderTreeLoading) {
+-++++-                return const Center(
+-++++-                  child: CircularProgressIndicator(),
+-++++-                );
+-++++-              }
+-++++-              if (state is FolderTreeLoaded) {
+-++++-                return FolderScreen(
+-++++-                  folders: state.items,
+-++++-                );
+-++++-              }
+-++++-              return Container();
+-++++-            },
+-++++-          ),
+-+++++      // body: FolderScreen(
+-+++++      //   folders: folders,
+-+++++      // ),
+-+++++      body: BlocProvider(
+-+++++        create: (context) => folderTreeBloc,
+-+++++        child: BlocBuilder<FolderTreeBloc, FolderTreeState>(
+-+++++          builder: (context, state) {
+-+++++            if (state is FolderTreeLoading) {
+-+++++              return const Center(
+-+++++                child: CircularProgressIndicator(),
+-+++++              );
+-+++++            }
+-+++++            if (state is FolderTreeLoaded) {
+-+++++              return FolderScreen(
+-+++++                folders: state.items,
+-+++++              );
+-+++++            }
+-+++++            return Container();
+-+++++          },
+-++++         ),
+-++++       ),
+-++++     );
+-++++@@ -154,14 +91,6 @@ class _HomePageState extends State<HomePage> {
+-++++       value: 0,
+-++++       child: Container(
+-++++         padding: const EdgeInsets.symmetric(vertical: 6),
+-++++-        decoration: const BoxDecoration(
+-++++-          color: Colors.red,
+-++++-          border: Border(
+-++++-            bottom: BorderSide(
+-++++-              color: Colors.white,
+-++++-            ),
+-++++-          ),
+-++++-        ),
+-++++         child: Row(
+-++++           children: [
+-++++             const SizedBox(
+-++++@@ -184,56 +113,3 @@ class _HomePageState extends State<HomePage> {
+-++++     );
+-++++   }
+-++++ }
+-++++-
+-++++-class TooltipShape extends ShapeBorder {
+-++++-  const TooltipShape();
+-++++-
+-++++-  final BorderSide _side = BorderSide.none;
+-++++-  final BorderRadiusGeometry _borderRadius = BorderRadius.zero;
+-++++-
+-++++-  @override
+-++++-  EdgeInsetsGeometry get dimensions => EdgeInsets.all(_side.width);
+-++++-
+-++++-  @override
+-++++-  Path getInnerPath(
+-++++-    Rect rect, {
+-++++-    TextDirection? textDirection,
+-++++-  }) {
+-++++-    final Path path = Path();
+-++++-
+-++++-    path.addRRect(
+-++++-      _borderRadius.resolve(textDirection).toRRect(rect).deflate(_side.width),
+-++++-    );
+-++++-
+-++++-    return path;
+-++++-  }
+-++++-
+-++++-  @override
+-++++-  Path getOuterPath(Rect rect, {TextDirection? textDirection}) {
+-++++-    final Path path = Path();
+-++++-    final RRect rrect = _borderRadius.resolve(textDirection).toRRect(rect);
+-++++-
+-++++-    path.moveTo(0, 10);
+-++++-    path.quadraticBezierTo(0, 0, 10, 0);
+-++++-    path.lineTo(rrect.width - 30, 0);
+-++++-    path.lineTo(rrect.width - 20, -10);
+-++++-    path.lineTo(rrect.width - 10, 0);
+-++++-    path.quadraticBezierTo(rrect.width, 0, rrect.width, 10);
+-++++-    path.lineTo(rrect.width, rrect.height - 10);
+-++++-    path.quadraticBezierTo(
+-++++-        rrect.width, rrect.height, rrect.width - 10, rrect.height);
+-++++-    path.lineTo(10, rrect.height);
+-++++-    path.quadraticBezierTo(0, rrect.height, 0, rrect.height - 10);
+-++++-
+-++++-    return path;
+-++++-  }
+-++++-
+-++++-  @override
+-++++-  void paint(Canvas canvas, Rect rect, {TextDirection? textDirection}) {}
+-++++-
+-++++-  @override
+-++++-  ShapeBorder scale(double t) => RoundedRectangleBorder(
+-++++-        side: _side.scale(t),
+-++++-        borderRadius: _borderRadius * t,
+-++++-      );
+-++++-}
+-++++diff --git a/lib/presentation/pages/login_page/login_screen.dart b/lib/presentation/pages/login_page/login_screen.dart
+-++++index 0cc2722..be78863 100644
+-++++--- a/lib/presentation/pages/login_page/login_screen.dart
+-+++++++ b/lib/presentation/pages/login_page/login_screen.dart
+-++++@@ -33,27 +33,30 @@ class _LoginScreenState extends State<LoginScreen> {
+-++++   Widget build(BuildContext context) {
+-++++     Future pushDialog() {
+-++++       return showDialog(
+-++++-          context: context,
+-++++-          barrierColor: Colors.transparent,
+-++++-          builder: (context) {
+-++++-            return Padding(
+-++++-              padding: const EdgeInsets.only(bottom: 32),
+-++++-              child: Center(
+-++++-                child: CircularProgressIndicator(
+-++++-                  color: Colors.green.shade900,
+-++++-                ),
+-+++++        context: context,
+-+++++        barrierColor: Colors.transparent,
+-+++++        builder: (context) {
+-+++++          return Padding(
+-+++++            padding: const EdgeInsets.only(bottom: 32),
+-+++++            child: Center(
+-+++++              child: CircularProgressIndicator(
+-+++++                color: Colors.green.shade900,
+-++++               ),
+-++++-            );
+-++++-          });
+-+++++            ),
+-+++++          );
+-+++++        },
+-+++++      );
+-++++     }
+-++++ 
+-++++     return BlocListener<LoginBloc, LoginState>(
+-++++       listener: (context, state) {
+-++++         if (state is LoginSuccessLoaded) {
+-++++-          Navigator.pushReplacement(context,
+-+++++          Navigator.pop(context); //pop dialog
+-+++++          Navigator.push(context,
+-++++               MaterialPageRoute(builder: (context) => const HomePage()));
+-++++         }
+-++++         if (state is LoginFailLoaded) {
+-+++++          Navigator.pop(context); //pop dialog
+-++++           ScaffoldMessenger.of(context)
+-++++               .showSnackBar(SnackBar(content: Text(state.error)));
+-++++         }
+-++++diff --git a/lib/presentation/screens/folder_screen.dart b/lib/presentation/screens/folder_screen.dart
+-++++index 7a0a7a3..b5ffa57 100644
+-++++--- a/lib/presentation/screens/folder_screen.dart
+-+++++++ b/lib/presentation/screens/folder_screen.dart
+-++++@@ -9,7 +9,7 @@ class FolderScreen extends StatefulWidget {
+-++++     super.key,
+-++++     required this.folders,
+-++++   });
+-++++-  final List<Item> folders;
+-+++++  final List<Folder> folders;
+-++++   @override
+-++++   State<FolderScreen> createState() => _FolderScreenState();
+-++++ }
+-++++@@ -19,7 +19,7 @@ class _FolderScreenState extends State<FolderScreen> {
+-++++   Widget build(BuildContext context) {
+-++++     return WillPopScope(
+-++++       onWillPop: () async {
+-++++-        BlocProvider.of<FolderTreeBloc>(context).add(const BackEvent());
+-+++++        // BlocProvider.of<FolderTreeBloc>(context).add(const BackEvent());
+-++++         return false;
+-++++       },
+-++++       child: Column(
+-++++diff --git a/pubspec.lock b/pubspec.lock
+-++++index 8be1513..0ecf786 100644
+-++++--- a/pubspec.lock
+-+++++++ b/pubspec.lock
+-++++@@ -151,13 +151,6 @@ packages:
+-++++       url: "https://pub.dartlang.org"
+-++++     source: hosted
+-++++     version: "6.0.4"
+-++++-  pull_to_refresh:
+-++++-    dependency: "direct main"
+-++++-    description:
+-++++-      name: pull_to_refresh
+-++++-      url: "https://pub.dartlang.org"
+-++++-    source: hosted
+-++++-    version: "2.0.0"
+-++++   sky_engine:
+-++++     dependency: transitive
+-++++     description: flutter
+-++++@@ -221,4 +214,4 @@ packages:
+-++++     version: "2.1.2"
+-++++ sdks:
+-++++   dart: ">=2.18.5 <3.0.0"
+-++++-  flutter: ">=2.0.0"
+-+++++  flutter: ">=1.16.0"
+-++++diff --git a/pubspec.yaml b/pubspec.yaml
+-++++index 65fa7d1..db7d632 100644
+-++++--- a/pubspec.yaml
+-+++++++ b/pubspec.yaml
+-++++@@ -39,7 +39,6 @@ dependencies:
+-++++   dio: ^4.0.6
+-++++   flutter_bloc: ^8.1.1
+-++++   equatable: 
+-++++-  pull_to_refresh: ^2.0.0
+-++++ dev_dependencies:
+-++++   flutter_test:
+-++++     sdk: flutter
+-+++diff --git a/lib/api/api_header.dart b/lib/api/api_header.dart
+-+++new file mode 100644
+-+++index 0000000..1ac93d0
+-+++--- /dev/null
+-++++++ b/lib/api/api_header.dart
+-+++@@ -0,0 +1,29 @@
+-+ ++//header của login
+- +++import 'package:clouddisk_login_form/models/user.dart';
+--++ import 'package:dio/dio.dart';
+--++ 
+--++-const baseUrl =
+--++-    'https://groupware57.hanbiro.net/ngw/sign/auth?is_checking_otp=1';
+--++-const defaultHeader = {
+--+++const baseUrl = "https://groupware57.hanbiro.net";
+--+++const loginUrl = "$baseUrl/ngw/sign/auth?is_checking_otp=1";
+--+++const getFolderUrl = "$baseUrl/cloud/api/get.php?access=1&type=dir";
+--+++//header của login
+--+++final loginHeader = {
+--++   "Content-Type": "application/x-www-form-urlencoded",
+--++   'APP_TYPE': 'clouddisk',
+--++   'App-Type': 'clouddisk',
+--++@@ -15,20 +19,53 @@ const defaultHeader = {
+--++   'device_id': '1e10f743-196e-4bc0-aee7-8c14690f2ac4',
+--++   'X-REQUESTED-WITH': 'XMLHttpRequest',
+--++   "User_Agent": "Android 1.66 APP_HANBIRO_2.0.0.2",
+--+++  "Cookie":
+--+++      ";HANBIRO_GW=010254fedc4eaa12683367c2601053f919d8fd28b35cfd8c2f42173ed918e48eb9ab17480894076ec3ad7e268176e6b3;hmail_key=33b0cd76a231a3a0a6e247d814c23f9a;cook=kie",
+-++++
+-+ ++final loginHeader = {
+-+-+   "Content-Type": "application/x-www-form-urlencoded",
+-+-+   'APP_TYPE': 'clouddisk',
+-+-+   'App-Type': 'clouddisk',
+-+-+@@ -15,20 +19,53 @@ const defaultHeader = {
+-+-+   'device_id': '1e10f743-196e-4bc0-aee7-8c14690f2ac4',
+-+-+   'X-REQUESTED-WITH': 'XMLHttpRequest',
+-+-+   "User_Agent": "Android 1.66 APP_HANBIRO_2.0.0.2",
+-++++  "Content-Type": "application/x-www-form-urlencoded",
+-++++  'APP_TYPE': 'clouddisk',
+-++++  'App-Type': 'clouddisk',
+-++++  'app-type': 'clouddisk',
+-++++  'DEVICE_TYPE': 'android',
+-++++  'device-type': 'android',
+-++++  'Device-Type': 'android',
+-++++  'DEVICE': 'phone',
+-++++  'device': 'phone',
+-++++  'device_id': '1e10f743-196e-4bc0-aee7-8c14690f2ac4',
+-++++  'X-REQUESTED-WITH': 'XMLHttpRequest',
+-++++  "User_Agent": "Android 1.66 APP_HANBIRO_2.0.0.2",
+-+ ++  "Cookie":
+-+ ++      ";HANBIRO_GW=010254fedc4eaa12683367c2601053f919d8fd28b35cfd8c2f42173ed918e48eb9ab17480894076ec3ad7e268176e6b3;hmail_key=33b0cd76a231a3a0a6e247d814c23f9a;cook=kie",
+-+ ++};
+-+@@ -40,10 +1044,17 @@ index 0000000..ce906bf
+-+ ++//header của getFolder
+-+ ++final folderHeader = {
+-+ ++  "Cookie": cookie.join(";"),
+-+-+ };
+-+-+ 
+-+-+ class AuthApi {
+-+-+   final Dio _dio = Dio();
+- +++};
+--+++List<String> cookie = [
+--+++  ";HANBIRO_GW=${user.session}",
+--+++  "hmail_key=${user.hmailKey}",
+--+++  "cook=kie",
+--+++];
+-+++diff --git a/lib/api/api_service.dart b/lib/api/api_service.dart
+-+++new file mode 100644
+-+++index 0000000..911edce
+-+++--- /dev/null
+-++++++ b/lib/api/api_service.dart
+-+++@@ -0,0 +1,28 @@
+-++++import 'package:dio/dio.dart';
+- +++
+--+++//header của getFolder
+--+++final folderHeader = {
+--+++  "Cookie": cookie.join(";"),
+--++ };
+--++ 
+--++ class AuthApi {
+--++   final Dio _dio = Dio();
+--+++  Future<String> get(url, Map<String, dynamic>? header) async {
+--+++    var response = await _dio.get(
+-++++class AuthApi {
+-++++  final Dio _dio = Dio();
+-+ ++  Future<String> get(url, Map<String, dynamic>? header) async {
+-+ ++    var response = await _dio.get(
+-+ ++      url,
+-+@@ -54,956 +1065,721 @@ index 0000000..ce906bf
+-+ ++    var responseData = response.data;
+-+ ++    return responseData;
+-+ ++  }
+-+-+ 
+-+-+-  Future<Map> post(url, Map req) async {
+-++++
+-+ ++  Future<Map> post(url, Map req, Map<String, dynamic>? header) async {
+-+-+     var response = await _dio.post(
+-+-+       url,
+-+-+       data: req,
+-+-+       options: Options(
+-+-+-        headers: defaultHeader,
+-++++    var response = await _dio.post(
+- +++      url,
+-++++      data: req,
+- +++      options: Options(
+--+++        headers: header,
+-+ ++        headers: header,
+-+-+       ),
+-+-+     );
+-+-+     var responseData = response.data;
+- +++      ),
+- +++    );
+- +++    var responseData = response.data;
+-+ ++
+-+-+     return responseData;
+-+-+   }
+-+-+ }
+- +++    return responseData;
+- +++  }
+--++ 
+--++-  Future<Map> post(url, Map req) async {
+--+++  Future<Map> post(url, Map req, Map<String, dynamic>? header) async {
+--++     var response = await _dio.post(
+--++       url,
+--++       data: req,
+--++       options: Options(
+--++-        headers: defaultHeader,
+--+++        headers: header,
+--++       ),
+--++     );
+--++     var responseData = response.data;
+--+++
+--++     return responseData;
+--++   }
+--++ }
+--+++
+--+++Future getFolderlv2() async {
+--+++  AuthApi api = AuthApi();
+--+++
+--+++  String url =
+--+++      "https://groupware57.hanbiro.net/cloud/api/get.php?cache=false&id=my&type=file";
+--+++  var resp = await api.get(url, folderHeader);
+--+++  // ignore: unnecessary_type_check
+--+++  print(resp);
+- +++}
+--++diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+--++index 1919d98..2e25020 100644
+--++--- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+--+++++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+--++@@ -1,5 +1,8 @@
+--++ // ignore: depend_on_referenced_packages
+--+++import 'dart:convert';
+--+++
+--++ import 'package:bloc/bloc.dart';
+--+++import 'package:clouddisk_login_form/api/auth.dart';
+--++ import 'package:equatable/equatable.dart';
+--++ 
+--++ import 'package:clouddisk_login_form/models/item.dart';
+--++@@ -8,47 +11,52 @@ part 'folder_tree_event.dart';
+--++ part 'folder_tree_state.dart';
+--++ 
+--++ class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
+--++-  List<int> ids = []; // Tạo một list gồm những id
+--+++  // List<int> ids = []; // Tạo một list gồm những id
+--+++  AuthApi api = AuthApi();
+--+++
+--++   FolderTreeBloc() : super(FolderTreeInitial()) {
+--++     on<FolderTreeEvent>((event, emit) async {
+--++       if (event is LoadEvent) {
+--++         emit(FolderTreeLoading());
+--++-        final id = event.id;
+--++-        for (Folder folder in folders) {
+--++-          if (folder.id == id) {
+--++-            ids.add(id); // Lưu những id đã đi qua vào ids
+--++-            await Future.delayed(const Duration(seconds: 1), () {
+--++-              //Tạo cảm giác load data
+--++-              emit(FolderTreeLoaded(folder.children));
+--++-            });
+--++-            // emit(FolderTreeLoaded(folder.children));
+--++-            break;
+--++-          }
+--++-        }
+--++-      }
+--++-      if (event is BackEvent) {
+--++-        emit(FolderTreeLoading());
+--++-        //ids.last tức là id của folder đang hiển thị
+--++-        if (ids.last != 0) {
+--++-          //nếu folder đang hiển thị không phải folder gốc thì sẽ xóa nó đi
+--++-          ids.removeLast();
+--++-        } else {
+--++-          // nếu đang ở folder gốc thì clear toàn bộ ids và gán phần tử đầu tiên là folder gốc
+--++-          ids.clear();
+--++-          ids.add(0);
+--++-        }
+--++-        final preId = ids[ids.length - 1];
+--++-        //preId lưu trữ id của folder trước folder hiện tại, nếu id đang = 0 thì ids chỉ có mỗi một phần tử là 0, vì đã clear ở trên
+--++-        for (Folder folder in folders) {
+--++-          if (folder.id == preId) {
+--++-            await Future.delayed(const Duration(seconds: 1), () {
+--++-              //Tạo cảm giác load data
+--++-              emit(FolderTreeLoaded(folder.children));
+--++-            });
+--++-            break;
+--++-          }
+--++-        }
+--+++
+--+++        // final id = event.id;
+--+++        // for (Folder folder in folders) {
+--+++        //   if (folder.id == id) {
+--+++        // ids.add(id); // Lưu những id đã đi qua vào ids
+--+++        final resp = await api.get(getFolderUrl, folderHeader);
+--+++        final json = jsonDecode(resp) as List;
+--+++        folders =
+--+++            json.map((folderJson) => Folder.fromJson(folderJson)).toList();
+--+++        emit(FolderTreeLoaded(folders));
+--+++
+--+++        // emit(FolderTreeLoaded(folder.children));
+--+++        //     break;
+--+++        //   }
+--+++        // }
+--++       }
+--+++      // if (event is BackEvent) {
+--+++      //   emit(FolderTreeLoading());
+--+++      //   //ids.last tức là id của folder đang hiển thị
+--+++      //   if (ids.last != 0) {
+--+++      //     //nếu folder đang hiển thị không phải folder gốc thì sẽ xóa nó đi
+--+++      //     ids.removeLast();
+--+++      //   } else {
+--+++      //     // nếu đang ở folder gốc thì clear toàn bộ ids và gán phần tử đầu tiên là folder gốc
+--+++      //     ids.clear();
+--+++      //     ids.add(0);
+--+++      //   }
+--+++      //   final preId = ids[ids.length - 1];
+--+++      //   //preId lưu trữ id của folder trước folder hiện tại, nếu id đang = 0 thì ids chỉ có mỗi một phần tử là 0, vì đã clear ở trên
+--+++      //   for (Folder folder in folders) {
+--+++      //     if (folder.id == preId) {
+--+++      //       await Future.delayed(const Duration(seconds: 1), () {
+--+++      //         //Tạo cảm giác load data
+--+++      //         emit(FolderTreeLoaded(folder.children));
+--+++      //       });
+--+++      //       break;
+--+++      //     }
+--+++      //   }
+--+++      // }
+--++     });
+--++   }
+--++ }
+--++diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
+--++index be623fd..9784692 100644
+--++--- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
+--+++++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
+--++@@ -8,16 +8,16 @@ abstract class FolderTreeEvent extends Equatable {
+--++ }
+--++ 
+--++ class LoadEvent extends FolderTreeEvent {
+--++-  final int id;
+--+++  final String id;
+--++   const LoadEvent(this.id);
+--++ 
+--++   @override
+--++   List<Object> get props => [id];
+--++ }
+--++ 
+--++-class BackEvent extends FolderTreeEvent {
+--++-  const BackEvent();
+--+++// class BackEvent extends FolderTreeEvent {
+--+++//   const BackEvent();
+--++ 
+--++-  @override
+--++-  List<Object> get props => [];
+--++-}
+--+++//   @override
+--+++//   List<Object> get props => [];
+--+++// }
+--++diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_state.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_state.dart
+--++index 50bad17..35ef393 100644
+--++--- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_state.dart
+--+++++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_state.dart
+--++@@ -12,8 +12,7 @@ class FolderTreeInitial extends FolderTreeState {}
+--++ class FolderTreeLoading extends FolderTreeState {}
+--++ 
+--++ class FolderTreeLoaded extends FolderTreeState {
+--++-  final List<Item> items;
+--++-
+--+++  final List<Folder> items;
+--++   const FolderTreeLoaded(this.items);
+--++ 
+--++   @override
+--++diff --git a/lib/bloc/login/bloc/login_bloc.dart b/lib/bloc/login/bloc/login_bloc.dart
+--++index ce24ca5..c8c83ae 100644
+--++--- a/lib/bloc/login/bloc/login_bloc.dart
+--+++++ b/lib/bloc/login/bloc/login_bloc.dart
+--++@@ -1,5 +1,6 @@
+--++ // ignore: depend_on_referenced_packages
+--++ import 'package:bloc/bloc.dart';
+--+++import 'package:clouddisk_login_form/models/user.dart';
+--++ import 'package:equatable/equatable.dart';
+--++ 
+--++ import 'package:clouddisk_login_form/api/auth.dart';
+--++@@ -14,9 +15,11 @@ class LoginBloc extends Bloc<LoginEvent, LoginState> {
+--++     on<LoginEvent>((event, emit) async {
+--++       if (event is ClickedLoginEvent) {
+--++         emit(LoginLoading());
+--++-        final value = await api.post(baseUrl, event.req.getMap());
+--+++        final value = await api.post(loginUrl, event.req.getMap(), loginHeader);
+--++         var loginRes = LogInResponse(value);
+--++         if (loginRes.success == true) {
+--+++          user.hmailKey = loginRes.hmailkey;
+--+++          user.session = loginRes.session;
+--++           emit(LoginSuccessLoaded(loginRes));
+--++         } else {
+--++           emit(const LoginFailLoaded("Không đăng nhập được"));
+--++diff --git a/lib/components/auth_input.dart b/lib/components/auth_input.dart
+--++index 94239a2..ea94596 100644
+--++--- a/lib/components/auth_input.dart
+--+++++ b/lib/components/auth_input.dart
+--++@@ -57,7 +57,7 @@ class _AuthInputState extends State<AuthInput> {
+--++               decoration: InputDecoration(
+--++                 labelText: widget.label,
+--++                 floatingLabelBehavior: FloatingLabelBehavior.auto,
+--++-                contentPadding: const EdgeInsets.only(top: -8, bottom: 4),
+--+++                contentPadding: const EdgeInsets.only(top: -6, bottom: 4),
+--++                 border: InputBorder.none,
+--++                 suffixIcon: widget.isPassword
+--++                     ? IconButton(
+--++diff --git a/lib/components/item_file.dart b/lib/components/item_file.dart
+--++index ea9ad83..3476abc 100644
+--++--- a/lib/components/item_file.dart
+--+++++ b/lib/components/item_file.dart
+--++@@ -2,7 +2,7 @@ import 'package:clouddisk_login_form/models/item.dart';
+--++ import 'package:flutter/material.dart';
+--++ 
+--++ class ItemFile extends StatelessWidget {
+--++-  final Item item;
+--+++  final Folder item;
+--++   final VoidCallback onPressed;
+--++ 
+--++   const ItemFile({
+--++@@ -18,7 +18,7 @@ class ItemFile extends StatelessWidget {
+--++         onPressed();
+--++       },
+--++       child: Container(
+--++-        padding: const EdgeInsets.only(top: 12, bottom: 12, left: 16),
+--+++        padding: const EdgeInsets.only(top: 16, bottom: 16, left: 16),
+--++         decoration: BoxDecoration(
+--++             border: Border(
+--++           bottom: BorderSide(
+--++@@ -27,27 +27,27 @@ class ItemFile extends StatelessWidget {
+--++         )),
+--++         child: Row(
+--++           children: [
+--++-            Container(
+--++-              padding: const EdgeInsets.all(4),
+--++-              decoration: BoxDecoration(
+--++-                // borderRadius: BorderRadius.circular(12),
+--++-                shape: BoxShape.circle,
+--++-                color: item is Folder ? ((item as Folder).color) : null,
+--++-              ),
+--++-              child: item is Folder
+--++-                  ? Icon(
+--++-                      (item as Folder).icon,
+--++-                      color: Colors.white,
+--++-                      size: 20,
+--++-                    )
+--++-                  : null,
+--++-            ),
+--+++            // Container(
+--+++            //   padding: const EdgeInsets.all(4),
+--+++            //   decoration: BoxDecoration(
+--+++            //     // borderRadius: BorderRadius.circular(12),
+--+++            //     shape: BoxShape.circle,
+--+++            //     // color: item is Folder ? ((item as Folder).color) : null,
+--+++            //   ),
+--+++            //   child: item is Folder
+--+++            //       ? Icon(
+--+++            //           (item as Folder).icon,
+--+++            //           color: Colors.white,
+--+++            //           size: 20,
+--+++            //         )
+--+++            //       : null,
+--+++            // ),
+--++             const SizedBox(
+--++               width: 8,
+--++             ),
+--++             Center(
+--++               child: Text(
+--++-                '${item.title}${item is File ? '.${(item as File).extension}' : ''}',
+--+++                item.text,
+--++                 style: const TextStyle(
+--++                   fontSize: 16,
+--++                   fontWeight: FontWeight.w400,
+--++diff --git a/lib/components/item_leading.dart b/lib/components/item_leading.dart
+-+++diff --git a/lib/api/api_url.dart b/lib/api/api_url.dart
+- ++new file mode 100644
+--++index 0000000..ba70dc1
+-+++index 0000000..4f059ed
+- ++--- /dev/null
+--+++++ b/lib/components/item_leading.dart
+--++@@ -0,0 +1,43 @@
+--+++import 'package:flutter/material.dart';
+--+++
+--+++class ItemLeading extends StatelessWidget {
+--+++  const ItemLeading({
+--+++    Key? key,
+--+++    required this.icon,
+--+++    required this.content,
+--+++    required this.onPressed,
+--+++  }) : super(key: key);
+--+++  final IconData icon;
+--+++  final String content;
+--+++  final VoidCallback onPressed;
+-++++++ b/lib/api/api_url.dart
+-+++@@ -0,0 +1,7 @@
+-++++const baseUrl = "https://groupware57.hanbiro.net";
+-++++const loginUrl = "$baseUrl/ngw/sign/auth?is_checking_otp=1";
+-++++// const getFolderUrl = "$baseUrl/cloud/api/get.php?access=1&type=dir";
+- +++
+--+++  @override
+--+++  Widget build(BuildContext context) {
+--+++    return InkWell(
+--+++      onTap: () {
+--+++        onPressed();
+--+++      },
+--+++      child: Padding(
+--+++        padding: const EdgeInsets.all(16.0),
+--+++        child: Row(
+--+++          children: [
+--+++            Icon(
+--+++              icon,
+--+++              color: Colors.grey.shade700,
+--+++            ),
+--+++            const SizedBox(
+--+++              width: 24,
+--+++            ),
+--+++            Text(
+--+++              content,
+--+++              style: const TextStyle(
+--+++                fontSize: 18,
+--+++                color: Colors.black,
+--+++              ),
+--+++            )
+--+++          ],
+--+++        ),
+--+++      ),
+--+++    );
+--+++  }
+-++++String getFolderUrl(String type, String id) {
+-++++  return "$baseUrl/cloud/api/get.php?type=$type&id=$id";
+- +++}
+--++diff --git a/lib/components/list_items.dart b/lib/components/list_items.dart
+--++index 111fe6a..2df6c65 100644
+--++--- a/lib/components/list_items.dart
+--+++++ b/lib/components/list_items.dart
+--++@@ -3,10 +3,9 @@ import 'package:clouddisk_login_form/components/item_file.dart';
+--++ import 'package:clouddisk_login_form/models/item.dart';
+--++ import 'package:flutter/material.dart';
+--++ import 'package:flutter_bloc/flutter_bloc.dart';
+--++-import 'package:pull_to_refresh/pull_to_refresh.dart';
+--++ 
+--++ class ListItems extends StatefulWidget {
+--++-  final List<Item> items;
+--+++  final List<Folder> items;
+--++   const ListItems({super.key, required this.items});
+--++ 
+--++   @override
+--++@@ -14,64 +13,30 @@ class ListItems extends StatefulWidget {
+--++ }
+--++ 
+--++ class _ListItemsState extends State<ListItems> {
+--++-  RefreshController refreshController =
+--++-      RefreshController(initialRefresh: false);
+-+++diff --git a/lib/api/auth.dart b/lib/api/auth.dart
+-+++deleted file mode 100644
+-+++index fa16976..0000000
+-+++--- a/lib/api/auth.dart
+-++++++ /dev/null
+-+++@@ -1,71 +0,0 @@
+-+++-// ignore: depend_on_referenced_packages
+-+++-import 'package:clouddisk_login_form/models/user.dart';
+-+++-import 'package:dio/dio.dart';
+- ++-
+--++-  void onRefresh() async {
+--++-    // monitor network fetch
+--++-    await Future.delayed(Duration(milliseconds: 1000));
+--++-    refreshController.refreshCompleted();
+--++-  }
+-+++-const baseUrl = "https://groupware57.hanbiro.net";
+-+++-const loginUrl = "$baseUrl/ngw/sign/auth?is_checking_otp=1";
+-+++-const getFolderUrl = "$baseUrl/cloud/api/get.php?access=1&type=dir";
+-+++-//header của login
+-+++-final loginHeader = {
+-+++-  "Content-Type": "application/x-www-form-urlencoded",
+-+++-  'APP_TYPE': 'clouddisk',
+-+++-  'App-Type': 'clouddisk',
+-+++-  'app-type': 'clouddisk',
+-+++-  'DEVICE_TYPE': 'android',
+-+++-  'device-type': 'android',
+-+++-  'Device-Type': 'android',
+-+++-  'DEVICE': 'phone',
+-+++-  'device': 'phone',
+-+++-  'device_id': '1e10f743-196e-4bc0-aee7-8c14690f2ac4',
+-+++-  'X-REQUESTED-WITH': 'XMLHttpRequest',
+-+++-  "User_Agent": "Android 1.66 APP_HANBIRO_2.0.0.2",
+-+++-  "Cookie":
+-+++-      ";HANBIRO_GW=010254fedc4eaa12683367c2601053f919d8fd28b35cfd8c2f42173ed918e48eb9ab17480894076ec3ad7e268176e6b3;hmail_key=33b0cd76a231a3a0a6e247d814c23f9a;cook=kie",
+-+++-};
+-+++-List<String> cookie = [
+-+++-  ";HANBIRO_GW=${user.session}",
+-+++-  "hmail_key=${user.hmailKey}",
+-+++-  "cook=kie",
+-+++-];
+- ++-
+--++   @override
+--++   Widget build(BuildContext context) {
+--++-    return SmartRefresher(
+--++-      controller: refreshController,
+--++-      enablePullDown: true,
+--++-      header: CustomHeader(
+--++-        builder: ((context, mode) {
+--++-          Widget body;
+--++-          if (mode == LoadStatus.idle) {
+--++-            body = const Text("pull down to refresh");
+--++-          } else if (mode == LoadStatus.loading) {
+--++-            body = const Text("loading");
+--++-          } else if (mode == LoadStatus.canLoading) {
+--++-            body = const Text("release to refresh");
+--++-          } else {
+--++-            body = const Text("No more Data");
+--++-          }
+--++-          return SizedBox(
+--++-            height: 35,
+--++-            child: Center(
+--++-              child: body,
+--+++    return (widget.items.isNotEmpty)
+--+++        ? ListView.builder(
+--+++            itemCount: widget.items.length,
+--+++            itemBuilder: (context, index) => ItemFile(
+--+++              item: widget.items[index],
+--+++              onPressed: () {
+--+++                if (widget.items[index] is Folder) {
+--+++                  // BlocProvider.of<FolderTreeBloc>(context).add(
+--+++                  //   LoadEvent(widget.items[index].id),
+--+++                  // );
+--+++                }
+--+++              },
+--++             ),
+--++-          );
+--++-        }),
+-+++-//header của getFolder
+-+++-final folderHeader = {
+-+++-  "Cookie": cookie.join(";"),
+-+++-};
+-+++-
+-+++-class AuthApi {
+-+++-  final Dio _dio = Dio();
+-+++-  Future<String> get(url, Map<String, dynamic>? header) async {
+-+++-    var response = await _dio.get(
+-+++-      url,
+-+++-      options: Options(
+-+++-        headers: header,
+- ++-      ),
+--++-      onRefresh: onRefresh,
+--++-      child: (widget.items.isNotEmpty)
+--++-          ? ListView.builder(
+--++-              itemCount: widget.items.length,
+--++-              itemBuilder: (context, index) => ItemFile(
+--++-                item: widget.items[index],
+--++-                onPressed: () {
+--++-                  if (widget.items[index] is Folder) {
+--++-                    BlocProvider.of<FolderTreeBloc>(context).add(
+--++-                      LoadEvent(widget.items[index].id),
+--++-                    );
+--++-                  }
+--++-                },
+--++-              ),
+--++-            )
+--++-          : const Center(
+--++-              child: Text(
+--++-                "No Data",
+--++-                style: TextStyle(
+--++-                  fontSize: 18,
+--++-                  color: Colors.black54,
+--++-                ),
+--+++          )
+--+++        : const Center(
+--+++            child: Text(
+--+++              "No Data",
+--+++              style: TextStyle(
+--+++                fontSize: 18,
+--+++                color: Colors.black54,
+--++               ),
+--++             ),
+- ++-    );
+--+++          );
+--++   }
+--++ }
+--++diff --git a/lib/main.dart b/lib/main.dart
+--++index 4b3d10f..e311817 100644
+--++--- a/lib/main.dart
+--+++++ b/lib/main.dart
+--++@@ -1,12 +1,9 @@
+--++ import 'package:clouddisk_login_form/bloc/login/bloc/login_bloc.dart';
+--++-import 'package:clouddisk_login_form/models/item.dart';
+--++-import 'package:clouddisk_login_form/presentation/pages/home_page/home_page.dart';
+--++ import 'package:clouddisk_login_form/presentation/pages/login_page/login_screen.dart';
+--++ import 'package:flutter/material.dart';
+--++ import 'package:flutter_bloc/flutter_bloc.dart';
+--++ 
+--++ void main() {
+--++-  fakeData();
+--++   runApp(const MyApp());
+--++ }
+--++ 
+--++diff --git a/lib/models/item.dart b/lib/models/item.dart
+--++index ab39e47..3e288be 100644
+--++--- a/lib/models/item.dart
+--+++++ b/lib/models/item.dart
+--++@@ -1,87 +1,21 @@
+--++-import 'package:flutter/material.dart';
+--++-
+--++-class Item {
+--++-  int id;
+--++-  String title;
+--++-  Item(this.id, this.title);
+--++-}
+-+++-    var responseData = response.data;
+-+++-    return responseData;
+-+++-  }
+- ++-
+--++-class File extends Item {
+--++-  String extension;
+--++-  String image;
+--++-  File(int id, String title, this.image, this.extension) : super(id, title);
+--++-}
+-+++-  Future<Map> post(url, Map req, Map<String, dynamic>? header) async {
+-+++-    var response = await _dio.post(
+-+++-      url,
+-+++-      data: req,
+-+++-      options: Options(
+-+++-        headers: header,
+-+++-      ),
+-+++-    );
+-+++-    var responseData = response.data;
+- ++-
+--++-class Folder extends Item {
+--++-  IconData? icon;
+--++-  Color? color;
+--++-  List<Item> children;
+--+++class Folder {
+--+++  final String id;
+--+++  final String text;
+--++   Folder(
+--++-    int id,
+--++-    String title,
+--++-    this.icon,
+--++-    this.color,
+--++-    this.children,
+--++-  ) : super(id, title);
+--++-  void addChildren(List<Item> items) {
+--++-    for (Item item in items) {
+--++-      children.add(item);
+--++-    }
+-+++-    return responseData;
+- ++-  }
+--+++    this.id,
+--+++    this.text,
+--+++  );
+--++ 
+--++-  void updateIconandColor(List<Item> items) {
+--++-    for (Item item in items) {
+--++-      if (item is Folder) {
+--++-        item.icon = icon;
+--++-        item.color = color;
+--++-      }
+--++-    }
+--+++  factory Folder.fromJson(Map<String, dynamic> json) {
+--+++    return Folder(
+--+++      json['id'] as String,
+--+++      json['text'] as String,
+--+++    );
+--++   }
+- ++-}
+- ++-
+--++-List<File> files = [
+--++-  File(0, 'a', 'assets/images/file-image.png', "jpg"),
+--++-  File(1, 'smile', 'assets/images/file-image.png', "gif"),
+--++-  File(2, 'z', 'assets/images/file-image.png', "txt"),
+--++-  File(3, 'Beauty', 'assets/images/image.jpg', "jpg"),
+--++-  File(4, 'MusicFile', 'assets/images/file-image.png', "mp3"),
+--++-];
+--++ 
+--++-List<Folder> folders = [
+--++-  Folder(0, 'Home', null, null, []),
+--++-  Folder(1, 'My', Icons.folder, Colors.blueAccent.shade400, []),
+--++-  Folder(2, 'CloudFolder', Icons.cloud_sync, Colors.green.shade900, []),
+--++-  Folder(3, 'Company', Icons.snippet_folder, Colors.orange.shade400, []),
+--++-  Folder(4, 'Shared', Icons.share, Colors.purple.shade800, []),
+--++-  Folder(5, 'Notification Folder', Icons.campaign_outlined, Colors.brown, []),
+--++-  Folder(6, 'Guest Folder', Icons.source, Colors.teal.shade700, []),
+--++-  Folder(7, 'Trash', Icons.delete_outline, Colors.red.shade900, []),
+--++-  Folder(8, 'QA', null, null, []),
+--++-  Folder(9, 'Tester', null, null, []),
+--++-  Folder(10, 'Secure', null, null, []),
+--++-];
+-+++-Future getFolderlv2() async {
+-+++-  AuthApi api = AuthApi();
+- ++-
+--++-void fakeData() {
+--++-  folders[0].addChildren([
+--++-    folders[1],
+--++-    folders[2],
+--++-    folders[3],
+--++-    folders[4],
+--++-    folders[5],
+--++-    folders[6],
+--++-    folders[7],
+--++-  ]);
+--++-  folders[1].addChildren([
+--++-    folders[8],
+--++-    files[0],
+--++-    folders[9],
+--++-  ]);
+--++-  folders[2].addChildren([
+--++-    files[1],
+--++-  ]);
+--++-  folders[3].addChildren([
+--++-    folders[10],
+--++-  ]);
+--++-  folders[1].updateIconandColor(folders[1].children);
+--++-  folders[3].updateIconandColor(folders[3].children);
+--+++  @override
+--+++  String toString() => 'Folder(id: $id, text: $text)';
+--++ }
+-+++-  String url =
+-+++-      "https://groupware57.hanbiro.net/cloud/api/get.php?cache=false&id=my&type=file";
+-+++-  var resp = await api.get(url, folderHeader);
+-+++-  // ignore: unnecessary_type_check
+-+++-  print(resp);
+-+++-}
+-+++diff --git a/lib/api/request/login_req.dart b/lib/api/request/login_req.dart
+-+++new file mode 100644
+-+++index 0000000..178c313
+-+++--- /dev/null
+-++++++ b/lib/api/request/login_req.dart
+-+++@@ -0,0 +1,26 @@
+-++++class LogInRequest {
+-++++  final String gwid;
+-++++  final String gwpass;
+-++++  final String model;
+-++++  final String code;
+-++++  final String deviceid;
+-++++  LogInRequest(this.gwid, this.gwpass, this.model, this.code, this.deviceid);
+-+ ++
+-+-++Future getFolderlv2() async {
+-+-++  AuthApi api = AuthApi();
+-++++  Map getMap() {
+-++++    return {
+-++++      'gw_id': gwid,
+-++++      'gw_pass': gwpass,
+-++++      'model': model,
+-++++      'code': code,
+-++++      'device_id': deviceid
+-++++    };
+-++++  }
+-++++}
+- +++
+--+++List<Folder> folders = [];
+--+++List<Folder> subFolders = [];
+--++diff --git a/lib/models/login.dart b/lib/models/login.dart
+--++index 74b988f..9bcd0a5 100644
+--++--- a/lib/models/login.dart
+--+++++ b/lib/models/login.dart
+--++@@ -21,22 +21,32 @@ class LogInRequest {
+--++ }
+--++ 
+--++ final LogInRequest logInRequest = LogInRequest(
+--++-    "cmGw7OXyYe4:APA91bGYAL29_GyI7wx3IcFiVYsxZbt8FtJJezhs1Ot_F0F1vEHljzkmV28p9owvsI3ABM3yvqwpkEdqCXJWTGwXb9XQwFtDYqaS-9Inc",
+--++-    "oRfAa0Ex1ZVsHLimNx5XpV1eeiNs+g2OhPIDYHI8IpWFhHNQ2Nm0C1KuISROSJj9NZ6rpnL6ZsYduCKvD38he8bfK7lQHB/3EcDEZWRUgCyv4z61OAf2pMXhQfbOWvCMfsdJ0JBun7iC1mQ7aSLzT/JJYDUybwJbPx72GOjQ1j4=",
+--++-    "wtsaWk7utF6GtHIFZKwXYarexC/Qp4fY/5xAjq7+gC/afF1d1/Gt7FEgU1UcnHxLtNHOn2dgC8Z7qdTMonGaZ+aRTGWh70sfxy0QLL7Ij/RyjqqIwqGuxNXrSOkwcp3EiN1S/6z7maMTl5XZ6c/Bww3w/G1mcsmnPCZ6gaJzMMk=",
+--++-    "samsung SM-N970F",
+--++-    "212970",
+--++-    "2eaba74b-e0b5-49cb-b9ab-f9630845d43b");
+--+++  "cmGw7OXyYe4:APA91bGYAL29_GyI7wx3IcFiVYsxZbt8FtJJezhs1Ot_F0F1vEHljzkmV28p9owvsI3ABM3yvqwpkEdqCXJWTGwXb9XQwFtDYqaS-9Inc",
+--+++  "oRfAa0Ex1ZVsHLimNx5XpV1eeiNs+g2OhPIDYHI8IpWFhHNQ2Nm0C1KuISROSJj9NZ6rpnL6ZsYduCKvD38he8bfK7lQHB/3EcDEZWRUgCyv4z61OAf2pMXhQfbOWvCMfsdJ0JBun7iC1mQ7aSLzT/JJYDUybwJbPx72GOjQ1j4=",
+--+++  "wtsaWk7utF6GtHIFZKwXYarexC/Qp4fY/5xAjq7+gC/afF1d1/Gt7FEgU1UcnHxLtNHOn2dgC8Z7qdTMonGaZ+aRTGWh70sfxy0QLL7Ij/RyjqqIwqGuxNXrSOkwcp3EiN1S/6z7maMTl5XZ6c/Bww3w/G1mcsmnPCZ6gaJzMMk=",
+-++++final LogInRequest logInRequest = LogInRequest(
+-++++  "jai1nXEjw8N7Akxof9UYIfp6hW5YFmlO2cGKkLlFr3zxC+mr8q6ZRXWhUysoSQkYqJXD7eFpg9ypOeREIDrHdbgyA6eIUvo6yhPN4K2FuWIkL+xQQGTCvZmXisxeJXkfmJO1i6VJ47aBZMooPoWEdMJag3/RqqXqY+iiECx8RLk=",
+-++++  "Kp6mUKz3HFav6GaceGbXz0Yb+5cg68SavnTP/avUEv2O2SmJ04mG1/9LcZKT8G19XQ9zGzOwYl7gd/ID408lDfx/MLSvYhPuZV+X9C4Da16Dk1q16MEG22GjjutWKqSYAkXBz1ftQhGuWtEUMOHu0XklnrDQYWEAqA8nOsK+gv4=",
+- +++  "samsung SM-N970F",
+- +++  "212970",
+- +++  "2eaba74b-e0b5-49cb-b9ab-f9630845d43b",
+- +++);
+--++ 
+--++ class LogInResponse {
+--++   late bool success;
+--++   late final String? msg;
+-+++diff --git a/lib/api/response/login_res.dart b/lib/api/response/login_res.dart
+-+++new file mode 100644
+-+++index 0000000..45355da
+-+++--- /dev/null
+-++++++ b/lib/api/response/login_res.dart
+-+++@@ -0,0 +1,21 @@
+-++++class LogInResponse {
+-++++  late bool success;
+-++++  late final String? msg;
+- +++  late String session;
+- +++  late String hmailkey;
+--++   LogInResponse(Map map) {
+--++-    success = map['success'];
+--++-    msg = map['msg'];
+-++++  LogInResponse(Map map) {
+- +++    success = map["success"];
+- +++    msg = map["msg"];
+- +++    session = map["session"];
+- +++    hmailkey = map["hmail_key"];
+--++   }
+--++ 
+--++   Map getMap() {
+--++-    return {"success": success};
+-++++  }
+-+ ++
+-+-++  String url =
+-+-++      "https://groupware57.hanbiro.net/cloud/api/get.php?cache=false&id=my&type=file";
+-+-++  var resp = await api.get(url, folderHeader);
+-+-++  // ignore: unnecessary_type_check
+-+-++  print(resp);
+-++++  Map getMap() {
+- +++    return {
+- +++      "success": success,
+- +++      "msg": msg,
+- +++      "session": session,
+- +++      "hmail_key": hmailkey,
+- +++    };
+--++   }
+--++ }
+--++diff --git a/lib/models/user.dart b/lib/models/user.dart
+--++new file mode 100644
+--++index 0000000..3d2ffba
+--++--- /dev/null
+--+++++ b/lib/models/user.dart
+--++@@ -0,0 +1,7 @@
+--+++class User {
+--+++  String session;
+--+++  String hmailKey;
+--+++  User(this.session, this.hmailKey);
+-++++  }
+-+ ++}
+-+ +diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+-+-+index 1919d98..2e25020 100644
+-+++index 2e25020..176559b 100644
+-+ +--- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+-+ ++++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+-+-+@@ -1,5 +1,8 @@
+-+++@@ -1,8 +1,12 @@
+-+ + // ignore: depend_on_referenced_packages
+-+-++import 'dart:convert';
+-+-++
+-+++ import 'dart:convert';
+-++++import 'dart:ffi';
+-+++ 
+-++++// ignore: depend_on_referenced_packages
+-+ + import 'package:bloc/bloc.dart';
+-+-++import 'package:clouddisk_login_form/api/auth.dart';
+-+++-import 'package:clouddisk_login_form/api/auth.dart';
+-++++import 'package:clouddisk_login_form/api/api_header.dart';
+-++++import 'package:clouddisk_login_form/api/api_url.dart';
+-++++import 'package:clouddisk_login_form/api/api_service.dart';
+-+ + import 'package:equatable/equatable.dart';
+-+ + 
+-+ + import 'package:clouddisk_login_form/models/item.dart';
+-+-+@@ -8,47 +11,52 @@ part 'folder_tree_event.dart';
+-+++@@ -10,53 +14,52 @@ import 'package:clouddisk_login_form/models/item.dart';
+-+++ part 'folder_tree_event.dart';
+-+ + part 'folder_tree_state.dart';
+-+ + 
+-+-+ class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
+-+-+-  List<int> ids = []; // Tạo một list gồm những id
+-+-++  // List<int> ids = []; // Tạo một list gồm những id
+-+-++  AuthApi api = AuthApi();
+-++++List<String> ids = [""];
+-+ ++
+-+++ class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
+-+++-  // List<int> ids = []; // Tạo một list gồm những id
+-+++   AuthApi api = AuthApi();
+-+++-
+-+ +   FolderTreeBloc() : super(FolderTreeInitial()) {
+-+ +     on<FolderTreeEvent>((event, emit) async {
+-+ +       if (event is LoadEvent) {
+-++++        for (Folder f in folders) {
+-++++          if (f.id == event.id && !f.text.contains(".")) {
+-++++            ids.add(f.text);
+-++++          }
+-++++        }
+-+ +         emit(FolderTreeLoading());
+-+-+-        final id = event.id;
+-+-+-        for (Folder folder in folders) {
+-+-+-          if (folder.id == id) {
+-+-+-            ids.add(id); // Lưu những id đã đi qua vào ids
+-+-+-            await Future.delayed(const Duration(seconds: 1), () {
+-+-+-              //Tạo cảm giác load data
+-+-+-              emit(FolderTreeLoaded(folder.children));
+-+-+-            });
+-+-+-            // emit(FolderTreeLoaded(folder.children));
+-+-+-            break;
+-+-+-          }
+-+-+-        }
+-+-+-      }
+-+-+-      if (event is BackEvent) {
+-+-+-        emit(FolderTreeLoading());
+-+-+-        //ids.last tức là id của folder đang hiển thị
+-+-+-        if (ids.last != 0) {
+-+-+-          //nếu folder đang hiển thị không phải folder gốc thì sẽ xóa nó đi
+-+-+-          ids.removeLast();
+-+-+-        } else {
+-+-+-          // nếu đang ở folder gốc thì clear toàn bộ ids và gán phần tử đầu tiên là folder gốc
+-+-+-          ids.clear();
+-+-+-          ids.add(0);
+-+-+-        }
+-+-+-        final preId = ids[ids.length - 1];
+-+-+-        //preId lưu trữ id của folder trước folder hiện tại, nếu id đang = 0 thì ids chỉ có mỗi một phần tử là 0, vì đã clear ở trên
+-+-+-        for (Folder folder in folders) {
+-+-+-          if (folder.id == preId) {
+-+-+-            await Future.delayed(const Duration(seconds: 1), () {
+-+-+-              //Tạo cảm giác load data
+-+-+-              emit(FolderTreeLoaded(folder.children));
+-+-+-            });
+-+-+-            break;
+-+-+-          }
+-+-+-        }
+-+-++
+-+-++        // final id = event.id;
+-+-++        // for (Folder folder in folders) {
+-+-++        //   if (folder.id == id) {
+-+-++        // ids.add(id); // Lưu những id đã đi qua vào ids
+-+-++        final resp = await api.get(getFolderUrl, folderHeader);
+-+-++        final json = jsonDecode(resp) as List;
+-+-++        folders =
+-+-++            json.map((folderJson) => Folder.fromJson(folderJson)).toList();
+-+++-
+-++++        final resp =
+-++++            await api.get(getFolderUrl("file", event.id), folderHeader);
+-++++        final json = jsonDecode(resp);
+-++++        final List folderList = json["files"];
+-++++        folders = folderList
+-++++            .map((folderJson) => Folder.fromJson(folderJson))
+-++++            .toList();
+-+++         // final id = event.id;
+-+++-        // for (Folder folder in folders) {
+-+++-        //   if (folder.id == id) {
+-+++-        // ids.add(id); // Lưu những id đã đi qua vào ids
+-+++-        final resp = await api.get(getFolderUrl, folderHeader);
+-+++-        final json = jsonDecode(resp) as List;
+-+++-        folders =
+-+++-            json.map((folderJson) => Folder.fromJson(folderJson)).toList();
+-+++-        emit(FolderTreeLoaded(folders));
+-++++        // print(event.id);
+-+++ 
+-+++-        // emit(FolderTreeLoaded(folder.children));
+-++++        // ids.add(id);
+-++++        print(ids);
+-+ ++        emit(FolderTreeLoaded(folders));
+-+-++
+-+-++        // emit(FolderTreeLoaded(folder.children));
+-+-++        //     break;
+-+-++        //   }
+-+-++        // }
+-++++      }
+-++++      if (event is BackEvent) {
+-++++        //ids.last tức là id của folder đang hiển thị
+-++++        if (ids.last != "") {
+-++++          //nếu folder đang hiển thị không phải folder gốc thì sẽ xóa nó đi
+-++++          ids.removeLast();
+-++++        } else {
+-++++          // nếu đang ở folder gốc thì clear toàn bộ ids và gán phần tử đầu tiên là folder gốc
+-++++          ids.clear();
+-++++          ids.add("");
+-++++        }
+-++++        // final preId = ids[ids.length - 1];
+-++++        // //preId lưu trữ id của folder trước folder hiện tại, nếu id đang = 0 thì ids chỉ có mỗi một phần tử là 0, vì đã clear ở trên
+-++++        // for (Folder folder in folders) {
+-++++        //   if (folder.id == preId) {
+-++++        //     emit(FolderRootLoaded(folder.children));
+-+++         //     break;
+-+++         //   }
+-+++         // }
+-+ +       }
+-+-++      // if (event is BackEvent) {
+-+-++      //   emit(FolderTreeLoading());
+-+-++      //   //ids.last tức là id của folder đang hiển thị
+-+-++      //   if (ids.last != 0) {
+-+-++      //     //nếu folder đang hiển thị không phải folder gốc thì sẽ xóa nó đi
+-+-++      //     ids.removeLast();
+-+-++      //   } else {
+-+-++      //     // nếu đang ở folder gốc thì clear toàn bộ ids và gán phần tử đầu tiên là folder gốc
+-+-++      //     ids.clear();
+-+-++      //     ids.add(0);
+-+-++      //   }
+-+-++      //   final preId = ids[ids.length - 1];
+-+-++      //   //preId lưu trữ id của folder trước folder hiện tại, nếu id đang = 0 thì ids chỉ có mỗi một phần tử là 0, vì đã clear ở trên
+-+-++      //   for (Folder folder in folders) {
+-+-++      //     if (folder.id == preId) {
+-+-++      //       await Future.delayed(const Duration(seconds: 1), () {
+-+-++      //         //Tạo cảm giác load data
+-+-++      //         emit(FolderTreeLoaded(folder.children));
+-+-++      //       });
+-+-++      //       break;
+-+-++      //     }
+-+-++      //   }
+-+-++      // }
+-+++-      // if (event is BackEvent) {
+-+++-      //   emit(FolderTreeLoading());
+-+++-      //   //ids.last tức là id của folder đang hiển thị
+-+++-      //   if (ids.last != 0) {
+-+++-      //     //nếu folder đang hiển thị không phải folder gốc thì sẽ xóa nó đi
+-+++-      //     ids.removeLast();
+-+++-      //   } else {
+-+++-      //     // nếu đang ở folder gốc thì clear toàn bộ ids và gán phần tử đầu tiên là folder gốc
+-+++-      //     ids.clear();
+-+++-      //     ids.add(0);
+-+++-      //   }
+-+++-      //   final preId = ids[ids.length - 1];
+-+++-      //   //preId lưu trữ id của folder trước folder hiện tại, nếu id đang = 0 thì ids chỉ có mỗi một phần tử là 0, vì đã clear ở trên
+-+++-      //   for (Folder folder in folders) {
+-+++-      //     if (folder.id == preId) {
+-+++-      //       await Future.delayed(const Duration(seconds: 1), () {
+-+++-      //         //Tạo cảm giác load data
+-+++-      //         emit(FolderTreeLoaded(folder.children));
+-+++-      //       });
+-+++-      //       break;
+-+++-      //     }
+-+++-      //   }
+-+++-      // }
+-+ +     });
+-+ +   }
+-+ + }
+-+ +diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
+-+-+index be623fd..9784692 100644
+-+++index 9784692..7541c81 100644
+-+ +--- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
+-+ ++++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
+-+-+@@ -8,16 +8,16 @@ abstract class FolderTreeEvent extends Equatable {
+-+-+ }
+-+-+ 
+-+-+ class LoadEvent extends FolderTreeEvent {
+-+-+-  final int id;
+-+-++  final String id;
+-+-+   const LoadEvent(this.id);
+-+-+ 
+-+-+   @override
+-+++@@ -15,9 +15,6 @@ class LoadEvent extends FolderTreeEvent {
+-+ +   List<Object> get props => [id];
+-+ + }
+-+ + 
+-+-+-class BackEvent extends FolderTreeEvent {
+-+-+-  const BackEvent();
+-+-++// class BackEvent extends FolderTreeEvent {
+-+-++//   const BackEvent();
+-+-+ 
+-+-+-  @override
+-+-+-  List<Object> get props => [];
+-+-+-}
+-+-++//   @override
+-+-++//   List<Object> get props => [];
+-+-++// }
+-+-+diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_state.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_state.dart
+-+-+index 50bad17..35ef393 100644
+-+-+--- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_state.dart
+-+-++++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_state.dart
+-+-+@@ -12,8 +12,7 @@ class FolderTreeInitial extends FolderTreeState {}
+-+-+ class FolderTreeLoading extends FolderTreeState {}
+-+-+ 
+-+-+ class FolderTreeLoaded extends FolderTreeState {
+-+-+-  final List<Item> items;
+-+++-// class BackEvent extends FolderTreeEvent {
+-+++-//   const BackEvent();
+-+ +-
+-+-++  final List<Folder> items;
+-+-+   const FolderTreeLoaded(this.items);
+-+-+ 
+-+-+   @override
+-+++-//   @override
+-+++-//   List<Object> get props => [];
+-+++-// }
+-++++class BackEvent extends FolderTreeEvent {
+-++++  const BackEvent();
+- +++}
+--+++
+--+++User user = User("", "");
+--++diff --git a/lib/presentation/pages/home_page/home_page.dart b/lib/presentation/pages/home_page/home_page.dart
+--++index b7d302d..7031ef0 100644
+--++--- a/lib/presentation/pages/home_page/home_page.dart
+--+++++ b/lib/presentation/pages/home_page/home_page.dart
+--++@@ -1,4 +1,6 @@
+--+++import 'package:clouddisk_login_form/api/auth.dart';
+--++ import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+--+++import 'package:clouddisk_login_form/models/item.dart';
+--++ import 'package:clouddisk_login_form/presentation/screens/folder_screen.dart';
+--++ import 'package:flutter/material.dart';
+--++ import 'package:flutter_bloc/flutter_bloc.dart';
+--++@@ -15,12 +17,14 @@ class _HomePageState extends State<HomePage> {
+--++   final FolderTreeBloc folderTreeBloc = FolderTreeBloc();
+--++   @override
+--++   void initState() {
+--++-    folderTreeBloc.add(const LoadEvent(0));
+--+++    folderTreeBloc.add(const LoadEvent(""));
+--++     super.initState();
+--++   }
+-+ +diff --git a/lib/bloc/login/bloc/login_bloc.dart b/lib/bloc/login/bloc/login_bloc.dart
+-+-+index ce24ca5..c8c83ae 100644
+-+++index c8c83ae..6ccec52 100644
+-+ +--- a/lib/bloc/login/bloc/login_bloc.dart
+-+ ++++ b/lib/bloc/login/bloc/login_bloc.dart
+-+-+@@ -1,5 +1,6 @@
+-+++@@ -1,10 +1,13 @@
+-+ + // ignore: depend_on_referenced_packages
+-+ + import 'package:bloc/bloc.dart';
+-+-++import 'package:clouddisk_login_form/models/user.dart';
+-++++import 'package:clouddisk_login_form/api/api_header.dart';
+-++++import 'package:clouddisk_login_form/api/api_url.dart';
+-++++import 'package:clouddisk_login_form/api/request/login_req.dart';
+-++++import 'package:clouddisk_login_form/api/response/login_res.dart';
+-+++ import 'package:clouddisk_login_form/models/user.dart';
+-+ + import 'package:equatable/equatable.dart';
+-+ + 
+-+-+ import 'package:clouddisk_login_form/api/auth.dart';
+-+-+@@ -14,9 +15,11 @@ class LoginBloc extends Bloc<LoginEvent, LoginState> {
+-+-+     on<LoginEvent>((event, emit) async {
+-+-+       if (event is ClickedLoginEvent) {
+-+-+         emit(LoginLoading());
+-+-+-        final value = await api.post(baseUrl, event.req.getMap());
+-+-++        final value = await api.post(loginUrl, event.req.getMap(), loginHeader);
+-+-+         var loginRes = LogInResponse(value);
+-+-+         if (loginRes.success == true) {
+-+-++          user.hmailKey = loginRes.hmailkey;
+-+-++          user.session = loginRes.session;
+-+-+           emit(LoginSuccessLoaded(loginRes));
+-+-+         } else {
+-+-+           emit(const LoginFailLoaded("Không đăng nhập được"));
+-+-+diff --git a/lib/components/auth_input.dart b/lib/components/auth_input.dart
+-+-+index 94239a2..ea94596 100644
+-+-+--- a/lib/components/auth_input.dart
+-+-++++ b/lib/components/auth_input.dart
+-+-+@@ -57,7 +57,7 @@ class _AuthInputState extends State<AuthInput> {
+-+-+               decoration: InputDecoration(
+-+-+                 labelText: widget.label,
+-+-+                 floatingLabelBehavior: FloatingLabelBehavior.auto,
+-+-+-                contentPadding: const EdgeInsets.only(top: -8, bottom: 4),
+-+-++                contentPadding: const EdgeInsets.only(top: -6, bottom: 4),
+-+-+                 border: InputBorder.none,
+-+-+                 suffixIcon: widget.isPassword
+-+-+                     ? IconButton(
+-+++-import 'package:clouddisk_login_form/api/auth.dart';
+-+++-import 'package:clouddisk_login_form/models/login.dart';
+-++++import 'package:clouddisk_login_form/api/api_service.dart';
+- ++ 
+-+++ part 'login_event.dart';
+-+++ part 'login_state.dart';
+-+ +diff --git a/lib/components/item_file.dart b/lib/components/item_file.dart
+-+-+index ea9ad83..3476abc 100644
+-+++index 3476abc..abbaf45 100644
+-+ +--- a/lib/components/item_file.dart
+-+ ++++ b/lib/components/item_file.dart
+-+-+@@ -2,7 +2,7 @@ import 'package:clouddisk_login_form/models/item.dart';
+-+-+ import 'package:flutter/material.dart';
+-+-+ 
+-+-+ class ItemFile extends StatelessWidget {
+-+-+-  final Item item;
+-+-++  final Folder item;
+-+-+   final VoidCallback onPressed;
+-+-+ 
+-+-+   const ItemFile({
+-+-+@@ -18,7 +18,7 @@ class ItemFile extends StatelessWidget {
+-+-+         onPressed();
+-+-+       },
+-+-+       child: Container(
+-+-+-        padding: const EdgeInsets.only(top: 12, bottom: 12, left: 16),
+-+-++        padding: const EdgeInsets.only(top: 16, bottom: 16, left: 16),
+-+-+         decoration: BoxDecoration(
+-+-+             border: Border(
+-+-+           bottom: BorderSide(
+-+-+@@ -27,27 +27,27 @@ class ItemFile extends StatelessWidget {
+-+-+         )),
+-+-+         child: Row(
+-+-+           children: [
+-+-+-            Container(
+-+-+-              padding: const EdgeInsets.all(4),
+-+-+-              decoration: BoxDecoration(
+-+-+-                // borderRadius: BorderRadius.circular(12),
+-+-+-                shape: BoxShape.circle,
+-+-+-                color: item is Folder ? ((item as Folder).color) : null,
+-+-+-              ),
+-+-+-              child: item is Folder
+-+-+-                  ? Icon(
+-+-+-                      (item as Folder).icon,
+-+-+-                      color: Colors.white,
+-+-+-                      size: 20,
+-+-+-                    )
+-+-+-                  : null,
+-+-+-            ),
+-+-++            // Container(
+-+-++            //   padding: const EdgeInsets.all(4),
+-+-++            //   decoration: BoxDecoration(
+-+-++            //     // borderRadius: BorderRadius.circular(12),
+-+-++            //     shape: BoxShape.circle,
+-+-++            //     // color: item is Folder ? ((item as Folder).color) : null,
+-+-++            //   ),
+-+-++            //   child: item is Folder
+-+-++            //       ? Icon(
+-+-++            //           (item as Folder).icon,
+-+-++            //           color: Colors.white,
+-+-++            //           size: 20,
+-+-++            //         )
+-+-++            //       : null,
+-+-++            // ),
+-+++@@ -45,9 +45,10 @@ class ItemFile extends StatelessWidget {
+-+ +             const SizedBox(
+-+ +               width: 8,
+-+ +             ),
+-+-+             Center(
+-+++-            Center(
+-++++            Flexible(
+-+ +               child: Text(
+-+-+-                '${item.title}${item is File ? '.${(item as File).extension}' : ''}',
+-+-++                item.text,
+-+++                 item.text,
+-++++                overflow: TextOverflow.ellipsis,
+-+ +                 style: const TextStyle(
+-+ +                   fontSize: 16,
+-+ +                   fontWeight: FontWeight.w400,
+-+-+diff --git a/lib/components/item_leading.dart b/lib/components/item_leading.dart
+-+-+new file mode 100644
+-+-+index 0000000..ba70dc1
+-+-+--- /dev/null
+-+-++++ b/lib/components/item_leading.dart
+-+-+@@ -0,0 +1,43 @@
+-+-++import 'package:flutter/material.dart';
+-+-++
+-+-++class ItemLeading extends StatelessWidget {
+-+-++  const ItemLeading({
+-+-++    Key? key,
+-+-++    required this.icon,
+-+-++    required this.content,
+-+-++    required this.onPressed,
+-+-++  }) : super(key: key);
+-+-++  final IconData icon;
+-+-++  final String content;
+-+-++  final VoidCallback onPressed;
+-+-++
+-+-++  @override
+-+-++  Widget build(BuildContext context) {
+-+-++    return InkWell(
+-+-++      onTap: () {
+-+-++        onPressed();
+-+-++      },
+-+-++      child: Padding(
+-+-++        padding: const EdgeInsets.all(16.0),
+-+-++        child: Row(
+-+-++          children: [
+-+-++            Icon(
+-+-++              icon,
+-+-++              color: Colors.grey.shade700,
+-+-++            ),
+-+-++            const SizedBox(
+-+-++              width: 24,
+-+-++            ),
+-+-++            Text(
+-+-++              content,
+-+-++              style: const TextStyle(
+-+-++                fontSize: 18,
+-+-++                color: Colors.black,
+-+-++              ),
+-+-++            )
+-+-++          ],
+-+-++        ),
+-+-++      ),
+-+-++    );
+-+-++  }
+-+-++}
+-+ +diff --git a/lib/components/list_items.dart b/lib/components/list_items.dart
+-+-+index 111fe6a..2df6c65 100644
+-+++index 2df6c65..454ffb3 100644
+-+ +--- a/lib/components/list_items.dart
+-+ ++++ b/lib/components/list_items.dart
+-+-+@@ -3,10 +3,9 @@ import 'package:clouddisk_login_form/components/item_file.dart';
+-+++@@ -1,8 +1,6 @@
+-+++-import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+-+++ import 'package:clouddisk_login_form/components/item_file.dart';
+-+ + import 'package:clouddisk_login_form/models/item.dart';
+-+ + import 'package:flutter/material.dart';
+-+-+ import 'package:flutter_bloc/flutter_bloc.dart';
+-+-+-import 'package:pull_to_refresh/pull_to_refresh.dart';
+-+++-import 'package:flutter_bloc/flutter_bloc.dart';
+-+ + 
+-+ + class ListItems extends StatefulWidget {
+-+-+-  final List<Item> items;
+-+-++  final List<Folder> items;
+-+-+   const ListItems({super.key, required this.items});
+-+-+ 
+-+-+   @override
+-+-+@@ -14,64 +13,30 @@ class ListItems extends StatefulWidget {
+-+-+ }
+-+-+ 
+-+-+ class _ListItemsState extends State<ListItems> {
+-+-+-  RefreshController refreshController =
+-+-+-      RefreshController(initialRefresh: false);
+-+-+-
+-+-+-  void onRefresh() async {
+-+-+-    // monitor network fetch
+-+-+-    await Future.delayed(Duration(milliseconds: 1000));
+-+-+-    refreshController.refreshCompleted();
+-+-+-  }
+-+-+-
+-+-+   @override
+-+-+   Widget build(BuildContext context) {
+-+-+-    return SmartRefresher(
+-+-+-      controller: refreshController,
+-+-+-      enablePullDown: true,
+-+-+-      header: CustomHeader(
+-+-+-        builder: ((context, mode) {
+-+-+-          Widget body;
+-+-+-          if (mode == LoadStatus.idle) {
+-+-+-            body = const Text("pull down to refresh");
+-+-+-          } else if (mode == LoadStatus.loading) {
+-+-+-            body = const Text("loading");
+-+-+-          } else if (mode == LoadStatus.canLoading) {
+-+-+-            body = const Text("release to refresh");
+-+-+-          } else {
+-+-+-            body = const Text("No more Data");
+-+-+-          }
+-+-+-          return SizedBox(
+-+-+-            height: 35,
+-+-+-            child: Center(
+-+-+-              child: body,
+-+-++    return (widget.items.isNotEmpty)
+-+-++        ? ListView.builder(
+-+-++            itemCount: widget.items.length,
+-+-++            itemBuilder: (context, index) => ItemFile(
+-+-++              item: widget.items[index],
+-+-++              onPressed: () {
+-+-++                if (widget.items[index] is Folder) {
+-+-++                  // BlocProvider.of<FolderTreeBloc>(context).add(
+-+-++                  //   LoadEvent(widget.items[index].id),
+-+-++                  // );
+-+-++                }
+-+-++              },
+-+-+             ),
+-+-+-          );
+-+-+-        }),
+-+-+-      ),
+-+-+-      onRefresh: onRefresh,
+-+-+-      child: (widget.items.isNotEmpty)
+-+-+-          ? ListView.builder(
+-+-+-              itemCount: widget.items.length,
+-+-+-              itemBuilder: (context, index) => ItemFile(
+-+-+-                item: widget.items[index],
+-+-+-                onPressed: () {
+-+-+-                  if (widget.items[index] is Folder) {
+-+-+-                    BlocProvider.of<FolderTreeBloc>(context).add(
+-+-+-                      LoadEvent(widget.items[index].id),
+-+-+-                    );
+-+-+-                  }
+-+-+-                },
+-+-+-              ),
+-+-+-            )
+-+-+-          : const Center(
+-+-+-              child: Text(
+-+-+-                "No Data",
+-+-+-                style: TextStyle(
+-+-+-                  fontSize: 18,
+-+-+-                  color: Colors.black54,
+-+-+-                ),
+-+-++          )
+-+-++        : const Center(
+-+-++            child: Text(
+-+-++              "No Data",
+-+-++              style: TextStyle(
+-+-++                fontSize: 18,
+-+-++                color: Colors.black54,
+-+-+               ),
+-+++   final List<Folder> items;
+-+++@@ -21,11 +19,8 @@ class _ListItemsState extends State<ListItems> {
+-+++             itemBuilder: (context, index) => ItemFile(
+-+++               item: widget.items[index],
+-+++               onPressed: () {
+-+++-                if (widget.items[index] is Folder) {
+-+++-                  // BlocProvider.of<FolderTreeBloc>(context).add(
+-+++-                  //   LoadEvent(widget.items[index].id),
+-+++-                  // );
+-+++-                }
+-++++                Navigator.of(context).pushNamed("/folderScreen",
+-++++                    arguments: widget.items[index].id.toString());
+-+++               },
+-+ +             ),
+-+-+-    );
+-+-++          );
+-+-+   }
+-+-+ }
+-+++           )
+-+ +diff --git a/lib/main.dart b/lib/main.dart
+-+-+index 4b3d10f..e311817 100644
+-+++index e311817..dee75d3 100644
+-+ +--- a/lib/main.dart
+-+ ++++ b/lib/main.dart
+-+-+@@ -1,12 +1,9 @@
+-+++@@ -1,3 +1,4 @@
+-++++import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+-+ + import 'package:clouddisk_login_form/bloc/login/bloc/login_bloc.dart';
+-+-+-import 'package:clouddisk_login_form/models/item.dart';
+-+-+-import 'package:clouddisk_login_form/presentation/pages/home_page/home_page.dart';
+-+ + import 'package:clouddisk_login_form/presentation/pages/login_page/login_screen.dart';
+-+ + import 'package:flutter/material.dart';
+-+-+ import 'package:flutter_bloc/flutter_bloc.dart';
+-+-+ 
+-+-+ void main() {
+-+-+-  fakeData();
+-+-+   runApp(const MyApp());
+-+-+ }
+-+-+ 
+-+-+diff --git a/lib/models/item.dart b/lib/models/item.dart
+-+-+index ab39e47..3e288be 100644
+-+-+--- a/lib/models/item.dart
+-+-++++ b/lib/models/item.dart
+-+-+@@ -1,87 +1,21 @@
+-+-+-import 'package:flutter/material.dart';
+-+++@@ -36,8 +37,15 @@ class _MyHomePageState extends State<MyHomePage> {
+- ++   @override
+- ++   Widget build(BuildContext context) {
+--+++    getFolderlv2();
+--+++
+--++     void onSelected(BuildContext context, int value) {
+--++       switch (value) {
+--++         case 0:
+--++@@ -30,67 +34,26 @@ class _HomePageState extends State<HomePage> {
+--++       }
+--++     }
+--++ 
+--++-    //add drawer under appBar by using Scaffold below Scaffold
+- ++     return Scaffold(
+--++       appBar: PreferredSize(
+--++         preferredSize: const Size.fromHeight(50),
+--++         child: AppBar(
+--++           title: const Text("Home"),
+--++-          leading: IconButton(
+--++-            onPressed: () {
+--++-              if (scaffoldKey.currentState!.isDrawerOpen) {
+--++-                Navigator.pop((context));
+--++-              } else {
+--++-                scaffoldKey.currentState!.openDrawer();
+--++-              }
+--++-            },
+--++-            icon: const Icon(Icons.menu),
+--++-          ),
+--++           actions: [
+--++             Theme(
+--++               data: Theme.of(context).copyWith(
+--++                   iconTheme: const IconThemeData(color: Colors.white),
+--++                   textTheme: const TextTheme().apply(bodyColor: Colors.white)),
+--++               child: PopupMenuButton<int>(
+--++-                offset: const Offset(0, 60),
+--++-                shape: const TooltipShape(),
+--+++                offset: const Offset(0, 50),
+--++                 color: Colors.indigo.shade900,
+--++                 onSelected: (value) {
+--++                   onSelected(context, value);
+--++                 },
+--++                 itemBuilder: ((context) {
+--++                   return [
+--++-                    popupMenuItem("Download"),
+--++                     popupMenuItem("New Folder"),
+--++-                    popupMenuItem("Delete"),
+--++-                    popupMenuItem("Copy"),
+--++-                    popupMenuItem("Move"),
+--++-                    popupMenuItem("Favorite"),
+--++                     popupMenuItem("Sort"),
+--++-                    // const PopupMenuItem<int>(
+--++-                    //   value: 1,
+--++-                    //   child: Text("New Folder"),
+--++-                    // ),
+--++-                    // const PopupMenuItem<int>(
+--++-                    //   value: 2,
+--++-                    //   child: Text("Delete"),
+--++-                    // ),
+--++-                    // const PopupMenuItem<int>(
+--++-                    //   value: 3,
+--++-                    //   child: Text("Copy"),
+--++-                    // ),
+--++-                    // const PopupMenuItem<int>(
+--++-                    //   value: 4,
+--++-                    //   child: Text("Move"),
+--++-                    // ),
+--++-                    // const PopupMenuItem<int>(
+--++-                    //   value: 5,
+--++-                    //   child: Text("Favorite"),
+--++-                    // ),
+--++-                    // const PopupMenuItem<int>(
+--++-                    //   value: 6,
+--++-                    //   child: Text("Sort"),
+--++-                    // ),
+--++                   ];
+--++                 }),
+--++               ),
+--++@@ -98,51 +61,25 @@ class _HomePageState extends State<HomePage> {
+--++           ],
+--++         ),
+--++       ),
+--++-      body: Scaffold(
+--++-        key: scaffoldKey,
+--++-        drawer: Drawer(
+--++-          child: ListView(
+--++-            children: [
+--++-              DrawerHeader(
+--++-                padding: const EdgeInsets.all(0),
+--++-                margin: const EdgeInsets.only(bottom: 0),
+--++-                child: Image.asset(
+--++-                  "assets/images/bg_profile.jpg",
+--++-                  fit: BoxFit.fill,
+--++-                ),
+--++-              ),
+--++-              ListTile(
+--++-                title: const Text("Item => 1"),
+--++-                onTap: () {
+--++-                  print("tap1");
+--++-                },
+--++-              ),
+--++-              ListTile(
+--++-                title: const Text("Item => 2"),
+--++-                onTap: () {
+--++-                  print("tap2");
+--++-                },
+--++-              ),
+--++-            ],
+--++-          ),
+--++-        ),
+--++-        body: BlocProvider(
+--++-          create: (context) => folderTreeBloc,
+--++-          child: BlocBuilder<FolderTreeBloc, FolderTreeState>(
+--++-            builder: (context, state) {
+--++-              if (state is FolderTreeLoading) {
+--++-                return const Center(
+--++-                  child: CircularProgressIndicator(),
+--++-                );
+--++-              }
+--++-              if (state is FolderTreeLoaded) {
+--++-                return FolderScreen(
+--++-                  folders: state.items,
+--++-                );
+--++-              }
+--++-              return Container();
+--++-            },
+--++-          ),
+--+++      // body: FolderScreen(
+--+++      //   folders: folders,
+--+++      // ),
+--+++      body: BlocProvider(
+--+++        create: (context) => folderTreeBloc,
+--+++        child: BlocBuilder<FolderTreeBloc, FolderTreeState>(
+--+++          builder: (context, state) {
+--+++            if (state is FolderTreeLoading) {
+--+++              return const Center(
+--+++                child: CircularProgressIndicator(),
+--+++              );
+--+++            }
+--+++            if (state is FolderTreeLoaded) {
+--+++              return FolderScreen(
+--+++                folders: state.items,
+--+++              );
+--+++            }
+--+++            return Container();
+--+++          },
+--++         ),
+-+++-      body: BlocProvider(
+-+++-        create: (context) => loginBloc,
+-++++      body: MultiBlocProvider(
+-++++        providers: [
+-++++          BlocProvider(
+-++++            create: (context) => loginBloc,
+-++++          ),
+-++++          BlocProvider(
+-++++            create: (context) => FolderTreeBloc(),
+-++++          ),
+-++++        ],
+-+++         child: const LoginScreen(),
+- ++       ),
+- ++     );
+--++@@ -154,14 +91,6 @@ class _HomePageState extends State<HomePage> {
+--++       value: 0,
+--++       child: Container(
+--++         padding: const EdgeInsets.symmetric(vertical: 6),
+--++-        decoration: const BoxDecoration(
+--++-          color: Colors.red,
+--++-          border: Border(
+--++-            bottom: BorderSide(
+--++-              color: Colors.white,
+--++-            ),
+--++-          ),
+--++-        ),
+--++         child: Row(
+--++           children: [
+--++             const SizedBox(
+--++@@ -184,56 +113,3 @@ class _HomePageState extends State<HomePage> {
+--++     );
+--++   }
+--++ }
+--++-
+--++-class TooltipShape extends ShapeBorder {
+--++-  const TooltipShape();
+--++-
+--++-  final BorderSide _side = BorderSide.none;
+--++-  final BorderRadiusGeometry _borderRadius = BorderRadius.zero;
+--++-
+--++-  @override
+--++-  EdgeInsetsGeometry get dimensions => EdgeInsets.all(_side.width);
+--++-
+--++-  @override
+--++-  Path getInnerPath(
+--++-    Rect rect, {
+--++-    TextDirection? textDirection,
+--++-  }) {
+--++-    final Path path = Path();
+--++-
+--++-    path.addRRect(
+--++-      _borderRadius.resolve(textDirection).toRRect(rect).deflate(_side.width),
+--++-    );
+--++-
+--++-    return path;
+-+++diff --git a/lib/models/login.dart b/lib/models/login.dart
+-+++deleted file mode 100644
+-+++index 9bcd0a5..0000000
+-+++--- a/lib/models/login.dart
+-++++++ /dev/null
+-+++@@ -1,52 +0,0 @@
+-+++-class LogInRequest {
+-+++-  final String token;
+-+++-  final String gwid;
+-+++-  final String gwpass;
+-+++-  final String model;
+-+++-  final String code;
+-+++-  final String deviceid;
+-+++-  LogInRequest(
+-+++-      this.token, this.gwid, this.gwpass, this.model, this.code, this.deviceid);
+-+ +-
+-+-+-class Item {
+-+-+-  int id;
+-+-+-  String title;
+-+-+-  Item(this.id, this.title);
+-+++-  Map getMap() {
+-+++-    return {
+-+++-      'token': token,
+-+++-      'gw_id': gwid,
+-+++-      'gw_pass': gwpass,
+-+++-      'model': model,
+-+++-      'code': code,
+-+++-      'device_id': deviceid
+-+++-    };
+- ++-  }
+--++-
+--++-  @override
+--++-  Path getOuterPath(Rect rect, {TextDirection? textDirection}) {
+--++-    final Path path = Path();
+--++-    final RRect rrect = _borderRadius.resolve(textDirection).toRRect(rect);
+--++-
+--++-    path.moveTo(0, 10);
+--++-    path.quadraticBezierTo(0, 0, 10, 0);
+--++-    path.lineTo(rrect.width - 30, 0);
+--++-    path.lineTo(rrect.width - 20, -10);
+--++-    path.lineTo(rrect.width - 10, 0);
+--++-    path.quadraticBezierTo(rrect.width, 0, rrect.width, 10);
+--++-    path.lineTo(rrect.width, rrect.height - 10);
+--++-    path.quadraticBezierTo(
+--++-        rrect.width, rrect.height, rrect.width - 10, rrect.height);
+--++-    path.lineTo(10, rrect.height);
+--++-    path.quadraticBezierTo(0, rrect.height, 0, rrect.height - 10);
+--++-
+--++-    return path;
+-+ +-}
+-+ +-
+-+-+-class File extends Item {
+-+-+-  String extension;
+-+-+-  String image;
+-+-+-  File(int id, String title, this.image, this.extension) : super(id, title);
+-+-+-}
+-+++-final LogInRequest logInRequest = LogInRequest(
+-+++-  "cmGw7OXyYe4:APA91bGYAL29_GyI7wx3IcFiVYsxZbt8FtJJezhs1Ot_F0F1vEHljzkmV28p9owvsI3ABM3yvqwpkEdqCXJWTGwXb9XQwFtDYqaS-9Inc",
+-+++-  "oRfAa0Ex1ZVsHLimNx5XpV1eeiNs+g2OhPIDYHI8IpWFhHNQ2Nm0C1KuISROSJj9NZ6rpnL6ZsYduCKvD38he8bfK7lQHB/3EcDEZWRUgCyv4z61OAf2pMXhQfbOWvCMfsdJ0JBun7iC1mQ7aSLzT/JJYDUybwJbPx72GOjQ1j4=",
+-+++-  "wtsaWk7utF6GtHIFZKwXYarexC/Qp4fY/5xAjq7+gC/afF1d1/Gt7FEgU1UcnHxLtNHOn2dgC8Z7qdTMonGaZ+aRTGWh70sfxy0QLL7Ij/RyjqqIwqGuxNXrSOkwcp3EiN1S/6z7maMTl5XZ6c/Bww3w/G1mcsmnPCZ6gaJzMMk=",
+-+++-  "samsung SM-N970F",
+-+++-  "212970",
+-+++-  "2eaba74b-e0b5-49cb-b9ab-f9630845d43b",
+-+++-);
+-+ +-
+-+-+-class Folder extends Item {
+-+-+-  IconData? icon;
+-+-+-  Color? color;
+-+-+-  List<Item> children;
+-+-++class Folder {
+-+-++  final String id;
+-+-++  final String text;
+-+-+   Folder(
+-+-+-    int id,
+-+-+-    String title,
+-+-+-    this.icon,
+-+-+-    this.color,
+-+-+-    this.children,
+-+-+-  ) : super(id, title);
+-+-+-  void addChildren(List<Item> items) {
+-+-+-    for (Item item in items) {
+-+-+-      children.add(item);
+-+-+-    }
+-+++-class LogInResponse {
+-+++-  late bool success;
+-+++-  late final String? msg;
+-+++-  late String session;
+-+++-  late String hmailkey;
+-+++-  LogInResponse(Map map) {
+-+++-    success = map["success"];
+-+++-    msg = map["msg"];
+-+++-    session = map["session"];
+-+++-    hmailkey = map["hmail_key"];
+-+ +-  }
+-+-++    this.id,
+-+-++    this.text,
+-+-++  );
+-+-+ 
+-+-+-  void updateIconandColor(List<Item> items) {
+-+-+-    for (Item item in items) {
+-+-+-      if (item is Folder) {
+-+-+-        item.icon = icon;
+-+-+-        item.color = color;
+-+-+-      }
+-+-+-    }
+-+-++  factory Folder.fromJson(Map<String, dynamic> json) {
+-+-++    return Folder(
+-+-++      json['id'] as String,
+-+-++      json['text'] as String,
+-+-++    );
+-+-+   }
+-+-+-}
+-+ +-
+-+-+-List<File> files = [
+-+-+-  File(0, 'a', 'assets/images/file-image.png', "jpg"),
+-+-+-  File(1, 'smile', 'assets/images/file-image.png', "gif"),
+-+-+-  File(2, 'z', 'assets/images/file-image.png', "txt"),
+-+-+-  File(3, 'Beauty', 'assets/images/image.jpg', "jpg"),
+-+-+-  File(4, 'MusicFile', 'assets/images/file-image.png', "mp3"),
+-+-+-];
+-+-+ 
+-+-+-List<Folder> folders = [
+-+-+-  Folder(0, 'Home', null, null, []),
+-+-+-  Folder(1, 'My', Icons.folder, Colors.blueAccent.shade400, []),
+-+-+-  Folder(2, 'CloudFolder', Icons.cloud_sync, Colors.green.shade900, []),
+-+-+-  Folder(3, 'Company', Icons.snippet_folder, Colors.orange.shade400, []),
+-+-+-  Folder(4, 'Shared', Icons.share, Colors.purple.shade800, []),
+-+-+-  Folder(5, 'Notification Folder', Icons.campaign_outlined, Colors.brown, []),
+-+-+-  Folder(6, 'Guest Folder', Icons.source, Colors.teal.shade700, []),
+-+-+-  Folder(7, 'Trash', Icons.delete_outline, Colors.red.shade900, []),
+-+-+-  Folder(8, 'QA', null, null, []),
+-+-+-  Folder(9, 'Tester', null, null, []),
+-+-+-  Folder(10, 'Secure', null, null, []),
+-+-+-];
+-+-+-
+-+-+-void fakeData() {
+-+-+-  folders[0].addChildren([
+-+-+-    folders[1],
+-+-+-    folders[2],
+-+-+-    folders[3],
+-+-+-    folders[4],
+-+-+-    folders[5],
+-+-+-    folders[6],
+-+-+-    folders[7],
+-+-+-  ]);
+-+-+-  folders[1].addChildren([
+-+-+-    folders[8],
+-+-+-    files[0],
+-+-+-    folders[9],
+-+-+-  ]);
+-+-+-  folders[2].addChildren([
+-+-+-    files[1],
+-+-+-  ]);
+-+-+-  folders[3].addChildren([
+-+-+-    folders[10],
+-+-+-  ]);
+-+-+-  folders[1].updateIconandColor(folders[1].children);
+-+-+-  folders[3].updateIconandColor(folders[3].children);
+-+-++  @override
+-+-++  String toString() => 'Folder(id: $id, text: $text)';
+-+-+ }
+-+-++
+-+-++List<Folder> folders = [];
+-+-++List<Folder> subFolders = [];
+-+-+diff --git a/lib/models/login.dart b/lib/models/login.dart
+-+-+index 74b988f..9bcd0a5 100644
+-+-+--- a/lib/models/login.dart
+-+-++++ b/lib/models/login.dart
+-+-+@@ -21,22 +21,32 @@ class LogInRequest {
+-+-+ }
+-+-+ 
+-+-+ final LogInRequest logInRequest = LogInRequest(
+-+-+-    "cmGw7OXyYe4:APA91bGYAL29_GyI7wx3IcFiVYsxZbt8FtJJezhs1Ot_F0F1vEHljzkmV28p9owvsI3ABM3yvqwpkEdqCXJWTGwXb9XQwFtDYqaS-9Inc",
+-+-+-    "oRfAa0Ex1ZVsHLimNx5XpV1eeiNs+g2OhPIDYHI8IpWFhHNQ2Nm0C1KuISROSJj9NZ6rpnL6ZsYduCKvD38he8bfK7lQHB/3EcDEZWRUgCyv4z61OAf2pMXhQfbOWvCMfsdJ0JBun7iC1mQ7aSLzT/JJYDUybwJbPx72GOjQ1j4=",
+-+-+-    "wtsaWk7utF6GtHIFZKwXYarexC/Qp4fY/5xAjq7+gC/afF1d1/Gt7FEgU1UcnHxLtNHOn2dgC8Z7qdTMonGaZ+aRTGWh70sfxy0QLL7Ij/RyjqqIwqGuxNXrSOkwcp3EiN1S/6z7maMTl5XZ6c/Bww3w/G1mcsmnPCZ6gaJzMMk=",
+-+-+-    "samsung SM-N970F",
+-+-+-    "212970",
+-+-+-    "2eaba74b-e0b5-49cb-b9ab-f9630845d43b");
+-+-++  "cmGw7OXyYe4:APA91bGYAL29_GyI7wx3IcFiVYsxZbt8FtJJezhs1Ot_F0F1vEHljzkmV28p9owvsI3ABM3yvqwpkEdqCXJWTGwXb9XQwFtDYqaS-9Inc",
+-+-++  "oRfAa0Ex1ZVsHLimNx5XpV1eeiNs+g2OhPIDYHI8IpWFhHNQ2Nm0C1KuISROSJj9NZ6rpnL6ZsYduCKvD38he8bfK7lQHB/3EcDEZWRUgCyv4z61OAf2pMXhQfbOWvCMfsdJ0JBun7iC1mQ7aSLzT/JJYDUybwJbPx72GOjQ1j4=",
+-+-++  "wtsaWk7utF6GtHIFZKwXYarexC/Qp4fY/5xAjq7+gC/afF1d1/Gt7FEgU1UcnHxLtNHOn2dgC8Z7qdTMonGaZ+aRTGWh70sfxy0QLL7Ij/RyjqqIwqGuxNXrSOkwcp3EiN1S/6z7maMTl5XZ6c/Bww3w/G1mcsmnPCZ6gaJzMMk=",
+-+-++  "samsung SM-N970F",
+-+-++  "212970",
+-+-++  "2eaba74b-e0b5-49cb-b9ab-f9630845d43b",
+-+-++);
+-+-+ 
+-+-+ class LogInResponse {
+-+-+   late bool success;
+-+-+   late final String? msg;
+-+-++  late String session;
+-+-++  late String hmailkey;
+-+-+   LogInResponse(Map map) {
+-+-+-    success = map['success'];
+-+-+-    msg = map['msg'];
+-+-++    success = map["success"];
+-+-++    msg = map["msg"];
+-+-++    session = map["session"];
+-+-++    hmailkey = map["hmail_key"];
+-+-+   }
+-+-+ 
+-+-+   Map getMap() {
+-+-+-    return {"success": success};
+-+-++    return {
+-+-++      "success": success,
+-+-++      "msg": msg,
+-+-++      "session": session,
+-+-++      "hmail_key": hmailkey,
+-+-++    };
+-+-+   }
+-+-+ }
+-+-+diff --git a/lib/models/user.dart b/lib/models/user.dart
+-+-+new file mode 100644
+-+-+index 0000000..3d2ffba
+-+-+--- /dev/null
+-+-++++ b/lib/models/user.dart
+-+-+@@ -0,0 +1,7 @@
+-+-++class User {
+-+-++  String session;
+-+-++  String hmailKey;
+-+-++  User(this.session, this.hmailKey);
+-+-++}
+-+-++
+-+-++User user = User("", "");
+-+++-  Map getMap() {
+-+++-    return {
+-+++-      "success": success,
+-+++-      "msg": msg,
+-+++-      "session": session,
+-+++-      "hmail_key": hmailkey,
+-+++-    };
+- ++-  }
+--++-
+-+++-}
+-+ +diff --git a/lib/presentation/pages/home_page/home_page.dart b/lib/presentation/pages/home_page/home_page.dart
+-+-+index b7d302d..7031ef0 100644
+-+++index 7031ef0..2cc079a 100644
+-+ +--- a/lib/presentation/pages/home_page/home_page.dart
+-+ ++++ b/lib/presentation/pages/home_page/home_page.dart
+-+-+@@ -1,4 +1,6 @@
+-+-++import 'package:clouddisk_login_form/api/auth.dart';
+-+-+ import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+-+-++import 'package:clouddisk_login_form/models/item.dart';
+-+++@@ -1,34 +1,23 @@
+-+++-import 'package:clouddisk_login_form/api/auth.dart';
+-+++-import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+-+++-import 'package:clouddisk_login_form/models/item.dart';
+-+ + import 'package:clouddisk_login_form/presentation/screens/folder_screen.dart';
+-+ + import 'package:flutter/material.dart';
+-+-+ import 'package:flutter_bloc/flutter_bloc.dart';
+-+-+@@ -15,12 +17,14 @@ class _HomePageState extends State<HomePage> {
+-+-+   final FolderTreeBloc folderTreeBloc = FolderTreeBloc();
+-+++-import 'package:flutter_bloc/flutter_bloc.dart';
+-+++ 
+-+++ class HomePage extends StatefulWidget {
+-+++-  const HomePage({super.key});
+-++++  const HomePage({
+-++++    super.key,
+-++++  });
+-+++ 
+-+ +   @override
+-+-+   void initState() {
+-+-+-    folderTreeBloc.add(const LoadEvent(0));
+-+-++    folderTreeBloc.add(const LoadEvent(""));
+-+-+     super.initState();
+-+-+   }
+-+++   State<HomePage> createState() => _HomePageState();
+-+++ }
+-+++ 
+-+++ class _HomePageState extends State<HomePage> {
+-+++-  final GlobalKey<ScaffoldState> scaffoldKey = GlobalKey<ScaffoldState>();
+-+++-  final FolderTreeBloc folderTreeBloc = FolderTreeBloc();
+- ++-  @override
+--++-  void paint(Canvas canvas, Rect rect, {TextDirection? textDirection}) {}
+-+++-  void initState() {
+-+++-    folderTreeBloc.add(const LoadEvent(""));
+-+++-    super.initState();
+-+++-  }
+-++++  final navKey = GlobalKey<NavigatorState>();
+-+ + 
+-+ +   @override
+-+ +   Widget build(BuildContext context) {
+-+-++    getFolderlv2();
+-+-++
+-+++-    getFolderlv2();
+- ++-
+--++-  @override
+--++-  ShapeBorder scale(double t) => RoundedRectangleBorder(
+--++-        side: _side.scale(t),
+--++-        borderRadius: _borderRadius * t,
+--++-      );
+--++-}
+--++diff --git a/lib/presentation/pages/login_page/login_screen.dart b/lib/presentation/pages/login_page/login_screen.dart
+--++index 0cc2722..be78863 100644
+--++--- a/lib/presentation/pages/login_page/login_screen.dart
+--+++++ b/lib/presentation/pages/login_page/login_screen.dart
+--++@@ -33,27 +33,30 @@ class _LoginScreenState extends State<LoginScreen> {
+--++   Widget build(BuildContext context) {
+--++     Future pushDialog() {
+--++       return showDialog(
+--++-          context: context,
+--++-          barrierColor: Colors.transparent,
+--++-          builder: (context) {
+--++-            return Padding(
+--++-              padding: const EdgeInsets.only(bottom: 32),
+--++-              child: Center(
+--++-                child: CircularProgressIndicator(
+--++-                  color: Colors.green.shade900,
+--++-                ),
+--+++        context: context,
+--+++        barrierColor: Colors.transparent,
+--+++        builder: (context) {
+--+++          return Padding(
+--+++            padding: const EdgeInsets.only(bottom: 32),
+--+++            child: Center(
+--+++              child: CircularProgressIndicator(
+--+++                color: Colors.green.shade900,
+--++               ),
+--++-            );
+--++-          });
+-+ +     void onSelected(BuildContext context, int value) {
+-+ +       switch (value) {
+-+ +         case 0:
+-+-+@@ -30,67 +34,26 @@ class _HomePageState extends State<HomePage> {
+-+++-          print("Download");
+-+++           break;
+-+++         default:
+-+ +       }
+-+-+     }
+-+-+ 
+-+-+-    //add drawer under appBar by using Scaffold below Scaffold
+-+-+     return Scaffold(
+-+++@@ -38,6 +27,8 @@ class _HomePageState extends State<HomePage> {
+-+ +       appBar: PreferredSize(
+-+ +         preferredSize: const Size.fromHeight(50),
+-+ +         child: AppBar(
+-++++          elevation: 0,
+-++++          automaticallyImplyLeading: false, //turn off leading
+-+ +           title: const Text("Home"),
+-+-+-          leading: IconButton(
+-+-+-            onPressed: () {
+-+-+-              if (scaffoldKey.currentState!.isDrawerOpen) {
+-+-+-                Navigator.pop((context));
+-+-+-              } else {
+-+-+-                scaffoldKey.currentState!.openDrawer();
+-+-+-              }
+-+-+-            },
+-+-+-            icon: const Icon(Icons.menu),
+-+-+-          ),
+-+ +           actions: [
+-+ +             Theme(
+-+-+               data: Theme.of(context).copyWith(
+-+-+                   iconTheme: const IconThemeData(color: Colors.white),
+-+-+                   textTheme: const TextTheme().apply(bodyColor: Colors.white)),
+-+-+               child: PopupMenuButton<int>(
+-+-+-                offset: const Offset(0, 60),
+-+-+-                shape: const TooltipShape(),
+-+-++                offset: const Offset(0, 50),
+-+-+                 color: Colors.indigo.shade900,
+-+-+                 onSelected: (value) {
+-+-+                   onSelected(context, value);
+-+-+                 },
+-+-+                 itemBuilder: ((context) {
+-+-+                   return [
+-+-+-                    popupMenuItem("Download"),
+-+-+                     popupMenuItem("New Folder"),
+-+-+-                    popupMenuItem("Delete"),
+-+-+-                    popupMenuItem("Copy"),
+-+-+-                    popupMenuItem("Move"),
+-+-+-                    popupMenuItem("Favorite"),
+-+-+                     popupMenuItem("Sort"),
+-+-+-                    // const PopupMenuItem<int>(
+-+-+-                    //   value: 1,
+-+-+-                    //   child: Text("New Folder"),
+-+-+-                    // ),
+-+-+-                    // const PopupMenuItem<int>(
+-+-+-                    //   value: 2,
+-+-+-                    //   child: Text("Delete"),
+-+-+-                    // ),
+-+-+-                    // const PopupMenuItem<int>(
+-+-+-                    //   value: 3,
+-+-+-                    //   child: Text("Copy"),
+-+-+-                    // ),
+-+-+-                    // const PopupMenuItem<int>(
+-+-+-                    //   value: 4,
+-+-+-                    //   child: Text("Move"),
+-+-+-                    // ),
+-+-+-                    // const PopupMenuItem<int>(
+-+-+-                    //   value: 5,
+-+-+-                    //   child: Text("Favorite"),
+-+-+-                    // ),
+-+-+-                    // const PopupMenuItem<int>(
+-+-+-                    //   value: 6,
+-+-+-                    //   child: Text("Sort"),
+-+-+-                    // ),
+-+-+                   ];
+-+-+                 }),
+-+-+               ),
+-+-+@@ -98,51 +61,25 @@ class _HomePageState extends State<HomePage> {
+-+++@@ -61,24 +52,38 @@ class _HomePageState extends State<HomePage> {
+-+ +           ],
+-+ +         ),
+-+ +       ),
+-+-+-      body: Scaffold(
+-+-+-        key: scaffoldKey,
+-+-+-        drawer: Drawer(
+-+-+-          child: ListView(
+-+-+-            children: [
+-+-+-              DrawerHeader(
+-+-+-                padding: const EdgeInsets.all(0),
+-+-+-                margin: const EdgeInsets.only(bottom: 0),
+-+-+-                child: Image.asset(
+-+-+-                  "assets/images/bg_profile.jpg",
+-+-+-                  fit: BoxFit.fill,
+-+-+-                ),
+-+-+-              ),
+-+-+-              ListTile(
+-+-+-                title: const Text("Item => 1"),
+-+-+-                onTap: () {
+-+-+-                  print("tap1");
+-+-+-                },
+-+-+-              ),
+-+-+-              ListTile(
+-+-+-                title: const Text("Item => 2"),
+-+-+-                onTap: () {
+-+-+-                  print("tap2");
+-+-+-                },
+-+-+-              ),
+-+-+-            ],
+-+-+-          ),
+-+-+-        ),
+-+-+-        body: BlocProvider(
+-+-+-          create: (context) => folderTreeBloc,
+-+-+-          child: BlocBuilder<FolderTreeBloc, FolderTreeState>(
+-+-+-            builder: (context, state) {
+-+-+-              if (state is FolderTreeLoading) {
+-+-+-                return const Center(
+-+-+-                  child: CircularProgressIndicator(),
+-+-+-                );
+-+-+-              }
+-+-+-              if (state is FolderTreeLoaded) {
+-+-+-                return FolderScreen(
+-+-+-                  folders: state.items,
+-+-+-                );
+-+-+-              }
+-+-+-              return Container();
+-+-+-            },
+-+-+-          ),
+-+-++      // body: FolderScreen(
+-+-++      //   folders: folders,
+-+-++      // ),
+-+-++      body: BlocProvider(
+-+-++        create: (context) => folderTreeBloc,
+-+-++        child: BlocBuilder<FolderTreeBloc, FolderTreeState>(
+-+-++          builder: (context, state) {
+-+-++            if (state is FolderTreeLoading) {
+-+-++              return const Center(
+-+-++                child: CircularProgressIndicator(),
+-+-++              );
+-+-++            }
+-+-++            if (state is FolderTreeLoaded) {
+-+-++              return FolderScreen(
+-+-++                folders: state.items,
+-+-++              );
+-+-++            }
+-+-++            return Container();
+-+-++          },
+-+++-      // body: FolderScreen(
+-+++-      //   folders: folders,
+-+++-      // ),
+-+++-      body: BlocProvider(
+-+++-        create: (context) => folderTreeBloc,
+-+++-        child: BlocBuilder<FolderTreeBloc, FolderTreeState>(
+-+++-          builder: (context, state) {
+-+++-            if (state is FolderTreeLoading) {
+-+++-              return const Center(
+-+++-                child: CircularProgressIndicator(),
+-+++-              );
+-++++      body: WillPopScope(
+-++++        onWillPop: () async {
+-++++          if (navKey.currentState != null) {
+-++++            if (navKey.currentState!.canPop()) {
+-++++              navKey.currentState!.pop();
+-++++              return false;
+-+++             }
+-+++-            if (state is FolderTreeLoaded) {
+-+++-              return FolderScreen(
+-+++-                folders: state.items,
+-+++-              );
+-++++          }
+-++++          return true;
+-++++        },
+-++++        child: Navigator(
+-++++          key: navKey,
+-++++          onGenerateRoute: (settings) {
+-++++            Widget page = const FolderScreen(folderId: "");
+-++++            switch (settings.name) {
+-++++              case "/":
+-++++                return MaterialPageRoute(
+-++++                  settings: settings,
+-++++                  builder: (context) {
+-++++                    return const FolderScreen(folderId: "");
+-++++                  },
+-++++                );
+-++++              case "/folderScreen":
+-++++                var arguments = settings.arguments as String;
+-++++                return MaterialPageRoute(
+-++++                  settings: settings,
+-++++                  builder: (context) {
+-++++                    return FolderScreen(folderId: arguments);
+-++++                  },
+-++++                );
+-+++             }
+-+++-            return Container();
+-++++            return MaterialPageRoute(builder: (_) => page);
+-+++           },
+-+ +         ),
+-+ +       ),
+-+-+     );
+-+-+@@ -154,14 +91,6 @@ class _HomePageState extends State<HomePage> {
+-+-+       value: 0,
+-+-+       child: Container(
+-+-+         padding: const EdgeInsets.symmetric(vertical: 6),
+-+-+-        decoration: const BoxDecoration(
+-+-+-          color: Colors.red,
+-+-+-          border: Border(
+-+-+-            bottom: BorderSide(
+-+-+-              color: Colors.white,
+-+-+-            ),
+-+-+-          ),
+-+-+-        ),
+-+-+         child: Row(
+-+-+           children: [
+-+-+             const SizedBox(
+-+-+@@ -184,56 +113,3 @@ class _HomePageState extends State<HomePage> {
+-+-+     );
+-+-+   }
+-+-+ }
+-+-+-
+-+-+-class TooltipShape extends ShapeBorder {
+-+-+-  const TooltipShape();
+-+-+-
+-+-+-  final BorderSide _side = BorderSide.none;
+-+-+-  final BorderRadiusGeometry _borderRadius = BorderRadius.zero;
+-+-+-
+-+-+-  @override
+-+-+-  EdgeInsetsGeometry get dimensions => EdgeInsets.all(_side.width);
+-+-+-
+-+-+-  @override
+-+-+-  Path getInnerPath(
+-+-+-    Rect rect, {
+-+-+-    TextDirection? textDirection,
+-+-+-  }) {
+-+-+-    final Path path = Path();
+-+-+-
+-+-+-    path.addRRect(
+-+-+-      _borderRadius.resolve(textDirection).toRRect(rect).deflate(_side.width),
+-+-+-    );
+-+-+-
+-+-+-    return path;
+-+-+-  }
+-+-+-
+-+-+-  @override
+-+-+-  Path getOuterPath(Rect rect, {TextDirection? textDirection}) {
+-+-+-    final Path path = Path();
+-+-+-    final RRect rrect = _borderRadius.resolve(textDirection).toRRect(rect);
+-+-+-
+-+-+-    path.moveTo(0, 10);
+-+-+-    path.quadraticBezierTo(0, 0, 10, 0);
+-+-+-    path.lineTo(rrect.width - 30, 0);
+-+-+-    path.lineTo(rrect.width - 20, -10);
+-+-+-    path.lineTo(rrect.width - 10, 0);
+-+-+-    path.quadraticBezierTo(rrect.width, 0, rrect.width, 10);
+-+-+-    path.lineTo(rrect.width, rrect.height - 10);
+-+-+-    path.quadraticBezierTo(
+-+-+-        rrect.width, rrect.height, rrect.width - 10, rrect.height);
+-+-+-    path.lineTo(10, rrect.height);
+-+-+-    path.quadraticBezierTo(0, rrect.height, 0, rrect.height - 10);
+-+-+-
+-+-+-    return path;
+-+-+-  }
+-+-+-
+-+-+-  @override
+-+-+-  void paint(Canvas canvas, Rect rect, {TextDirection? textDirection}) {}
+-+-+-
+-+-+-  @override
+-+-+-  ShapeBorder scale(double t) => RoundedRectangleBorder(
+-+-+-        side: _side.scale(t),
+-+-+-        borderRadius: _borderRadius * t,
+-+-+-      );
+-+-+-}
+-+ +diff --git a/lib/presentation/pages/login_page/login_screen.dart b/lib/presentation/pages/login_page/login_screen.dart
+-+-+index 0cc2722..be78863 100644
+-+++index be78863..e27cca2 100644
+-+ +--- a/lib/presentation/pages/login_page/login_screen.dart
+-+ ++++ b/lib/presentation/pages/login_page/login_screen.dart
+-+-+@@ -33,27 +33,30 @@ class _LoginScreenState extends State<LoginScreen> {
+-+-+   Widget build(BuildContext context) {
+-+-+     Future pushDialog() {
+-+-+       return showDialog(
+-+-+-          context: context,
+-+-+-          barrierColor: Colors.transparent,
+-+-+-          builder: (context) {
+-+-+-            return Padding(
+-+-+-              padding: const EdgeInsets.only(bottom: 32),
+-+-+-              child: Center(
+-+-+-                child: CircularProgressIndicator(
+-+-+-                  color: Colors.green.shade900,
+-+-+-                ),
+-+-++        context: context,
+-+-++        barrierColor: Colors.transparent,
+-+-++        builder: (context) {
+-+-++          return Padding(
+-+-++            padding: const EdgeInsets.only(bottom: 32),
+-+-++            child: Center(
+-+-++              child: CircularProgressIndicator(
+-+-++                color: Colors.green.shade900,
+-+-+               ),
+-+-+-            );
+-+-+-          });
+-+-++            ),
+-+-++          );
+-+-++        },
+-+-++      );
+-+-+     }
+-+-+ 
+-+-+     return BlocListener<LoginBloc, LoginState>(
+-+++@@ -1,8 +1,7 @@
+-+++-import 'package:clouddisk_login_form/api/auth.dart';
+-++++import 'package:clouddisk_login_form/api/request/login_req.dart';
+-+++ import 'package:clouddisk_login_form/bloc/login/bloc/login_bloc.dart';
+-+++ import 'package:clouddisk_login_form/components/auth_button.dart';
+-+++ import 'package:clouddisk_login_form/components/auth_input.dart';
+-+++-import 'package:clouddisk_login_form/models/login.dart';
+-+++ import 'package:clouddisk_login_form/presentation/pages/home_page/home_page.dart';
+-+++ import 'package:flutter/material.dart';
+-+++ import 'package:flutter_bloc/flutter_bloc.dart';
+-+++@@ -52,8 +51,14 @@ class _LoginScreenState extends State<LoginScreen> {
+-+ +       listener: (context, state) {
+-+ +         if (state is LoginSuccessLoaded) {
+-+-+-          Navigator.pushReplacement(context,
+-+-++          Navigator.pop(context); //pop dialog
+-+-++          Navigator.push(context,
+-+-+               MaterialPageRoute(builder: (context) => const HomePage()));
+-+++           Navigator.pop(context); //pop dialog
+-+++-          Navigator.push(context,
+-+++-              MaterialPageRoute(builder: (context) => const HomePage()));
+-++++          Navigator.push(
+-++++            context,
+-++++            MaterialPageRoute(
+-++++              builder: (context) => const HomePage(
+-++++                  // folderId: "",
+-++++                  ),
+- +++            ),
+- +++          );
+--+++        },
+--+++      );
+--++     }
+-+ +         }
+-+ +         if (state is LoginFailLoaded) {
+-+-++          Navigator.pop(context); //pop dialog
+-+-+           ScaffoldMessenger.of(context)
+-+-+               .showSnackBar(SnackBar(content: Text(state.error)));
+-+-+         }
+-+++           Navigator.pop(context); //pop dialog
+-+ +diff --git a/lib/presentation/screens/folder_screen.dart b/lib/presentation/screens/folder_screen.dart
+-+-+index 7a0a7a3..b5ffa57 100644
+-+++index b5ffa57..07c4c00 100644
+-+ +--- a/lib/presentation/screens/folder_screen.dart
+-+ ++++ b/lib/presentation/screens/folder_screen.dart
+-+-+@@ -9,7 +9,7 @@ class FolderScreen extends StatefulWidget {
+-+++@@ -1,34 +1,69 @@
+-+++ import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+-+++ import 'package:clouddisk_login_form/components/list_items.dart';
+-+++-import 'package:clouddisk_login_form/models/item.dart';
+-+++ import 'package:flutter/material.dart';
+-+++ import 'package:flutter_bloc/flutter_bloc.dart';
+- ++ 
+--++     return BlocListener<LoginBloc, LoginState>(
+--++       listener: (context, state) {
+--++         if (state is LoginSuccessLoaded) {
+--++-          Navigator.pushReplacement(context,
+--+++          Navigator.pop(context); //pop dialog
+--+++          Navigator.push(context,
+--++               MaterialPageRoute(builder: (context) => const HomePage()));
+--++         }
+--++         if (state is LoginFailLoaded) {
+--+++          Navigator.pop(context); //pop dialog
+--++           ScaffoldMessenger.of(context)
+--++               .showSnackBar(SnackBar(content: Text(state.error)));
+--++         }
+--++diff --git a/lib/presentation/screens/folder_screen.dart b/lib/presentation/screens/folder_screen.dart
+--++index 7a0a7a3..b5ffa57 100644
+--++--- a/lib/presentation/screens/folder_screen.dart
+--+++++ b/lib/presentation/screens/folder_screen.dart
+--++@@ -9,7 +9,7 @@ class FolderScreen extends StatefulWidget {
+--++     super.key,
+--++     required this.folders,
+--++   });
+--++-  final List<Item> folders;
+--+++  final List<Folder> folders;
+-+++ class FolderScreen extends StatefulWidget {
+-+++   const FolderScreen({
+-+ +     super.key,
+-+-+     required this.folders,
+-+++-    required this.folders,
+-++++    required this.folderId,
+-+ +   });
+-+-+-  final List<Item> folders;
+-+-++  final List<Folder> folders;
+-+++-  final List<Folder> folders;
+-++++  final String folderId;
+-+ +   @override
+-+ +   State<FolderScreen> createState() => _FolderScreenState();
+-+ + }
+-+-+@@ -19,7 +19,7 @@ class _FolderScreenState extends State<FolderScreen> {
+-+++ 
+-+++ class _FolderScreenState extends State<FolderScreen> {
+-++++  final FolderTreeBloc folderTreeBloc = FolderTreeBloc();
+-++++  @override
+-++++  void initState() {
+-++++    print("FOLDER ID ${widget.folderId}");
+-++++    folderTreeBloc.add(LoadEvent(widget.folderId));
+-++++    super.initState();
+-++++  }
+-++++
+-++++  @override
+-++++  void dispose() {
+-++++    folderTreeBloc.close();
+-++++    super.dispose();
+-++++  }
+-++++
+- ++   @override
+--++   State<FolderScreen> createState() => _FolderScreenState();
+--++ }
+--++@@ -19,7 +19,7 @@ class _FolderScreenState extends State<FolderScreen> {
+--++   Widget build(BuildContext context) {
+--++     return WillPopScope(
+--++       onWillPop: () async {
+--++-        BlocProvider.of<FolderTreeBloc>(context).add(const BackEvent());
+--+++        // BlocProvider.of<FolderTreeBloc>(context).add(const BackEvent());
+--++         return false;
+--++       },
+--++       child: Column(
+--++diff --git a/pubspec.lock b/pubspec.lock
+--++index 8be1513..0ecf786 100644
+--++--- a/pubspec.lock
+--+++++ b/pubspec.lock
+--++@@ -151,13 +151,6 @@ packages:
+--++       url: "https://pub.dartlang.org"
+--++     source: hosted
+--++     version: "6.0.4"
+--++-  pull_to_refresh:
+--++-    dependency: "direct main"
+--++-    description:
+--++-      name: pull_to_refresh
+--++-      url: "https://pub.dartlang.org"
+--++-    source: hosted
+--++-    version: "2.0.0"
+--++   sky_engine:
+--++     dependency: transitive
+--++     description: flutter
+--++@@ -221,4 +214,4 @@ packages:
+--++     version: "2.1.2"
+--++ sdks:
+--++   dart: ">=2.18.5 <3.0.0"
+--++-  flutter: ">=2.0.0"
+--+++  flutter: ">=1.16.0"
+--++diff --git a/pubspec.yaml b/pubspec.yaml
+--++index 65fa7d1..db7d632 100644
+--++--- a/pubspec.yaml
+--+++++ b/pubspec.yaml
+--++@@ -39,7 +39,6 @@ dependencies:
+--++   dio: ^4.0.6
+--++   flutter_bloc: ^8.1.1
+--++   equatable: 
+--++-  pull_to_refresh: ^2.0.0
+--++ dev_dependencies:
+--++   flutter_test:
+-+ +   Widget build(BuildContext context) {
+-+-+     return WillPopScope(
+-+-+       onWillPop: () async {
+-+-+-        BlocProvider.of<FolderTreeBloc>(context).add(const BackEvent());
+-+-++        // BlocProvider.of<FolderTreeBloc>(context).add(const BackEvent());
+-+-+         return false;
+-+-+       },
+-+-+       child: Column(
+-+-+diff --git a/pubspec.lock b/pubspec.lock
+-+-+index 8be1513..0ecf786 100644
+-+-+--- a/pubspec.lock
+-+-++++ b/pubspec.lock
+-+-+@@ -151,13 +151,6 @@ packages:
+-+-+       url: "https://pub.dartlang.org"
+-+-+     source: hosted
+-+-+     version: "6.0.4"
+-+-+-  pull_to_refresh:
+-+-+-    dependency: "direct main"
+-+-+-    description:
+-+-+-      name: pull_to_refresh
+-+-+-      url: "https://pub.dartlang.org"
+-+-+-    source: hosted
+-+-+-    version: "2.0.0"
+-+-+   sky_engine:
+-+-+     dependency: transitive
+-+-+     description: flutter
+-+-+@@ -221,4 +214,4 @@ packages:
+-+-+     version: "2.1.2"
+-+-+ sdks:
+-+-+   dart: ">=2.18.5 <3.0.0"
+-+-+-  flutter: ">=2.0.0"
+-+-++  flutter: ">=1.16.0"
+-+++-    return WillPopScope(
+-+++-      onWillPop: () async {
+-+++-        // BlocProvider.of<FolderTreeBloc>(context).add(const BackEvent());
+-+++-        return false;
+-+++-      },
+-+++-      child: Column(
+-+++-        children: [
+-+++-          // Text("path"),
+-+++-          Expanded(
+-+++-            child: ListItems(items: widget.folders),
+-+++-          ),
+-+++-        ],
+-++++    return BlocProvider(
+-++++      create: (context) => folderTreeBloc,
+-++++      child: BlocBuilder<FolderTreeBloc, FolderTreeState>(
+-++++        builder: (context, state) {
+-++++          if (state is FolderTreeLoading) {
+-++++            return const Center(
+-++++              child: CircularProgressIndicator(),
+-++++            );
+-++++          } else if (state is FolderTreeLoaded) {
+-++++            return Scaffold(
+-++++              body: Column(
+-++++                children: [
+-++++                  widget.folderId == ""
+-++++                      ? Container()
+-++++                      : Container(
+-++++                          width: double.infinity,
+-++++                          padding:
+-++++                              const EdgeInsets.only(left: 4, top: 5, bottom: 5),
+-++++                          decoration:
+-++++                              BoxDecoration(color: Colors.cyan.shade300),
+-++++                          child: const Text(
+-++++                            "path",
+-++++                            style: TextStyle(fontSize: 16),
+-++++                          ),
+-++++                        ),
+-++++                  Expanded(
+-++++                    child: ListItems(items: state.items),
+-++++                  ),
+-++++                ],
+-++++              ),
+-++++            );
+-++++          }
+-++++          return Container();
+-++++        },
+-+++       ),
+-+++     );
+-+++   }
+-+ +diff --git a/pubspec.yaml b/pubspec.yaml
+-+-+index 65fa7d1..db7d632 100644
+-+++index db7d632..52c892c 100644
+-+ +--- a/pubspec.yaml
+-+ ++++ b/pubspec.yaml
+-+-+@@ -39,7 +39,6 @@ dependencies:
+-+++@@ -3,7 +3,7 @@ description: A new Flutter project.
+-+++ 
+-+++ # The following line prevents the package from being accidentally published to
+-+++ # pub.dev using `flutter pub publish`. This is preferred for private packages.
+-+++-publish_to: 'none' # Remove this line if you wish to publish to pub.dev
+-++++publish_to: "none" # Remove this line if you wish to publish to pub.dev
+-+++ 
+-+++ # The following defines the version and build number for your application.
+-+++ # A version number is three numbers separated by dots, like 1.2.43
+-+++@@ -20,7 +20,7 @@ publish_to: 'none' # Remove this line if you wish to publish to pub.dev
+-+++ version: 1.0.0+1
+-+++ 
+-+++ environment:
+-+++-  sdk: '>=2.18.5 <3.0.0'
+-++++  sdk: ">=2.18.5 <3.0.0"
+-+++ 
+-+++ # Dependencies specify other packages that your package needs in order to work.
+-+++ # To automatically upgrade your package dependencies to the latest versions
+-+++@@ -32,13 +32,12 @@ dependencies:
+-+++   flutter:
+- ++     sdk: flutter
+--+diff --git a/lib/api/api_header.dart b/lib/api/api_header.dart
+--+new file mode 100644
+--+index 0000000..1ac93d0
+--+--- /dev/null
+--++++ b/lib/api/api_header.dart
+--+@@ -0,0 +1,29 @@
+--++//header của login
+--++import 'package:clouddisk_login_form/models/user.dart';
+--++
+--++final loginHeader = {
+--++  "Content-Type": "application/x-www-form-urlencoded",
+--++  'APP_TYPE': 'clouddisk',
+--++  'App-Type': 'clouddisk',
+--++  'app-type': 'clouddisk',
+--++  'DEVICE_TYPE': 'android',
+--++  'device-type': 'android',
+--++  'Device-Type': 'android',
+--++  'DEVICE': 'phone',
+--++  'device': 'phone',
+--++  'device_id': '1e10f743-196e-4bc0-aee7-8c14690f2ac4',
+--++  'X-REQUESTED-WITH': 'XMLHttpRequest',
+--++  "User_Agent": "Android 1.66 APP_HANBIRO_2.0.0.2",
+--++  "Cookie":
+--++      ";HANBIRO_GW=010254fedc4eaa12683367c2601053f919d8fd28b35cfd8c2f42173ed918e48eb9ab17480894076ec3ad7e268176e6b3;hmail_key=33b0cd76a231a3a0a6e247d814c23f9a;cook=kie",
+--++};
+--++List<String> cookie = [
+--++  ";HANBIRO_GW=${user.session}",
+--++  "hmail_key=${user.hmailKey}",
+--++  "cook=kie",
+--++];
+--++
+--++//header của getFolder
+--++final folderHeader = {
+--++  "Cookie": cookie.join(";"),
+--++};
+--+diff --git a/lib/api/api_service.dart b/lib/api/api_service.dart
+--+new file mode 100644
+--+index 0000000..911edce
+--+--- /dev/null
+--++++ b/lib/api/api_service.dart
+--+@@ -0,0 +1,28 @@
+--++import 'package:dio/dio.dart';
+--++
+--++class AuthApi {
+--++  final Dio _dio = Dio();
+--++  Future<String> get(url, Map<String, dynamic>? header) async {
+--++    var response = await _dio.get(
+--++      url,
+--++      options: Options(
+--++        headers: header,
+--++      ),
+--++    );
+--++    var responseData = response.data;
+--++    return responseData;
+--++  }
+--++
+--++  Future<Map> post(url, Map req, Map<String, dynamic>? header) async {
+--++    var response = await _dio.post(
+--++      url,
+--++      data: req,
+--++      options: Options(
+--++        headers: header,
+--++      ),
+--++    );
+--++    var responseData = response.data;
+--++
+--++    return responseData;
+--++  }
+--++}
+--+diff --git a/lib/api/api_url.dart b/lib/api/api_url.dart
+--+new file mode 100644
+--+index 0000000..4f059ed
+--+--- /dev/null
+--++++ b/lib/api/api_url.dart
+--+@@ -0,0 +1,7 @@
+--++const baseUrl = "https://groupware57.hanbiro.net";
+--++const loginUrl = "$baseUrl/ngw/sign/auth?is_checking_otp=1";
+--++// const getFolderUrl = "$baseUrl/cloud/api/get.php?access=1&type=dir";
+--++
+--++String getFolderUrl(String type, String id) {
+--++  return "$baseUrl/cloud/api/get.php?type=$type&id=$id";
+--++}
+--+diff --git a/lib/api/auth.dart b/lib/api/auth.dart
+--+deleted file mode 100644
+--+index fa16976..0000000
+--+--- a/lib/api/auth.dart
+--++++ /dev/null
+--+@@ -1,71 +0,0 @@
+--+-// ignore: depend_on_referenced_packages
+--+-import 'package:clouddisk_login_form/models/user.dart';
+--+-import 'package:dio/dio.dart';
+--+-
+--+-const baseUrl = "https://groupware57.hanbiro.net";
+--+-const loginUrl = "$baseUrl/ngw/sign/auth?is_checking_otp=1";
+--+-const getFolderUrl = "$baseUrl/cloud/api/get.php?access=1&type=dir";
+--+-//header của login
+--+-final loginHeader = {
+--+-  "Content-Type": "application/x-www-form-urlencoded",
+--+-  'APP_TYPE': 'clouddisk',
+--+-  'App-Type': 'clouddisk',
+--+-  'app-type': 'clouddisk',
+--+-  'DEVICE_TYPE': 'android',
+--+-  'device-type': 'android',
+--+-  'Device-Type': 'android',
+--+-  'DEVICE': 'phone',
+--+-  'device': 'phone',
+--+-  'device_id': '1e10f743-196e-4bc0-aee7-8c14690f2ac4',
+--+-  'X-REQUESTED-WITH': 'XMLHttpRequest',
+--+-  "User_Agent": "Android 1.66 APP_HANBIRO_2.0.0.2",
+--+-  "Cookie":
+--+-      ";HANBIRO_GW=010254fedc4eaa12683367c2601053f919d8fd28b35cfd8c2f42173ed918e48eb9ab17480894076ec3ad7e268176e6b3;hmail_key=33b0cd76a231a3a0a6e247d814c23f9a;cook=kie",
+--+-};
+--+-List<String> cookie = [
+--+-  ";HANBIRO_GW=${user.session}",
+--+-  "hmail_key=${user.hmailKey}",
+--+-  "cook=kie",
+--+-];
+--+-
+--+-//header của getFolder
+--+-final folderHeader = {
+--+-  "Cookie": cookie.join(";"),
+--+-};
+--+-
+--+-class AuthApi {
+--+-  final Dio _dio = Dio();
+--+-  Future<String> get(url, Map<String, dynamic>? header) async {
+--+-    var response = await _dio.get(
+--+-      url,
+--+-      options: Options(
+--+-        headers: header,
+--+-      ),
+--+-    );
+--+-    var responseData = response.data;
+--+-    return responseData;
+--+-  }
+--+-
+--+-  Future<Map> post(url, Map req, Map<String, dynamic>? header) async {
+--+-    var response = await _dio.post(
+--+-      url,
+--+-      data: req,
+--+-      options: Options(
+--+-        headers: header,
+--+-      ),
+--+-    );
+--+-    var responseData = response.data;
+--+-
+--+-    return responseData;
+--+-  }
+--+-}
+--+-
+--+-Future getFolderlv2() async {
+--+-  AuthApi api = AuthApi();
+--+-
+--+-  String url =
+--+-      "https://groupware57.hanbiro.net/cloud/api/get.php?cache=false&id=my&type=file";
+--+-  var resp = await api.get(url, folderHeader);
+--+-  // ignore: unnecessary_type_check
+--+-  print(resp);
+--+-}
+--+diff --git a/lib/api/request/login_req.dart b/lib/api/request/login_req.dart
+--+new file mode 100644
+--+index 0000000..178c313
+--+--- /dev/null
+--++++ b/lib/api/request/login_req.dart
+--+@@ -0,0 +1,26 @@
+--++class LogInRequest {
+--++  final String gwid;
+--++  final String gwpass;
+--++  final String model;
+--++  final String code;
+--++  final String deviceid;
+--++  LogInRequest(this.gwid, this.gwpass, this.model, this.code, this.deviceid);
+--++
+--++  Map getMap() {
+--++    return {
+--++      'gw_id': gwid,
+--++      'gw_pass': gwpass,
+--++      'model': model,
+--++      'code': code,
+--++      'device_id': deviceid
+--++    };
+--++  }
+--++}
+--++
+--++final LogInRequest logInRequest = LogInRequest(
+--++  "jai1nXEjw8N7Akxof9UYIfp6hW5YFmlO2cGKkLlFr3zxC+mr8q6ZRXWhUysoSQkYqJXD7eFpg9ypOeREIDrHdbgyA6eIUvo6yhPN4K2FuWIkL+xQQGTCvZmXisxeJXkfmJO1i6VJ47aBZMooPoWEdMJag3/RqqXqY+iiECx8RLk=",
+--++  "Kp6mUKz3HFav6GaceGbXz0Yb+5cg68SavnTP/avUEv2O2SmJ04mG1/9LcZKT8G19XQ9zGzOwYl7gd/ID408lDfx/MLSvYhPuZV+X9C4Da16Dk1q16MEG22GjjutWKqSYAkXBz1ftQhGuWtEUMOHu0XklnrDQYWEAqA8nOsK+gv4=",
+--++  "samsung SM-N970F",
+--++  "212970",
+--++  "2eaba74b-e0b5-49cb-b9ab-f9630845d43b",
+--++);
+--+diff --git a/lib/api/response/login_res.dart b/lib/api/response/login_res.dart
+--+new file mode 100644
+--+index 0000000..45355da
+--+--- /dev/null
+--++++ b/lib/api/response/login_res.dart
+--+@@ -0,0 +1,21 @@
+--++class LogInResponse {
+--++  late bool success;
+--++  late final String? msg;
+--++  late String session;
+--++  late String hmailkey;
+--++  LogInResponse(Map map) {
+--++    success = map["success"];
+--++    msg = map["msg"];
+--++    session = map["session"];
+--++    hmailkey = map["hmail_key"];
+--++  }
+--++
+--++  Map getMap() {
+--++    return {
+--++      "success": success,
+--++      "msg": msg,
+--++      "session": session,
+--++      "hmail_key": hmailkey,
+--++    };
+--++  }
+--++}
+--+diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+--+index 2e25020..176559b 100644
+--+--- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+--++++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+--+@@ -1,8 +1,12 @@
+--+ // ignore: depend_on_referenced_packages
+--+ import 'dart:convert';
+--++import 'dart:ffi';
+--+ 
+--++// ignore: depend_on_referenced_packages
+--+ import 'package:bloc/bloc.dart';
+--+-import 'package:clouddisk_login_form/api/auth.dart';
+--++import 'package:clouddisk_login_form/api/api_header.dart';
+--++import 'package:clouddisk_login_form/api/api_url.dart';
+--++import 'package:clouddisk_login_form/api/api_service.dart';
+--+ import 'package:equatable/equatable.dart';
+--+ 
+--+ import 'package:clouddisk_login_form/models/item.dart';
+--+@@ -10,53 +14,52 @@ import 'package:clouddisk_login_form/models/item.dart';
+--+ part 'folder_tree_event.dart';
+--+ part 'folder_tree_state.dart';
+--+ 
+--++List<String> ids = [""];
+--++
+--+ class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
+--+-  // List<int> ids = []; // Tạo một list gồm những id
+--+   AuthApi api = AuthApi();
+--+-
+--+   FolderTreeBloc() : super(FolderTreeInitial()) {
+--+     on<FolderTreeEvent>((event, emit) async {
+--+       if (event is LoadEvent) {
+--++        for (Folder f in folders) {
+--++          if (f.id == event.id && !f.text.contains(".")) {
+--++            ids.add(f.text);
+--++          }
+--++        }
+--+         emit(FolderTreeLoading());
+--+-
+--++        final resp =
+--++            await api.get(getFolderUrl("file", event.id), folderHeader);
+--++        final json = jsonDecode(resp);
+--++        final List folderList = json["files"];
+--++        folders = folderList
+--++            .map((folderJson) => Folder.fromJson(folderJson))
+--++            .toList();
+--+         // final id = event.id;
+--+-        // for (Folder folder in folders) {
+--+-        //   if (folder.id == id) {
+--+-        // ids.add(id); // Lưu những id đã đi qua vào ids
+--+-        final resp = await api.get(getFolderUrl, folderHeader);
+--+-        final json = jsonDecode(resp) as List;
+--+-        folders =
+--+-            json.map((folderJson) => Folder.fromJson(folderJson)).toList();
+--+-        emit(FolderTreeLoaded(folders));
+--++        // print(event.id);
+--+ 
+--+-        // emit(FolderTreeLoaded(folder.children));
+--++        // ids.add(id);
+--++        print(ids);
+--++        emit(FolderTreeLoaded(folders));
+--++      }
+--++      if (event is BackEvent) {
+--++        //ids.last tức là id của folder đang hiển thị
+--++        if (ids.last != "") {
+--++          //nếu folder đang hiển thị không phải folder gốc thì sẽ xóa nó đi
+--++          ids.removeLast();
+--++        } else {
+--++          // nếu đang ở folder gốc thì clear toàn bộ ids và gán phần tử đầu tiên là folder gốc
+--++          ids.clear();
+--++          ids.add("");
+-+++ 
+-+++-
+-+++   # The following adds the Cupertino Icons font to your application.
+-+++   # Use with the CupertinoIcons class for iOS style icons.
+-+++   cupertino_icons: ^1.0.2
+-+ +   dio: ^4.0.6
+-+ +   flutter_bloc: ^8.1.1
+-+-+   equatable: 
+-+-+-  pull_to_refresh: ^2.0.0
+-+++-  equatable: 
+-++++  equatable:
+-+ + dev_dependencies:
+-+ +   flutter_test:
+-+ +     sdk: flutter
+-+++@@ -55,7 +54,6 @@ dev_dependencies:
+-+++ 
+-+++ # The following section is specific to Flutter packages.
+-+++ flutter:
+-+++-
+-+++   # The following line ensures that the Material Icons font is
+-+++   # included with your application, so that you can use the icons in
+-+++   # the material Icons class.
+-+++@@ -63,7 +61,7 @@ flutter:
+-+++ 
+-+++   # To add assets to your application, add an assets section, like this:
+-+++   assets:
+-+++-  - assets/images/
+-++++    - assets/images/
+-+++   #   - images/a_dot_burr.jpeg
+-+++   #   - images/a_dot_ham.jpeg
+-+++ 
+-+ diff --git a/lib/api/api_header.dart b/lib/api/api_header.dart
+-+ new file mode 100644
+-+ index 0000000..1ac93d0
+-+@@ -1075,13 +1851,12 @@ index 0000000..911edce
+-+ +}
+-+ diff --git a/lib/api/api_url.dart b/lib/api/api_url.dart
+-+ new file mode 100644
+-+-index 0000000..4f059ed
+-++index 0000000..bb797ab
+-+ --- /dev/null
+-+ +++ b/lib/api/api_url.dart
+-+-@@ -0,0 +1,7 @@
+-++@@ -0,0 +1,6 @@
+-+ +const baseUrl = "https://groupware57.hanbiro.net";
+-+ +const loginUrl = "$baseUrl/ngw/sign/auth?is_checking_otp=1";
+-+-+// const getFolderUrl = "$baseUrl/cloud/api/get.php?access=1&type=dir";
+-+ +
+-+ +String getFolderUrl(String type, String id) {
+-+ +  return "$baseUrl/cloud/api/get.php?type=$type&id=$id";
+-+@@ -1223,13 +1998,12 @@ index 0000000..45355da
+-+ +  }
+-+ +}
+-+ diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+-+-index 2e25020..176559b 100644
+-++index 2e25020..efc9413 100644
+-+ --- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+-+ +++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+-+-@@ -1,8 +1,12 @@
+-++@@ -1,8 +1,11 @@
+-+  // ignore: depend_on_referenced_packages
+-+  import 'dart:convert';
+-+-+import 'dart:ffi';
+-+  
+-+ +// ignore: depend_on_referenced_packages
+-+  import 'package:bloc/bloc.dart';
+-+@@ -1240,12 +2014,9 @@ index 2e25020..176559b 100644
+-+  import 'package:equatable/equatable.dart';
+-+  
+-+  import 'package:clouddisk_login_form/models/item.dart';
+-+-@@ -10,53 +14,52 @@ import 'package:clouddisk_login_form/models/item.dart';
+-+- part 'folder_tree_event.dart';
+-++@@ -11,52 +14,38 @@ part 'folder_tree_event.dart';
+-+  part 'folder_tree_state.dart';
+-+  
+-+-+List<String> ids = [""];
+-+-+
+-+  class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
+-+ -  // List<int> ids = []; // Tạo một list gồm những id
+-+    AuthApi api = AuthApi();
+-+@@ -1253,13 +2024,7 @@ index 2e25020..176559b 100644
+-+    FolderTreeBloc() : super(FolderTreeInitial()) {
+-+      on<FolderTreeEvent>((event, emit) async {
+-+        if (event is LoadEvent) {
+-+-+        for (Folder f in folders) {
+-+-+          if (f.id == event.id && !f.text.contains(".")) {
+-+-+            ids.add(f.text);
+-+-+          }
+-+-+        }
+-+          emit(FolderTreeLoading());
+-+--
+-+ +        final resp =
+-+ +            await api.get(getFolderUrl("file", event.id), folderHeader);
+-+ +        final json = jsonDecode(resp);
+-+@@ -1267,7 +2032,22 @@ index 2e25020..176559b 100644
+-+ +        folders = folderList
+-+ +            .map((folderJson) => Folder.fromJson(folderJson))
+-+ +            .toList();
+-+-         // final id = event.id;
+-+++        if (event.id == "") {
+-+++          foldersRoot = folders;
+-+++          addColorandIcon();
+- ++        }
+--++        // final preId = ids[ids.length - 1];
+--++        // //preId lưu trữ id của folder trước folder hiện tại, nếu id đang = 0 thì ids chỉ có mỗi một phần tử là 0, vì đã clear ở trên
+--++        // for (Folder folder in folders) {
+--++        //   if (folder.id == preId) {
+--++        //     emit(FolderRootLoaded(folder.children));
+--+         //     break;
+--+         //   }
+--+         // }
+--+       }
+--+-      // if (event is BackEvent) {
+--+-      //   emit(FolderTreeLoading());
+--+-      //   //ids.last tức là id của folder đang hiển thị
+--+-      //   if (ids.last != 0) {
+--+-      //     //nếu folder đang hiển thị không phải folder gốc thì sẽ xóa nó đi
+--+-      //     ids.removeLast();
+--+-      //   } else {
+--+-      //     // nếu đang ở folder gốc thì clear toàn bộ ids và gán phần tử đầu tiên là folder gốc
+--+-      //     ids.clear();
+--+-      //     ids.add(0);
+--+-      //   }
+--+-      //   final preId = ids[ids.length - 1];
+--+-      //   //preId lưu trữ id của folder trước folder hiện tại, nếu id đang = 0 thì ids chỉ có mỗi một phần tử là 0, vì đã clear ở trên
+--+-      //   for (Folder folder in folders) {
+--+-      //     if (folder.id == preId) {
+--+-      //       await Future.delayed(const Duration(seconds: 1), () {
+--+-      //         //Tạo cảm giác load data
+--+-      //         emit(FolderTreeLoaded(folder.children));
+--+-      //       });
+--+-      //       break;
+--+-      //     }
+--+-      //   }
+--+-      // }
+--+     });
+--+   }
+--+ }
+--+diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
+--+index 9784692..7541c81 100644
+--+--- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
+--++++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
+--+@@ -15,9 +15,6 @@ class LoadEvent extends FolderTreeEvent {
+--+   List<Object> get props => [id];
+--+ }
+-+++        // else {
+-+++        //   late var folder;
+-+++        //   for (Item f in folders) {
+-+++        //     for (Folder f2 in foldersRoot) {
+-+++        //       if (f2.id == event.id) {
+-+++        //         folder = f2;
+-+++        //         break;
+-+++        //       }
+-+++        //     }
+-+++        //     if (f is Folder) {
+- + 
+--+-// class BackEvent extends FolderTreeEvent {
+--+-//   const BackEvent();
+-++-        // final id = event.id;
+-+ -        // for (Folder folder in folders) {
+-+ -        //   if (folder.id == id) {
+-+ -        // ids.add(id); // Lưu những id đã đi qua vào ids
+-+@@ -1276,31 +2056,13 @@ index 2e25020..176559b 100644
+-+ -        folders =
+-+ -            json.map((folderJson) => Folder.fromJson(folderJson)).toList();
+-+ -        emit(FolderTreeLoaded(folders));
+-+-+        // print(event.id);
+-+- 
+- +-
+--+-//   @override
+--+-//   List<Object> get props => [];
+--+-// }
+--++class BackEvent extends FolderTreeEvent {
+--++  const BackEvent();
+--++}
+--+diff --git a/lib/bloc/login/bloc/login_bloc.dart b/lib/bloc/login/bloc/login_bloc.dart
+--+index c8c83ae..6ccec52 100644
+--+--- a/lib/bloc/login/bloc/login_bloc.dart
+--++++ b/lib/bloc/login/bloc/login_bloc.dart
+--+@@ -1,10 +1,13 @@
+--+ // ignore: depend_on_referenced_packages
+--+ import 'package:bloc/bloc.dart';
+--++import 'package:clouddisk_login_form/api/api_header.dart';
+--++import 'package:clouddisk_login_form/api/api_url.dart';
+--++import 'package:clouddisk_login_form/api/request/login_req.dart';
+--++import 'package:clouddisk_login_form/api/response/login_res.dart';
+--+ import 'package:clouddisk_login_form/models/user.dart';
+--+ import 'package:equatable/equatable.dart';
+--+ 
+--+-import 'package:clouddisk_login_form/api/auth.dart';
+--+-import 'package:clouddisk_login_form/models/login.dart';
+--++import 'package:clouddisk_login_form/api/api_service.dart';
+--+ 
+--+ part 'login_event.dart';
+--+ part 'login_state.dart';
+--+diff --git a/lib/components/item_file.dart b/lib/components/item_file.dart
+--+index 3476abc..abbaf45 100644
+--+--- a/lib/components/item_file.dart
+--++++ b/lib/components/item_file.dart
+--+@@ -45,9 +45,10 @@ class ItemFile extends StatelessWidget {
+--+             const SizedBox(
+--+               width: 8,
+--+             ),
+--+-            Center(
+--++            Flexible(
+--+               child: Text(
+--+                 item.text,
+--++                overflow: TextOverflow.ellipsis,
+--+                 style: const TextStyle(
+--+                   fontSize: 16,
+--+                   fontWeight: FontWeight.w400,
+--+diff --git a/lib/components/list_items.dart b/lib/components/list_items.dart
+--+index 2df6c65..454ffb3 100644
+--+--- a/lib/components/list_items.dart
+--++++ b/lib/components/list_items.dart
+--+@@ -1,8 +1,6 @@
+--+-import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+--+ import 'package:clouddisk_login_form/components/item_file.dart';
+-+ -        // emit(FolderTreeLoaded(folder.children));
+-+-+        // ids.add(id);
+-+-+        print(ids);
+-+-+        emit(FolderTreeLoaded(folders));
+-+-+      }
+-+-+      if (event is BackEvent) {
+-+-+        //ids.last tức là id của folder đang hiển thị
+-+-+        if (ids.last != "") {
+-+-+          //nếu folder đang hiển thị không phải folder gốc thì sẽ xóa nó đi
+-+-+          ids.removeLast();
+-+-+        } else {
+-+-+          // nếu đang ở folder gốc thì clear toàn bộ ids và gán phần tử đầu tiên là folder gốc
+-+-+          ids.clear();
+-+-+          ids.add("");
+-+-+        }
+-+-+        // final preId = ids[ids.length - 1];
+-+-+        // //preId lưu trữ id của folder trước folder hiện tại, nếu id đang = 0 thì ids chỉ có mỗi một phần tử là 0, vì đã clear ở trên
+-+-+        // for (Folder folder in folders) {
+-+-+        //   if (folder.id == preId) {
+-+-+        //     emit(FolderRootLoaded(folder.children));
+-+-         //     break;
+-++-        //     break;
+-+++        //     }
+-+          //   }
+-+          // }
+-+++        emit(FolderTreeLoaded(folders));
+-+        }
+-+ -      // if (event is BackEvent) {
+-+ -      //   emit(FolderTreeLoading());
+-+@@ -1346,16 +2108,17 @@ index 9784692..7541c81 100644
+-+ +  const BackEvent();
+-+ +}
+-+ diff --git a/lib/bloc/login/bloc/login_bloc.dart b/lib/bloc/login/bloc/login_bloc.dart
+-+-index c8c83ae..6ccec52 100644
+-++index c8c83ae..ae8bd59 100644
+-+ --- a/lib/bloc/login/bloc/login_bloc.dart
+-+ +++ b/lib/bloc/login/bloc/login_bloc.dart
+-+-@@ -1,10 +1,13 @@
+-++@@ -1,10 +1,14 @@
+-+  // ignore: depend_on_referenced_packages
+-+  import 'package:bloc/bloc.dart';
+-+ +import 'package:clouddisk_login_form/api/api_header.dart';
+-+ +import 'package:clouddisk_login_form/api/api_url.dart';
+-+ +import 'package:clouddisk_login_form/api/request/login_req.dart';
+-+ +import 'package:clouddisk_login_form/api/response/login_res.dart';
+-+++import 'package:clouddisk_login_form/main.dart';
+-+  import 'package:clouddisk_login_form/models/user.dart';
+-+  import 'package:equatable/equatable.dart';
+-+  
+-+@@ -1365,27 +2128,123 @@ index c8c83ae..6ccec52 100644
+-+  
+-+  part 'login_event.dart';
+-+  part 'login_state.dart';
+-++@@ -20,6 +24,8 @@ class LoginBloc extends Bloc<LoginEvent, LoginState> {
+-++         if (loginRes.success == true) {
+-++           user.hmailKey = loginRes.hmailkey;
+-++           user.session = loginRes.session;
+-+++          prefs.setSession(user.session); //save session vào preference
+-+++          prefs.setHmailKey(user.hmailKey); //save hmailKey vào preference
+-++           emit(LoginSuccessLoaded(loginRes));
+-++         } else {
+-++           emit(const LoginFailLoaded("Không đăng nhập được"));
+-+ diff --git a/lib/components/item_file.dart b/lib/components/item_file.dart
+-+-index 3476abc..abbaf45 100644
+-++index 3476abc..170a0e9 100644
+-+ --- a/lib/components/item_file.dart
+-+ +++ b/lib/components/item_file.dart
+-+-@@ -45,9 +45,10 @@ class ItemFile extends StatelessWidget {
+-++@@ -1,8 +1,8 @@
+- + import 'package:clouddisk_login_form/models/item.dart';
+- + import 'package:flutter/material.dart';
+--+-import 'package:flutter_bloc/flutter_bloc.dart';
+- + 
+--+ class ListItems extends StatefulWidget {
+--+   final List<Folder> items;
+--+@@ -21,11 +19,8 @@ class _ListItemsState extends State<ListItems> {
+--+             itemBuilder: (context, index) => ItemFile(
+--+               item: widget.items[index],
+--+               onPressed: () {
+--+-                if (widget.items[index] is Folder) {
+--+-                  // BlocProvider.of<FolderTreeBloc>(context).add(
+--+-                  //   LoadEvent(widget.items[index].id),
+--+-                  // );
+--+-                }
+--++                Navigator.of(context).pushNamed("/folderScreen",
+--++                    arguments: widget.items[index].id.toString());
+--+               },
+--+             ),
+--+           )
+--+diff --git a/lib/main.dart b/lib/main.dart
+--+index e311817..dee75d3 100644
+--+--- a/lib/main.dart
+--++++ b/lib/main.dart
+--+@@ -1,3 +1,4 @@
+--++import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+--+ import 'package:clouddisk_login_form/bloc/login/bloc/login_bloc.dart';
+--+ import 'package:clouddisk_login_form/presentation/pages/login_page/login_screen.dart';
+--+ import 'package:flutter/material.dart';
+--+@@ -36,8 +37,15 @@ class _MyHomePageState extends State<MyHomePage> {
+--+   @override
+--+   Widget build(BuildContext context) {
+--+     return Scaffold(
+--+-      body: BlocProvider(
+--+-        create: (context) => loginBloc,
+--++      body: MultiBlocProvider(
+--++        providers: [
+--++          BlocProvider(
+--++            create: (context) => loginBloc,
+--++          ),
+--++          BlocProvider(
+--++            create: (context) => FolderTreeBloc(),
+--++          ),
+--++        ],
+--+         child: const LoginScreen(),
+--+       ),
+--+     );
+--+diff --git a/lib/models/login.dart b/lib/models/login.dart
+--+deleted file mode 100644
+--+index 9bcd0a5..0000000
+--+--- a/lib/models/login.dart
+--++++ /dev/null
+--+@@ -1,52 +0,0 @@
+--+-class LogInRequest {
+--+-  final String token;
+--+-  final String gwid;
+--+-  final String gwpass;
+--+-  final String model;
+--+-  final String code;
+--+-  final String deviceid;
+--+-  LogInRequest(
+--+-      this.token, this.gwid, this.gwpass, this.model, this.code, this.deviceid);
+--+-
+--+-  Map getMap() {
+--+-    return {
+--+-      'token': token,
+--+-      'gw_id': gwid,
+--+-      'gw_pass': gwpass,
+--+-      'model': model,
+--+-      'code': code,
+--+-      'device_id': deviceid
+--+-    };
+--+-  }
+--+-}
+--+-
+--+-final LogInRequest logInRequest = LogInRequest(
+--+-  "cmGw7OXyYe4:APA91bGYAL29_GyI7wx3IcFiVYsxZbt8FtJJezhs1Ot_F0F1vEHljzkmV28p9owvsI3ABM3yvqwpkEdqCXJWTGwXb9XQwFtDYqaS-9Inc",
+--+-  "oRfAa0Ex1ZVsHLimNx5XpV1eeiNs+g2OhPIDYHI8IpWFhHNQ2Nm0C1KuISROSJj9NZ6rpnL6ZsYduCKvD38he8bfK7lQHB/3EcDEZWRUgCyv4z61OAf2pMXhQfbOWvCMfsdJ0JBun7iC1mQ7aSLzT/JJYDUybwJbPx72GOjQ1j4=",
+--+-  "wtsaWk7utF6GtHIFZKwXYarexC/Qp4fY/5xAjq7+gC/afF1d1/Gt7FEgU1UcnHxLtNHOn2dgC8Z7qdTMonGaZ+aRTGWh70sfxy0QLL7Ij/RyjqqIwqGuxNXrSOkwcp3EiN1S/6z7maMTl5XZ6c/Bww3w/G1mcsmnPCZ6gaJzMMk=",
+--+-  "samsung SM-N970F",
+--+-  "212970",
+--+-  "2eaba74b-e0b5-49cb-b9ab-f9630845d43b",
+--+-);
+--+-
+--+-class LogInResponse {
+--+-  late bool success;
+--+-  late final String? msg;
+--+-  late String session;
+--+-  late String hmailkey;
+--+-  LogInResponse(Map map) {
+--+-    success = map["success"];
+--+-    msg = map["msg"];
+--+-    session = map["session"];
+--+-    hmailkey = map["hmail_key"];
+--+-  }
+--+-
+--+-  Map getMap() {
+--+-    return {
+--+-      "success": success,
+--+-      "msg": msg,
+--+-      "session": session,
+--+-      "hmail_key": hmailkey,
+--+-    };
+--+-  }
+--+-}
+--+diff --git a/lib/presentation/pages/home_page/home_page.dart b/lib/presentation/pages/home_page/home_page.dart
+--+index 7031ef0..2cc079a 100644
+--+--- a/lib/presentation/pages/home_page/home_page.dart
+--++++ b/lib/presentation/pages/home_page/home_page.dart
+--+@@ -1,34 +1,23 @@
+--+-import 'package:clouddisk_login_form/api/auth.dart';
+--+-import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+--+-import 'package:clouddisk_login_form/models/item.dart';
+--+ import 'package:clouddisk_login_form/presentation/screens/folder_screen.dart';
+--+ import 'package:flutter/material.dart';
+--+-import 'package:flutter_bloc/flutter_bloc.dart';
+--+ 
+--+ class HomePage extends StatefulWidget {
+--+-  const HomePage({super.key});
+--++  const HomePage({
+--++    super.key,
+--++  });
+--+ 
+--+   @override
+--+   State<HomePage> createState() => _HomePageState();
+--+ }
+-++-class ItemFile extends StatelessWidget {
+-++-  final Folder item;
+-+++class ItemFile extends StatefulWidget {
+-+++  final Item item;
+-++   final VoidCallback onPressed;
+- + 
+--+ class _HomePageState extends State<HomePage> {
+--+-  final GlobalKey<ScaffoldState> scaffoldKey = GlobalKey<ScaffoldState>();
+--+-  final FolderTreeBloc folderTreeBloc = FolderTreeBloc();
+--+-  @override
+--+-  void initState() {
+--+-    folderTreeBloc.add(const LoadEvent(""));
+--+-    super.initState();
+--+-  }
+--++  final navKey = GlobalKey<NavigatorState>();
+-++   const ItemFile({
+-++@@ -11,14 +11,20 @@ class ItemFile extends StatelessWidget {
+-++     required this.onPressed,
+-++   });
+- + 
+-+++  @override
+-+++  State<ItemFile> createState() => _ItemFileState();
+-+++}
+-+++
+-+++class _ItemFileState extends State<ItemFile> {
+-+++  bool? check1 = false;
+- +   @override
+- +   Widget build(BuildContext context) {
+--+-    getFolderlv2();
+--+-
+--+     void onSelected(BuildContext context, int value) {
+--+       switch (value) {
+--+         case 0:
+--+-          print("Download");
+--+           break;
+--+         default:
+--+       }
+--+@@ -38,6 +27,8 @@ class _HomePageState extends State<HomePage> {
+--+       appBar: PreferredSize(
+--+         preferredSize: const Size.fromHeight(50),
+--+         child: AppBar(
+--++          elevation: 0,
+--++          automaticallyImplyLeading: false, //turn off leading
+--+           title: const Text("Home"),
+--+           actions: [
+--+             Theme(
+--+@@ -61,24 +52,38 @@ class _HomePageState extends State<HomePage> {
+-++     return InkWell(
+-++       onTap: () {
+-++-        onPressed();
+-+++        widget.onPressed();
+-++       },
+-++       child: Container(
+-++-        padding: const EdgeInsets.only(top: 16, bottom: 16, left: 16),
+-+++        padding: const EdgeInsets.only(top: 10, bottom: 10, left: 12),
+-++         decoration: BoxDecoration(
+-++             border: Border(
+-++           bottom: BorderSide(
+-++@@ -27,27 +33,30 @@ class ItemFile extends StatelessWidget {
+-++         )),
+-++         child: Row(
+-++           children: [
+-++-            // Container(
+-++-            //   padding: const EdgeInsets.all(4),
+-++-            //   decoration: BoxDecoration(
+-++-            //     // borderRadius: BorderRadius.circular(12),
+-++-            //     shape: BoxShape.circle,
+-++-            //     // color: item is Folder ? ((item as Folder).color) : null,
+-++-            //   ),
+-++-            //   child: item is Folder
+-++-            //       ? Icon(
+-++-            //           (item as Folder).icon,
+-++-            //           color: Colors.white,
+-++-            //           size: 20,
+-++-            //         )
+-++-            //       : null,
+-++-            // ),
+-+++            Container(
+-+++              padding: const EdgeInsets.all(8),
+-+++              decoration: BoxDecoration(
+-+++                shape: BoxShape.circle,
+-+++                color: widget.item is Folder
+-+++                    ? ((widget.item as Folder).color)
+-+++                    : null,
+-+++              ),
+-+++              child: widget.item is Folder
+-+++                  ? Icon(
+-+++                      (widget.item as Folder).icon,
+-+++                      color: Colors.white,
+-+++                      size: 26,
+-+++                    )
+-+++                  : null,
+-+++            ),
+-+              const SizedBox(
+-+-               width: 8,
+-++-              width: 8,
+-+++              width: 12,
+-+              ),
+-+ -            Center(
+-+-+            Flexible(
+-+++            Expanded(
+-+++              flex: 2,
+-+                child: Text(
+-+-                 item.text,
+-++-                item.text,
+-+++                widget.item.text,
+-+ +                overflow: TextOverflow.ellipsis,
+-+                  style: const TextStyle(
+-+                    fontSize: 16,
+-+                    fontWeight: FontWeight.w400,
+-++@@ -55,6 +64,15 @@ class ItemFile extends StatelessWidget {
+-++                 ),
+-++               ),
+-++             ),
+-+++            (widget.item.text.contains("."))
+-+++                ? Checkbox(
+-+++                    value: check1,
+-+++                    onChanged: (bool? value) {
+-+++                      setState(() {
+-+++                        check1 = value;
+-+++                      });
+-+++                    })
+-+++                : Container(),
+- +           ],
+- +         ),
+- +       ),
+--+-      // body: FolderScreen(
+--+-      //   folders: folders,
+--+-      // ),
+--+-      body: BlocProvider(
+--+-        create: (context) => folderTreeBloc,
+--+-        child: BlocBuilder<FolderTreeBloc, FolderTreeState>(
+--+-          builder: (context, state) {
+--+-            if (state is FolderTreeLoading) {
+--+-              return const Center(
+--+-                child: CircularProgressIndicator(),
+--+-              );
+--++      body: WillPopScope(
+--++        onWillPop: () async {
+--++          if (navKey.currentState != null) {
+--++            if (navKey.currentState!.canPop()) {
+--++              navKey.currentState!.pop();
+--++              return false;
+--+             }
+--+-            if (state is FolderTreeLoaded) {
+--+-              return FolderScreen(
+--+-                folders: state.items,
+--+-              );
+--++          }
+--++          return true;
+--++        },
+--++        child: Navigator(
+--++          key: navKey,
+--++          onGenerateRoute: (settings) {
+--++            Widget page = const FolderScreen(folderId: "");
+--++            switch (settings.name) {
+--++              case "/":
+--++                return MaterialPageRoute(
+--++                  settings: settings,
+--++                  builder: (context) {
+--++                    return const FolderScreen(folderId: "");
+--++                  },
+--++                );
+--++              case "/folderScreen":
+--++                var arguments = settings.arguments as String;
+--++                return MaterialPageRoute(
+--++                  settings: settings,
+--++                  builder: (context) {
+--++                    return FolderScreen(folderId: arguments);
+--++                  },
+--++                );
+--+             }
+--+-            return Container();
+--++            return MaterialPageRoute(builder: (_) => page);
+--+           },
+--+         ),
+--+       ),
+--+diff --git a/lib/presentation/pages/login_page/login_screen.dart b/lib/presentation/pages/login_page/login_screen.dart
+--+index be78863..e27cca2 100644
+--+--- a/lib/presentation/pages/login_page/login_screen.dart
+--++++ b/lib/presentation/pages/login_page/login_screen.dart
+--+@@ -1,8 +1,7 @@
+--+-import 'package:clouddisk_login_form/api/auth.dart';
+--++import 'package:clouddisk_login_form/api/request/login_req.dart';
+--+ import 'package:clouddisk_login_form/bloc/login/bloc/login_bloc.dart';
+--+ import 'package:clouddisk_login_form/components/auth_button.dart';
+--+ import 'package:clouddisk_login_form/components/auth_input.dart';
+--+-import 'package:clouddisk_login_form/models/login.dart';
+--+ import 'package:clouddisk_login_form/presentation/pages/home_page/home_page.dart';
+--+ import 'package:flutter/material.dart';
+--+ import 'package:flutter_bloc/flutter_bloc.dart';
+--+@@ -52,8 +51,14 @@ class _LoginScreenState extends State<LoginScreen> {
+--+       listener: (context, state) {
+--+         if (state is LoginSuccessLoaded) {
+--+           Navigator.pop(context); //pop dialog
+--+-          Navigator.push(context,
+--+-              MaterialPageRoute(builder: (context) => const HomePage()));
+--++          Navigator.push(
+--++            context,
+--++            MaterialPageRoute(
+--++              builder: (context) => const HomePage(
+--++                  // folderId: "",
+--++                  ),
+--++            ),
+--++          );
+--+         }
+--+         if (state is LoginFailLoaded) {
+--+           Navigator.pop(context); //pop dialog
+--+diff --git a/lib/presentation/screens/folder_screen.dart b/lib/presentation/screens/folder_screen.dart
+--+index b5ffa57..07c4c00 100644
+--+--- a/lib/presentation/screens/folder_screen.dart
+--++++ b/lib/presentation/screens/folder_screen.dart
+--+@@ -1,34 +1,69 @@
+--+ import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+--+ import 'package:clouddisk_login_form/components/list_items.dart';
+--+-import 'package:clouddisk_login_form/models/item.dart';
+--+ import 'package:flutter/material.dart';
+--+ import 'package:flutter_bloc/flutter_bloc.dart';
+-+ diff --git a/lib/components/list_items.dart b/lib/components/list_items.dart
+-+-index 2df6c65..454ffb3 100644
+-++index 2df6c65..68dfcaf 100644
+-+ --- a/lib/components/list_items.dart
+-+ +++ b/lib/components/list_items.dart
+-+-@@ -1,8 +1,6 @@
+-++@@ -1,11 +1,9 @@
+-+ -import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+-+  import 'package:clouddisk_login_form/components/item_file.dart';
+-+  import 'package:clouddisk_login_form/models/item.dart';
+-+@@ -1393,8 +2252,12 @@ index 2df6c65..454ffb3 100644
+-+ -import 'package:flutter_bloc/flutter_bloc.dart';
+-+  
+-+  class ListItems extends StatefulWidget {
+-+-   final List<Folder> items;
+-+-@@ -21,11 +19,8 @@ class _ListItemsState extends State<ListItems> {
+-++-  final List<Folder> items;
+-+++  final List<Item> items;
+-++   const ListItems({super.key, required this.items});
+- + 
+--+ class FolderScreen extends StatefulWidget {
+--+   const FolderScreen({
+--+     super.key,
+--+-    required this.folders,
+--++    required this.folderId,
+--+   });
+--+-  final List<Folder> folders;
+--++  final String folderId;
+- +   @override
+--+   State<FolderScreen> createState() => _FolderScreenState();
+-++@@ -21,10 +19,13 @@ class _ListItemsState extends State<ListItems> {
+-+              itemBuilder: (context, index) => ItemFile(
+-+                item: widget.items[index],
+-+                onPressed: () {
+-+@@ -1402,27 +2265,79 @@ index 2df6c65..454ffb3 100644
+-+ -                  // BlocProvider.of<FolderTreeBloc>(context).add(
+-+ -                  //   LoadEvent(widget.items[index].id),
+-+ -                  // );
+-+--                }
+-+-+                Navigator.of(context).pushNamed("/folderScreen",
+-+-+                    arguments: widget.items[index].id.toString());
+-+++                if (!widget.items[index].text.contains(".")) {
+-+++                  Navigator.of(context).pushNamed("/folderScreen", arguments: {
+-+++                    "folderId": widget.items[index].id.toString(),
+-+++                    "currentPath": "/${widget.items[index].text}",
+-+++                  });
+-+++                } else {
+-+++                  print("it's file");
+-++                 }
+-+                },
+-+              ),
+-+-           )
+-+ diff --git a/lib/main.dart b/lib/main.dart
+-+-index e311817..dee75d3 100644
+-++index e311817..058833a 100644
+-+ --- a/lib/main.dart
+-+ +++ b/lib/main.dart
+-+-@@ -1,3 +1,4 @@
+-++@@ -1,8 +1,14 @@
+-+ +import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+-+  import 'package:clouddisk_login_form/bloc/login/bloc/login_bloc.dart';
+-+++import 'package:clouddisk_login_form/models/user.dart';
+-+++import 'package:clouddisk_login_form/presentation/pages/home_page/home_page.dart';
+-+  import 'package:clouddisk_login_form/presentation/pages/login_page/login_screen.dart';
+-+++import 'package:clouddisk_login_form/utils/preferences.dart';
+-+  import 'package:flutter/material.dart';
+-+-@@ -36,8 +37,15 @@ class _MyHomePageState extends State<MyHomePage> {
+-++ import 'package:flutter_bloc/flutter_bloc.dart';
+-++ 
+-+++UserPreferences prefs = UserPreferences();
+-+++
+-++ void main() {
+-++   runApp(const MyApp());
+- + }
+-++@@ -32,13 +38,53 @@ class MyHomePage extends StatefulWidget {
+- + 
+--+ class _FolderScreenState extends State<FolderScreen> {
+--++  final FolderTreeBloc folderTreeBloc = FolderTreeBloc();
+-++ class _MyHomePageState extends State<MyHomePage> {
+-++   final LoginBloc loginBloc = LoginBloc();
+-+++  bool hasCookie = true;
+-+++  var session = "";
+-+++  var hmailkey = "";
+-+++  Future getCookie() async {
+-+++    await prefs.getSession().then((value) {
+-+++      session = value;
+-+++    });
+-+++    await prefs.getHmailKey().then((value) {
+-+++      hmailkey = value;
+-+++    });
+-+++  }
+-+++
+- ++  @override
+- ++  void initState() {
+--++    print("FOLDER ID ${widget.folderId}");
+--++    folderTreeBloc.add(LoadEvent(widget.folderId));
+-+++    getCookie().then((value) {
+-+++      setState(() {
+-+++        hasCookie = true;
+-+++      });
+-+++    });
+- ++    super.initState();
+- ++  }
+- ++
+--++  @override
+--++  void dispose() {
+--++    folderTreeBloc.close();
+--++    super.dispose();
+-+++  @override
+-+++  void dispose() {
+-+++    loginBloc.close();
+-+++    super.dispose();
+-+++  }
+-++ 
+-+    @override
+-+    Widget build(BuildContext context) {
+-+++    if (session == "" || hmailkey == "") {
+-+++      hasCookie = false;
+-+++    } else {
+-+++      user.session = session;
+-+++      user.hmailKey = hmailkey;
+-+++    }
+-+      return Scaffold(
+-+ -      body: BlocProvider(
+-+ -        create: (context) => loginBloc,
+-++-        child: const LoginScreen(),
+-+ +      body: MultiBlocProvider(
+-+ +        providers: [
+-+ +          BlocProvider(
+-+@@ -1432,9 +2347,73 @@ index e311817..dee75d3 100644
+-+ +            create: (context) => FolderTreeBloc(),
+-+ +          ),
+-+ +        ],
+-+-         child: const LoginScreen(),
+-+++        child: hasCookie ? const HomePage() : const LoginScreen(),
+-+        ),
+-+      );
+-++   }
+-++diff --git a/lib/models/item.dart b/lib/models/item.dart
+-++index 3e288be..6856a8c 100644
+-++--- a/lib/models/item.dart
+-+++++ b/lib/models/item.dart
+-++@@ -1,15 +1,36 @@
+-++-class Folder {
+-+++import 'package:flutter/cupertino.dart';
+-+++import 'package:flutter/material.dart';
+-+++
+-+++class Item {
+-++   final String id;
+-++   final String text;
+-++-  Folder(
+-++-    this.id,
+-++-    this.text,
+-++-  );
+-+++  Item(this.id, this.text);
+-+++}
+-+++
+-+++class File extends Item {
+-+++  String extension;
+-+++  File(String id, String title, this.extension) : super(id, title);
+-+++}
+-+++
+-+++class Folder extends Item {
+-+++  Color? color;
+-+++  IconData? icon;
+-+++  List<Item> children;
+-+++  Folder(String id, String text, this.color, this.icon, this.children)
+-+++      : super(id, text);
+-+++
+-+++  void addColorandIcon(Color color, IconData icon) {
+-+++    this.color = color;
+-+++    this.icon = icon;
+- ++  }
+--++
+--+   @override
+--+   Widget build(BuildContext context) {
+--+-    return WillPopScope(
+--+-      onWillPop: () async {
+--+-        // BlocProvider.of<FolderTreeBloc>(context).add(const BackEvent());
+--+-        return false;
+--+-      },
+--+-      child: Column(
+--+-        children: [
+--+-          // Text("path"),
+--+-          Expanded(
+--+-            child: ListItems(items: widget.folders),
+--+-          ),
+--+-        ],
+--++    return BlocProvider(
+--++      create: (context) => folderTreeBloc,
+--++      child: BlocBuilder<FolderTreeBloc, FolderTreeState>(
+--++        builder: (context, state) {
+--++          if (state is FolderTreeLoading) {
+--++            return const Center(
+--++              child: CircularProgressIndicator(),
+--++            );
+--++          } else if (state is FolderTreeLoaded) {
+--++            return Scaffold(
+--++              body: Column(
+--++                children: [
+--++                  widget.folderId == ""
+--++                      ? Container()
+--++                      : Container(
+--++                          width: double.infinity,
+--++                          padding:
+--++                              const EdgeInsets.only(left: 4, top: 5, bottom: 5),
+--++                          decoration:
+--++                              BoxDecoration(color: Colors.cyan.shade300),
+--++                          child: const Text(
+--++                            "path",
+--++                            style: TextStyle(fontSize: 16),
+--++                          ),
+--++                        ),
+--++                  Expanded(
+--++                    child: ListItems(items: state.items),
+--++                  ),
+--++                ],
+--++              ),
+--++            );
+--++          }
+--++          return Container();
+--++        },
+--+       ),
+-++ 
+-++   factory Folder.fromJson(Map<String, dynamic> json) {
+-++     return Folder(
+-++       json['id'] as String,
+-++       json['text'] as String,
+-+++      null,
+-+++      null,
+-+++      [],
+- +     );
+- +   }
+--+diff --git a/pubspec.yaml b/pubspec.yaml
+--+index db7d632..52c892c 100644
+--+--- a/pubspec.yaml
+--++++ b/pubspec.yaml
+--+@@ -3,7 +3,7 @@ description: A new Flutter project.
+--+ 
+--+ # The following line prevents the package from being accidentally published to
+--+ # pub.dev using `flutter pub publish`. This is preferred for private packages.
+--+-publish_to: 'none' # Remove this line if you wish to publish to pub.dev
+--++publish_to: "none" # Remove this line if you wish to publish to pub.dev
+--+ 
+--+ # The following defines the version and build number for your application.
+--+ # A version number is three numbers separated by dots, like 1.2.43
+--+@@ -20,7 +20,7 @@ publish_to: 'none' # Remove this line if you wish to publish to pub.dev
+--+ version: 1.0.0+1
+--+ 
+--+ environment:
+--+-  sdk: '>=2.18.5 <3.0.0'
+--++  sdk: ">=2.18.5 <3.0.0"
+- + 
+--+ # Dependencies specify other packages that your package needs in order to work.
+--+ # To automatically upgrade your package dependencies to the latest versions
+--+@@ -32,13 +32,12 @@ dependencies:
+--+   flutter:
+--+     sdk: flutter
+--+ 
+--+-
+--+   # The following adds the Cupertino Icons font to your application.
+--+   # Use with the CupertinoIcons class for iOS style icons.
+--+   cupertino_icons: ^1.0.2
+--+   dio: ^4.0.6
+--+   flutter_bloc: ^8.1.1
+--+-  equatable: 
+--++  equatable:
+--+ dev_dependencies:
+--+   flutter_test:
+--+     sdk: flutter
+--+@@ -55,7 +54,6 @@ dev_dependencies:
+-++@@ -18,4 +39,15 @@ class Folder {
+-++ }
+- + 
+--+ # The following section is specific to Flutter packages.
+--+ flutter:
+-++ List<Folder> folders = [];
+-++-List<Folder> subFolders = [];
+-+++List<Folder> foldersRoot = [];
+-+++
+-+++void addColorandIcon() {
+-+++  foldersRoot[0].addColorandIcon(Colors.blueAccent.shade400, Icons.folder);
+-+++  foldersRoot[1].addColorandIcon(Colors.green.shade900, Icons.cloud_sync);
+-+++  foldersRoot[2].addColorandIcon(Colors.orange.shade400, Icons.snippet_folder);
+-+++  foldersRoot[3].addColorandIcon(Colors.purple.shade800, Icons.share);
+-+++  foldersRoot[4].addColorandIcon(Colors.pink.shade300, Icons.star);
+-+++  foldersRoot[5].addColorandIcon(Colors.brown, Icons.campaign_outlined);
+-+++  foldersRoot[6].addColorandIcon(Colors.teal.shade700, Icons.source);
+-+++  foldersRoot[7].addColorandIcon(Colors.red.shade900, Icons.delete_outline);
+-+++}
+-+ diff --git a/lib/models/login.dart b/lib/models/login.dart
+-+ deleted file mode 100644
+-+ index 9bcd0a5..0000000
+-+@@ -1494,7 +2473,7 @@ index 9bcd0a5..0000000
+-+ -  }
+-+ -}
+-+ diff --git a/lib/presentation/pages/home_page/home_page.dart b/lib/presentation/pages/home_page/home_page.dart
+-+-index 7031ef0..2cc079a 100644
+-++index 7031ef0..58bad7a 100644
+-+ --- a/lib/presentation/pages/home_page/home_page.dart
+-+ +++ b/lib/presentation/pages/home_page/home_page.dart
+-+ @@ -1,34 +1,23 @@
+-+@@ -1523,8 +2502,9 @@ index 7031ef0..2cc079a 100644
+-+ -    folderTreeBloc.add(const LoadEvent(""));
+-+ -    super.initState();
+-+ -  }
+- +-
+--+   # The following line ensures that the Material Icons font is
+--+   # included with your application, so that you can use the icons in
+--+   # the material Icons class.
+--+@@ -63,7 +61,7 @@ flutter:
+-+ +  final navKey = GlobalKey<NavigatorState>();
+-+- 
+-+++  var path = "...";
+-+    @override
+-+    Widget build(BuildContext context) {
+-+ -    getFolderlv2();
+-+@@ -1545,7 +2525,15 @@ index 7031ef0..2cc079a 100644
+-+            title: const Text("Home"),
+-+            actions: [
+-+              Theme(
+-+-@@ -61,24 +52,38 @@ class _HomePageState extends State<HomePage> {
+-++@@ -52,7 +43,6 @@ class _HomePageState extends State<HomePage> {
+-++                 },
+-++                 itemBuilder: ((context) {
+-++                   return [
+-++-                    popupMenuItem("New Folder"),
+-++                     popupMenuItem("Sort"),
+-++                   ];
+-++                 }),
+-++@@ -61,24 +51,50 @@ class _HomePageState extends State<HomePage> {
+-+            ],
+-+          ),
+-+        ),
+-+@@ -1562,6 +2550,10 @@ index 7031ef0..2cc079a 100644
+-+ -              );
+-+ +      body: WillPopScope(
+-+ +        onWillPop: () async {
+-+++          //xóa thằng cuối khi pop
+-+++          var chars = path.split("/");
+-+++          chars.removeLast();
+-+++          path = chars.join("/");
+-+ +          if (navKey.currentState != null) {
+-+ +            if (navKey.currentState!.canPop()) {
+-+ +              navKey.currentState!.pop();
+-+@@ -1577,31 +2569,39 @@ index 7031ef0..2cc079a 100644
+-+ +        child: Navigator(
+-+ +          key: navKey,
+-+ +          onGenerateRoute: (settings) {
+-+-+            Widget page = const FolderScreen(folderId: "");
+-+ +            switch (settings.name) {
+-+ +              case "/":
+-+ +                return MaterialPageRoute(
+-+ +                  settings: settings,
+-+ +                  builder: (context) {
+-+-+                    return const FolderScreen(folderId: "");
+-+++                    return const FolderScreen(
+-+++                      folderId: "",
+-+++                      currentPath: "...",
+-+++                    );
+-+ +                  },
+-+ +                );
+-+ +              case "/folderScreen":
+-+-+                var arguments = settings.arguments as String;
+-+++                var arguments = settings.arguments as Map;
+-+++                var folderId = arguments["folderId"];
+-+++                var currentPath = arguments["currentPath"];
+-+++                path += currentPath;
+-+ +                return MaterialPageRoute(
+-+ +                  settings: settings,
+-+ +                  builder: (context) {
+-+-+                    return FolderScreen(folderId: arguments);
+-+++                    return FolderScreen(
+-+++                      folderId: folderId,
+-+++                      currentPath: path,
+-+++                    );
+-+ +                  },
+-+ +                );
+-+              }
+-+ -            return Container();
+-+-+            return MaterialPageRoute(builder: (_) => page);
+-+++            return null;
+-+            },
+-+          ),
+-+        ),
+-+ diff --git a/lib/presentation/pages/login_page/login_screen.dart b/lib/presentation/pages/login_page/login_screen.dart
+-+-index be78863..e27cca2 100644
+-++index be78863..484bba0 100644
+-+ --- a/lib/presentation/pages/login_page/login_screen.dart
+-+ +++ b/lib/presentation/pages/login_page/login_screen.dart
+-+ @@ -1,8 +1,7 @@
+-+@@ -1614,7 +2614,7 @@ index be78863..e27cca2 100644
+-+  import 'package:clouddisk_login_form/presentation/pages/home_page/home_page.dart';
+-+  import 'package:flutter/material.dart';
+-+  import 'package:flutter_bloc/flutter_bloc.dart';
+-+-@@ -52,8 +51,14 @@ class _LoginScreenState extends State<LoginScreen> {
+-++@@ -52,8 +51,12 @@ class _LoginScreenState extends State<LoginScreen> {
+-+        listener: (context, state) {
+-+          if (state is LoginSuccessLoaded) {
+-+            Navigator.pop(context); //pop dialog
+-+@@ -1623,19 +2623,17 @@ index be78863..e27cca2 100644
+-+ +          Navigator.push(
+-+ +            context,
+-+ +            MaterialPageRoute(
+-+-+              builder: (context) => const HomePage(
+-+-+                  // folderId: "",
+-+-+                  ),
+-+++              builder: (context) => const HomePage(),
+-+ +            ),
+-+ +          );
+-+          }
+-+          if (state is LoginFailLoaded) {
+-+            Navigator.pop(context); //pop dialog
+-+ diff --git a/lib/presentation/screens/folder_screen.dart b/lib/presentation/screens/folder_screen.dart
+-+-index b5ffa57..07c4c00 100644
+-++index b5ffa57..2d91906 100644
+-+ --- a/lib/presentation/screens/folder_screen.dart
+-+ +++ b/lib/presentation/screens/folder_screen.dart
+-+-@@ -1,34 +1,69 @@
+-++@@ -1,34 +1,70 @@
+-+  import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+-+  import 'package:clouddisk_login_form/components/list_items.dart';
+-+ -import 'package:clouddisk_login_form/models/item.dart';
+-+@@ -1647,9 +2645,11 @@ index b5ffa57..07c4c00 100644
+-+      super.key,
+-+ -    required this.folders,
+-+ +    required this.folderId,
+-+++    required this.currentPath,
+-+    });
+-+ -  final List<Folder> folders;
+-+ +  final String folderId;
+-+++  final String currentPath;
+-+    @override
+-+    State<FolderScreen> createState() => _FolderScreenState();
+-+  }
+-+@@ -1658,7 +2658,6 @@ index b5ffa57..07c4c00 100644
+-+ +  final FolderTreeBloc folderTreeBloc = FolderTreeBloc();
+-+ +  @override
+-+ +  void initState() {
+-+-+    print("FOLDER ID ${widget.folderId}");
+-+ +    folderTreeBloc.add(LoadEvent(widget.folderId));
+-+ +    super.initState();
+-+ +  }
+-+@@ -1703,9 +2702,9 @@ index b5ffa57..07c4c00 100644
+-+ +                              const EdgeInsets.only(left: 4, top: 5, bottom: 5),
+-+ +                          decoration:
+-+ +                              BoxDecoration(color: Colors.cyan.shade300),
+-+-+                          child: const Text(
+-+-+                            "path",
+-+-+                            style: TextStyle(fontSize: 16),
+-+++                          child: Text(
+-+++                            widget.currentPath,
+-+++                            style: const TextStyle(fontSize: 16),
+-+ +                          ),
+-+ +                        ),
+-+ +                  Expanded(
+-+@@ -1720,8 +2719,235 @@ index b5ffa57..07c4c00 100644
+-+        ),
+-+      );
+-+    }
+-++diff --git a/lib/utils/preferences.dart b/lib/utils/preferences.dart
+-++new file mode 100644
+-++index 0000000..f0552ac
+-++--- /dev/null
+-+++++ b/lib/utils/preferences.dart
+-++@@ -0,0 +1,23 @@
+-+++import 'package:shared_preferences/shared_preferences.dart';
+-+++
+-+++class UserPreferences {
+-+++  Future setSession(String session) async {
+-+++    SharedPreferences preferences = await SharedPreferences.getInstance();
+-+++    preferences.setString("session", session);
+-+++  }
+-+++
+-+++  Future<String> getSession() async {
+-+++    SharedPreferences preferences = await SharedPreferences.getInstance();
+-+++    return preferences.getString("session") ?? "";
+-+++  }
+-+++
+-+++  Future setHmailKey(String hmailkey) async {
+-+++    SharedPreferences preferences = await SharedPreferences.getInstance();
+-+++    preferences.setString("hmail_key", hmailkey);
+-+++  }
+-+++
+-+++  Future<String> getHmailKey() async {
+-+++    SharedPreferences preferences = await SharedPreferences.getInstance();
+-+++    return preferences.getString("hmail_key") ?? "";
+-+++  }
+-+++}
+-++diff --git a/macos/Flutter/GeneratedPluginRegistrant.swift b/macos/Flutter/GeneratedPluginRegistrant.swift
+-++index cccf817..287b6a9 100644
+-++--- a/macos/Flutter/GeneratedPluginRegistrant.swift
+-+++++ b/macos/Flutter/GeneratedPluginRegistrant.swift
+-++@@ -5,6 +5,8 @@
+-++ import FlutterMacOS
+-++ import Foundation
+- + 
+--+   # To add assets to your application, add an assets section, like this:
+--+   assets:
+--+-  - assets/images/
+--++    - assets/images/
+--+   #   - images/a_dot_burr.jpeg
+--+   #   - images/a_dot_ham.jpeg
+-+++import shared_preferences_macos
+- + 
+--diff --git a/lib/api/api_header.dart b/lib/api/api_header.dart
+--new file mode 100644
+--index 0000000..1ac93d0
+----- /dev/null
+--+++ b/lib/api/api_header.dart
+--@@ -0,0 +1,29 @@
+--+//header của login
+--+import 'package:clouddisk_login_form/models/user.dart';
+--+
+--+final loginHeader = {
+--+  "Content-Type": "application/x-www-form-urlencoded",
+--+  'APP_TYPE': 'clouddisk',
+--+  'App-Type': 'clouddisk',
+--+  'app-type': 'clouddisk',
+--+  'DEVICE_TYPE': 'android',
+--+  'device-type': 'android',
+--+  'Device-Type': 'android',
+--+  'DEVICE': 'phone',
+--+  'device': 'phone',
+--+  'device_id': '1e10f743-196e-4bc0-aee7-8c14690f2ac4',
+--+  'X-REQUESTED-WITH': 'XMLHttpRequest',
+--+  "User_Agent": "Android 1.66 APP_HANBIRO_2.0.0.2",
+--+  "Cookie":
+--+      ";HANBIRO_GW=010254fedc4eaa12683367c2601053f919d8fd28b35cfd8c2f42173ed918e48eb9ab17480894076ec3ad7e268176e6b3;hmail_key=33b0cd76a231a3a0a6e247d814c23f9a;cook=kie",
+--+};
+--+List<String> cookie = [
+--+  ";HANBIRO_GW=${user.session}",
+--+  "hmail_key=${user.hmailKey}",
+--+  "cook=kie",
+--+];
+--+
+--+//header của getFolder
+--+final folderHeader = {
+--+  "Cookie": cookie.join(";"),
+--+};
+--diff --git a/lib/api/api_service.dart b/lib/api/api_service.dart
+--new file mode 100644
+--index 0000000..911edce
+----- /dev/null
+--+++ b/lib/api/api_service.dart
+--@@ -0,0 +1,28 @@
+--+import 'package:dio/dio.dart';
+--+
+--+class AuthApi {
+--+  final Dio _dio = Dio();
+--+  Future<String> get(url, Map<String, dynamic>? header) async {
+--+    var response = await _dio.get(
+--+      url,
+--+      options: Options(
+--+        headers: header,
+--+      ),
+--+    );
+--+    var responseData = response.data;
+--+    return responseData;
+--+  }
+--+
+--+  Future<Map> post(url, Map req, Map<String, dynamic>? header) async {
+--+    var response = await _dio.post(
+--+      url,
+--+      data: req,
+--+      options: Options(
+--+        headers: header,
+--+      ),
+--+    );
+--+    var responseData = response.data;
+--+
+--+    return responseData;
+--+  }
+--+}
+--diff --git a/lib/api/api_url.dart b/lib/api/api_url.dart
+--new file mode 100644
+--index 0000000..bb797ab
+----- /dev/null
+--+++ b/lib/api/api_url.dart
+--@@ -0,0 +1,6 @@
+--+const baseUrl = "https://groupware57.hanbiro.net";
+--+const loginUrl = "$baseUrl/ngw/sign/auth?is_checking_otp=1";
+--+
+--+String getFolderUrl(String type, String id) {
+--+  return "$baseUrl/cloud/api/get.php?type=$type&id=$id";
+--+}
+--diff --git a/lib/api/auth.dart b/lib/api/auth.dart
+--deleted file mode 100644
+--index fa16976..0000000
+----- a/lib/api/auth.dart
+--+++ /dev/null
+--@@ -1,71 +0,0 @@
+---// ignore: depend_on_referenced_packages
+---import 'package:clouddisk_login_form/models/user.dart';
+---import 'package:dio/dio.dart';
+---
+---const baseUrl = "https://groupware57.hanbiro.net";
+---const loginUrl = "$baseUrl/ngw/sign/auth?is_checking_otp=1";
+---const getFolderUrl = "$baseUrl/cloud/api/get.php?access=1&type=dir";
+---//header của login
+---final loginHeader = {
+---  "Content-Type": "application/x-www-form-urlencoded",
+---  'APP_TYPE': 'clouddisk',
+---  'App-Type': 'clouddisk',
+---  'app-type': 'clouddisk',
+---  'DEVICE_TYPE': 'android',
+---  'device-type': 'android',
+---  'Device-Type': 'android',
+---  'DEVICE': 'phone',
+---  'device': 'phone',
+---  'device_id': '1e10f743-196e-4bc0-aee7-8c14690f2ac4',
+---  'X-REQUESTED-WITH': 'XMLHttpRequest',
+---  "User_Agent": "Android 1.66 APP_HANBIRO_2.0.0.2",
+---  "Cookie":
+---      ";HANBIRO_GW=010254fedc4eaa12683367c2601053f919d8fd28b35cfd8c2f42173ed918e48eb9ab17480894076ec3ad7e268176e6b3;hmail_key=33b0cd76a231a3a0a6e247d814c23f9a;cook=kie",
+---};
+---List<String> cookie = [
+---  ";HANBIRO_GW=${user.session}",
+---  "hmail_key=${user.hmailKey}",
+---  "cook=kie",
+---];
+---
+---//header của getFolder
+---final folderHeader = {
+---  "Cookie": cookie.join(";"),
+---};
+---
+---class AuthApi {
+---  final Dio _dio = Dio();
+---  Future<String> get(url, Map<String, dynamic>? header) async {
+---    var response = await _dio.get(
+---      url,
+---      options: Options(
+---        headers: header,
+---      ),
+---    );
+---    var responseData = response.data;
+---    return responseData;
+---  }
+---
+---  Future<Map> post(url, Map req, Map<String, dynamic>? header) async {
+---    var response = await _dio.post(
+---      url,
+---      data: req,
+---      options: Options(
+---        headers: header,
+---      ),
+---    );
+---    var responseData = response.data;
+---
+---    return responseData;
+---  }
+---}
+---
+---Future getFolderlv2() async {
+---  AuthApi api = AuthApi();
+---
+---  String url =
+---      "https://groupware57.hanbiro.net/cloud/api/get.php?cache=false&id=my&type=file";
+---  var resp = await api.get(url, folderHeader);
+---  // ignore: unnecessary_type_check
+---  print(resp);
+---}
+--diff --git a/lib/api/request/login_req.dart b/lib/api/request/login_req.dart
+--new file mode 100644
+--index 0000000..178c313
+----- /dev/null
+--+++ b/lib/api/request/login_req.dart
+--@@ -0,0 +1,26 @@
+--+class LogInRequest {
+--+  final String gwid;
+--+  final String gwpass;
+--+  final String model;
+--+  final String code;
+--+  final String deviceid;
+--+  LogInRequest(this.gwid, this.gwpass, this.model, this.code, this.deviceid);
+--+
+--+  Map getMap() {
+--+    return {
+--+      'gw_id': gwid,
+--+      'gw_pass': gwpass,
+--+      'model': model,
+--+      'code': code,
+--+      'device_id': deviceid
+--+    };
+--+  }
+--+}
+--+
+--+final LogInRequest logInRequest = LogInRequest(
+--+  "jai1nXEjw8N7Akxof9UYIfp6hW5YFmlO2cGKkLlFr3zxC+mr8q6ZRXWhUysoSQkYqJXD7eFpg9ypOeREIDrHdbgyA6eIUvo6yhPN4K2FuWIkL+xQQGTCvZmXisxeJXkfmJO1i6VJ47aBZMooPoWEdMJag3/RqqXqY+iiECx8RLk=",
+--+  "Kp6mUKz3HFav6GaceGbXz0Yb+5cg68SavnTP/avUEv2O2SmJ04mG1/9LcZKT8G19XQ9zGzOwYl7gd/ID408lDfx/MLSvYhPuZV+X9C4Da16Dk1q16MEG22GjjutWKqSYAkXBz1ftQhGuWtEUMOHu0XklnrDQYWEAqA8nOsK+gv4=",
+--+  "samsung SM-N970F",
+--+  "212970",
+--+  "2eaba74b-e0b5-49cb-b9ab-f9630845d43b",
+--+);
+--diff --git a/lib/api/response/login_res.dart b/lib/api/response/login_res.dart
+--new file mode 100644
+--index 0000000..45355da
+----- /dev/null
+--+++ b/lib/api/response/login_res.dart
+--@@ -0,0 +1,21 @@
+--+class LogInResponse {
+--+  late bool success;
+--+  late final String? msg;
+--+  late String session;
+--+  late String hmailkey;
+--+  LogInResponse(Map map) {
+--+    success = map["success"];
+--+    msg = map["msg"];
+--+    session = map["session"];
+--+    hmailkey = map["hmail_key"];
+--+  }
+--+
+--+  Map getMap() {
+--+    return {
+--+      "success": success,
+--+      "msg": msg,
+--+      "session": session,
+--+      "hmail_key": hmailkey,
+--+    };
+--+  }
+--+}
+-++ func RegisterGeneratedPlugins(registry: FlutterPluginRegistry) {
+-+++  SharedPreferencesPlugin.register(with: registry.registrar(forPlugin: "SharedPreferencesPlugin"))
+-++ }
+-++diff --git a/pubspec.lock b/pubspec.lock
+-++index 0ecf786..23927e5 100644
+-++--- a/pubspec.lock
+-+++++ b/pubspec.lock
+-++@@ -71,6 +71,20 @@ packages:
+-++       url: "https://pub.dartlang.org"
+-++     source: hosted
+-++     version: "1.3.1"
+-+++  ffi:
+-+++    dependency: transitive
+-+++    description:
+-+++      name: ffi
+-+++      url: "https://pub.dartlang.org"
+-+++    source: hosted
+-+++    version: "2.0.1"
+-+++  file:
+-+++    dependency: transitive
+-+++    description:
+-+++      name: file
+-+++      url: "https://pub.dartlang.org"
+-+++    source: hosted
+-+++    version: "6.1.4"
+-++   flutter:
+-++     dependency: "direct main"
+-++     description: flutter
+-++@@ -95,6 +109,11 @@ packages:
+-++     description: flutter
+-++     source: sdk
+-++     version: "0.0.0"
+-+++  flutter_web_plugins:
+-+++    dependency: transitive
+-+++    description: flutter
+-+++    source: sdk
+-+++    version: "0.0.0"
+-++   http_parser:
+-++     dependency: transitive
+-++     description:
+-++@@ -102,6 +121,13 @@ packages:
+-++       url: "https://pub.dartlang.org"
+-++     source: hosted
+-++     version: "4.0.2"
+-+++  js:
+-+++    dependency: transitive
+-+++    description:
+-+++      name: js
+-+++      url: "https://pub.dartlang.org"
+-+++    source: hosted
+-+++    version: "0.6.4"
+-++   lints:
+-++     dependency: transitive
+-++     description:
+-++@@ -144,6 +170,48 @@ packages:
+-++       url: "https://pub.dartlang.org"
+-++     source: hosted
+-++     version: "1.8.2"
+-+++  path_provider_linux:
+-+++    dependency: transitive
+-+++    description:
+-+++      name: path_provider_linux
+-+++      url: "https://pub.dartlang.org"
+-+++    source: hosted
+-+++    version: "2.1.7"
+-+++  path_provider_platform_interface:
+-+++    dependency: transitive
+-+++    description:
+-+++      name: path_provider_platform_interface
+-+++      url: "https://pub.dartlang.org"
+-+++    source: hosted
+-+++    version: "2.0.5"
+-+++  path_provider_windows:
+-+++    dependency: transitive
+-+++    description:
+-+++      name: path_provider_windows
+-+++      url: "https://pub.dartlang.org"
+-+++    source: hosted
+-+++    version: "2.1.3"
+-+++  platform:
+-+++    dependency: transitive
+-+++    description:
+-+++      name: platform
+-+++      url: "https://pub.dartlang.org"
+-+++    source: hosted
+-+++    version: "3.1.0"
+-+++  plugin_platform_interface:
+-+++    dependency: transitive
+-+++    description:
+-+++      name: plugin_platform_interface
+-+++      url: "https://pub.dartlang.org"
+-+++    source: hosted
+-+++    version: "2.1.3"
+-+++  process:
+-+++    dependency: transitive
+-+++    description:
+-+++      name: process
+-+++      url: "https://pub.dartlang.org"
+-+++    source: hosted
+-+++    version: "4.2.4"
+-++   provider:
+-++     dependency: transitive
+-++     description:
+-++@@ -151,6 +219,62 @@ packages:
+-++       url: "https://pub.dartlang.org"
+-++     source: hosted
+-++     version: "6.0.4"
+-+++  shared_preferences:
+-+++    dependency: "direct main"
+-+++    description:
+-+++      name: shared_preferences
+-+++      url: "https://pub.dartlang.org"
+-+++    source: hosted
+-+++    version: "2.0.15"
+-+++  shared_preferences_android:
+-+++    dependency: transitive
+-+++    description:
+-+++      name: shared_preferences_android
+-+++      url: "https://pub.dartlang.org"
+-+++    source: hosted
+-+++    version: "2.0.14"
+-+++  shared_preferences_ios:
+-+++    dependency: transitive
+-+++    description:
+-+++      name: shared_preferences_ios
+-+++      url: "https://pub.dartlang.org"
+-+++    source: hosted
+-+++    version: "2.1.1"
+-+++  shared_preferences_linux:
+-+++    dependency: transitive
+-+++    description:
+-+++      name: shared_preferences_linux
+-+++      url: "https://pub.dartlang.org"
+-+++    source: hosted
+-+++    version: "2.1.2"
+-+++  shared_preferences_macos:
+-+++    dependency: transitive
+-+++    description:
+-+++      name: shared_preferences_macos
+-+++      url: "https://pub.dartlang.org"
+-+++    source: hosted
+-+++    version: "2.0.4"
+-+++  shared_preferences_platform_interface:
+-+++    dependency: transitive
+-+++    description:
+-+++      name: shared_preferences_platform_interface
+-+++      url: "https://pub.dartlang.org"
+-+++    source: hosted
+-+++    version: "2.1.0"
+-+++  shared_preferences_web:
+-+++    dependency: transitive
+-+++    description:
+-+++      name: shared_preferences_web
+-+++      url: "https://pub.dartlang.org"
+-+++    source: hosted
+-+++    version: "2.0.4"
+-+++  shared_preferences_windows:
+-+++    dependency: transitive
+-+++    description:
+-+++      name: shared_preferences_windows
+-+++      url: "https://pub.dartlang.org"
+-+++    source: hosted
+-+++    version: "2.1.2"
+-++   sky_engine:
+-++     dependency: transitive
+-++     description: flutter
+-++@@ -212,6 +336,20 @@ packages:
+-++       url: "https://pub.dartlang.org"
+-++     source: hosted
+-++     version: "2.1.2"
+-+++  win32:
+-+++    dependency: transitive
+-+++    description:
+-+++      name: win32
+-+++      url: "https://pub.dartlang.org"
+-+++    source: hosted
+-+++    version: "3.1.2"
+-+++  xdg_directories:
+-+++    dependency: transitive
+-+++    description:
+-+++      name: xdg_directories
+-+++      url: "https://pub.dartlang.org"
+-+++    source: hosted
+-+++    version: "0.2.0+2"
+-++ sdks:
+-++   dart: ">=2.18.5 <3.0.0"
+-++-  flutter: ">=1.16.0"
+-+++  flutter: ">=3.0.0"
+-+ diff --git a/pubspec.yaml b/pubspec.yaml
+-+-index db7d632..52c892c 100644
+-++index db7d632..fee9a9c 100644
+-+ --- a/pubspec.yaml
+-+ +++ b/pubspec.yaml
+-+ @@ -3,7 +3,7 @@ description: A new Flutter project.
+-+@@ -1742,7 +2968,7 @@ index db7d632..52c892c 100644
+-+  
+-+  # Dependencies specify other packages that your package needs in order to work.
+-+  # To automatically upgrade your package dependencies to the latest versions
+-+-@@ -32,13 +32,12 @@ dependencies:
+-++@@ -32,13 +32,13 @@ dependencies:
+-+    flutter:
+-+      sdk: flutter
+-+  
+-+@@ -1754,10 +2980,11 @@ index db7d632..52c892c 100644
+-+    flutter_bloc: ^8.1.1
+-+ -  equatable: 
+-+ +  equatable:
+-+++  shared_preferences: ^2.0.15
+-+  dev_dependencies:
+-+    flutter_test:
+-+      sdk: flutter
+-+-@@ -55,7 +54,6 @@ dev_dependencies:
+-++@@ -55,7 +55,6 @@ dev_dependencies:
+-+  
+-+  # The following section is specific to Flutter packages.
+-+  flutter:
+-+@@ -1765,7 +2992,7 @@ index db7d632..52c892c 100644
+-+    # The following line ensures that the Material Icons font is
+-+    # included with your application, so that you can use the icons in
+-+    # the material Icons class.
+-+-@@ -63,7 +61,7 @@ flutter:
+-++@@ -63,7 +62,7 @@ flutter:
+-+  
+-+    # To add assets to your application, add an assets section, like this:
+-+    assets:
+- diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+--index 2e25020..efc9413 100644
+-+index efc9413..e4d3ae5 100644
+- --- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+- +++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+--@@ -1,8 +1,11 @@
+-- // ignore: depend_on_referenced_packages
+-- import 'dart:convert';
+-- 
+--+// ignore: depend_on_referenced_packages
+-- import 'package:bloc/bloc.dart';
+---import 'package:clouddisk_login_form/api/auth.dart';
+--+import 'package:clouddisk_login_form/api/api_header.dart';
+--+import 'package:clouddisk_login_form/api/api_url.dart';
+--+import 'package:clouddisk_login_form/api/api_service.dart';
+-+@@ -9,6 +9,7 @@ import 'package:clouddisk_login_form/api/api_service.dart';
+-  import 'package:equatable/equatable.dart';
+-  
+-  import 'package:clouddisk_login_form/models/item.dart';
+--@@ -11,52 +14,38 @@ part 'folder_tree_event.dart';
+-- part 'folder_tree_state.dart';
+-++import 'package:flutter/material.dart';
+-  
+-- class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
+---  // List<int> ids = []; // Tạo một list gồm những id
+--   AuthApi api = AuthApi();
+---
+-+ part 'folder_tree_event.dart';
+-+ part 'folder_tree_state.dart';
+-+@@ -18,32 +19,29 @@ class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
+-    FolderTreeBloc() : super(FolderTreeInitial()) {
+-      on<FolderTreeEvent>((event, emit) async {
+-        if (event is LoadEvent) {
+-++        folders = [];
+-          emit(FolderTreeLoading());
+--+        final resp =
+--+            await api.get(getFolderUrl("file", event.id), folderHeader);
+--+        final json = jsonDecode(resp);
+--+        final List folderList = json["files"];
+--+        folders = folderList
+--+            .map((folderJson) => Folder.fromJson(folderJson))
+--+            .toList();
+--+        if (event.id == "") {
+--+          foldersRoot = folders;
+--+          addColorandIcon();
+--+        }
+--+        // else {
+--+        //   late var folder;
+--+        //   for (Item f in folders) {
+--+        //     for (Folder f2 in foldersRoot) {
+--+        //       if (f2.id == event.id) {
+--+        //         folder = f2;
+--+        //         break;
+--+        //       }
+--+        //     }
+--+        //     if (f is Folder) {
+-- 
+---        // final id = event.id;
+---        // for (Folder folder in folders) {
+---        //   if (folder.id == id) {
+---        // ids.add(id); // Lưu những id đã đi qua vào ids
+---        final resp = await api.get(getFolderUrl, folderHeader);
+---        final json = jsonDecode(resp) as List;
+---        folders =
+---            json.map((folderJson) => Folder.fromJson(folderJson)).toList();
+---        emit(FolderTreeLoaded(folders));
+-++        print(1);
+-+         final resp =
+-+             await api.get(getFolderUrl("file", event.id), folderHeader);
+-+         final json = jsonDecode(resp);
+-+-        final List folderList = json["files"];
+-+-        folders = folderList
+-+-            .map((folderJson) => Folder.fromJson(folderJson))
+-+-            .toList();
+-++        final List itemList = json["files"];
+-++        print(2);
+-++
+-++        folders =
+-++            itemList.map((folderJson) => Folder.fromJson(folderJson)).toList();
+-++        print(3);
+-+         if (event.id == "") {
+-+           foldersRoot = folders;
+-++          print(4);
+-++
+-+           addColorandIcon();
+-++        } else {
+-++          for (var element in folders) {
+-++            print("${element.regdate} ....${element.size}");
+-++            element.addColorandIcon(Colors.indigo, Icons.folder);
+-++          }
+-+         }
+-+-        // else {
+-+-        //   late var folder;
+-+-        //   for (Item f in folders) {
+-+-        //     for (Folder f2 in foldersRoot) {
+-+-        //       if (f2.id == event.id) {
+-+-        //         folder = f2;
+-+-        //         break;
+-+-        //       }
+-+-        //     }
+-+-        //     if (f is Folder) {
+- -
+---        // emit(FolderTreeLoaded(folder.children));
+---        //     break;
+--+        //     }
+--         //   }
+--         // }
+--+        emit(FolderTreeLoaded(folders));
+-+-        //     }
+-+-        //   }
+-+-        // }
+-+         emit(FolderTreeLoaded(folders));
+-        }
+---      // if (event is BackEvent) {
+---      //   emit(FolderTreeLoading());
+---      //   //ids.last tức là id của folder đang hiển thị
+---      //   if (ids.last != 0) {
+---      //     //nếu folder đang hiển thị không phải folder gốc thì sẽ xóa nó đi
+---      //     ids.removeLast();
+---      //   } else {
+---      //     // nếu đang ở folder gốc thì clear toàn bộ ids và gán phần tử đầu tiên là folder gốc
+---      //     ids.clear();
+---      //     ids.add(0);
+---      //   }
+---      //   final preId = ids[ids.length - 1];
+---      //   //preId lưu trữ id của folder trước folder hiện tại, nếu id đang = 0 thì ids chỉ có mỗi một phần tử là 0, vì đã clear ở trên
+---      //   for (Folder folder in folders) {
+---      //     if (folder.id == preId) {
+---      //       await Future.delayed(const Duration(seconds: 1), () {
+---      //         //Tạo cảm giác load data
+---      //         emit(FolderTreeLoaded(folder.children));
+---      //       });
+---      //       break;
+---      //     }
+---      //   }
+---      // }
+-      });
+--   }
+-- }
+--diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
+--index 9784692..7541c81 100644
+----- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
+--+++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
+--@@ -15,9 +15,6 @@ class LoadEvent extends FolderTreeEvent {
+--   List<Object> get props => [id];
+-- }
+-- 
+---// class BackEvent extends FolderTreeEvent {
+---//   const BackEvent();
+---
+---//   @override
+---//   List<Object> get props => [];
+---// }
+--+class BackEvent extends FolderTreeEvent {
+--+  const BackEvent();
+--+}
+--diff --git a/lib/bloc/login/bloc/login_bloc.dart b/lib/bloc/login/bloc/login_bloc.dart
+--index c8c83ae..ae8bd59 100644
+----- a/lib/bloc/login/bloc/login_bloc.dart
+--+++ b/lib/bloc/login/bloc/login_bloc.dart
+--@@ -1,10 +1,14 @@
+-- // ignore: depend_on_referenced_packages
+-- import 'package:bloc/bloc.dart';
+--+import 'package:clouddisk_login_form/api/api_header.dart';
+--+import 'package:clouddisk_login_form/api/api_url.dart';
+--+import 'package:clouddisk_login_form/api/request/login_req.dart';
+--+import 'package:clouddisk_login_form/api/response/login_res.dart';
+--+import 'package:clouddisk_login_form/main.dart';
+-- import 'package:clouddisk_login_form/models/user.dart';
+-- import 'package:equatable/equatable.dart';
+-- 
+---import 'package:clouddisk_login_form/api/auth.dart';
+---import 'package:clouddisk_login_form/models/login.dart';
+--+import 'package:clouddisk_login_form/api/api_service.dart';
+-- 
+-- part 'login_event.dart';
+-- part 'login_state.dart';
+--@@ -20,6 +24,8 @@ class LoginBloc extends Bloc<LoginEvent, LoginState> {
+--         if (loginRes.success == true) {
+--           user.hmailKey = loginRes.hmailkey;
+--           user.session = loginRes.session;
+--+          prefs.setSession(user.session); //save session vào preference
+--+          prefs.setHmailKey(user.hmailKey); //save hmailKey vào preference
+--           emit(LoginSuccessLoaded(loginRes));
+--         } else {
+--           emit(const LoginFailLoaded("Không đăng nhập được"));
+- diff --git a/lib/components/item_file.dart b/lib/components/item_file.dart
+--index 3476abc..170a0e9 100644
+-+index 170a0e9..f55ac60 100644
+- --- a/lib/components/item_file.dart
+- +++ b/lib/components/item_file.dart
+--@@ -1,8 +1,8 @@
+-+@@ -1,10 +1,11 @@
+-++import 'package:clouddisk_login_form/global_variable/global_variable.dart';
+-++import 'package:clouddisk_login_form/icons/app_icons.dart';
+-  import 'package:clouddisk_login_form/models/item.dart';
+-  import 'package:flutter/material.dart';
+-  
+---class ItemFile extends StatelessWidget {
+---  final Folder item;
+--+class ItemFile extends StatefulWidget {
+--+  final Item item;
+--   final VoidCallback onPressed;
+-- 
+-+ class ItemFile extends StatefulWidget {
+-+-  final Item item;
+-+-  final VoidCallback onPressed;
+-+-
+-++  final Folder item;
+-++  final Function(bool) onPressed;
+-    const ItemFile({
+--@@ -11,14 +11,20 @@ class ItemFile extends StatelessWidget {
+--     required this.onPressed,
+--   });
+-+     super.key,
+-+     required this.item,
+-+@@ -16,39 +17,115 @@ class ItemFile extends StatefulWidget {
+-+ }
+-  
+-+ class _ItemFileState extends State<ItemFile> {
+-+-  bool? check1 = false;
+-++  bool isChecked = false;
+-++  late IconData iconData;
+- +  @override
+--+  State<ItemFile> createState() => _ItemFileState();
+--+}
+-++  void initState() {
+-++    if (mapChecked[widget.item.id] == true) {
+-++      setState(() {
+-++        isChecked = true;
+-++      });
+-++    }
+-++    if (widget.item.type == "file") {
+-++      final List<String> text = widget.item.text.split(".");
+-++      switch (text.last) {
+-++        case "doc":
+-++          iconData = AppIcon.fileWord;
+-++          break;
+-++        case "docx":
+-++          iconData = AppIcon.fileWord;
+-++          break;
+-++        case "ppt":
+-++          iconData = AppIcon.filePowerpoint;
+-++          break;
+-++        case "pptx":
+-++          iconData = AppIcon.filePowerpoint;
+-++          break;
+-++        case "xls":
+-++          iconData = AppIcon.fileExcel;
+-++          break;
+-++        case "xlsx":
+-++          iconData = AppIcon.fileExcel;
+-++          break;
+-++        case "zip":
+-++          iconData = AppIcon.fileArchive;
+-++          break;
+-++        case "pdf":
+-++          iconData = AppIcon.filePdf;
+-++          break;
+-++        case "mp3":
+-++          iconData = AppIcon.fileAudio;
+-++          break;
+-++        case "mp4":
+-++          iconData = AppIcon.fileVideo;
+-++          break;
+-++        case "jpg":
+-++          iconData = AppIcon.fileImage;
+-++          break;
+-++        case "png":
+-++          iconData = AppIcon.fileImage;
+-++          break;
+-++        default:
+-++          iconData = AppIcon.docText;
+-++      }
+-++    }
+-++    super.initState();
+-++  }
+- +
+--+class _ItemFileState extends State<ItemFile> {
+--+  bool? check1 = false;
+-    @override
+-    Widget build(BuildContext context) {
+-      return InkWell(
+-        onTap: () {
+---        onPressed();
+--+        widget.onPressed();
+-+-        widget.onPressed();
+-++        if (widget.item.type == "file") {
+-++          setState(() {
+-++            isChecked = !isChecked;
+-++            if (isChecked) {
+-++              mapChecked.addAll({widget.item.id: true});
+-++            } else {
+-++              mapChecked.remove(widget.item.id);
+-++            }
+-++          });
+-++        }
+-++        widget.onPressed(isChecked);
+-        },
+-        child: Container(
+---        padding: const EdgeInsets.only(top: 16, bottom: 16, left: 16),
+--+        padding: const EdgeInsets.only(top: 10, bottom: 10, left: 12),
+-+         padding: const EdgeInsets.only(top: 10, bottom: 10, left: 12),
+-          decoration: BoxDecoration(
+-              border: Border(
+-            bottom: BorderSide(
+--@@ -27,27 +33,30 @@ class ItemFile extends StatelessWidget {
+-+-            color: Colors.grey.shade400,
+-++            color: Colors.grey.shade300,
+-+           ),
+-          )),
+-          child: Row(
+-            children: [
+---            // Container(
+---            //   padding: const EdgeInsets.all(4),
+---            //   decoration: BoxDecoration(
+---            //     // borderRadius: BorderRadius.circular(12),
+---            //     shape: BoxShape.circle,
+---            //     // color: item is Folder ? ((item as Folder).color) : null,
+---            //   ),
+---            //   child: item is Folder
+---            //       ? Icon(
+---            //           (item as Folder).icon,
+---            //           color: Colors.white,
+---            //           size: 20,
+---            //         )
+---            //       : null,
+---            // ),
+--+            Container(
+--+              padding: const EdgeInsets.all(8),
+--+              decoration: BoxDecoration(
+--+                shape: BoxShape.circle,
+--+                color: widget.item is Folder
+--+                    ? ((widget.item as Folder).color)
+--+                    : null,
+--+              ),
+--+              child: widget.item is Folder
+--+                  ? Icon(
+--+                      (widget.item as Folder).icon,
+-+-            Container(
+-+-              padding: const EdgeInsets.all(8),
+-+-              decoration: BoxDecoration(
+-+-                shape: BoxShape.circle,
+-+-                color: widget.item is Folder
+-+-                    ? ((widget.item as Folder).color)
+-+-                    : null,
+-+-              ),
+-+-              child: widget.item is Folder
+-+-                  ? Icon(
+-+-                      (widget.item as Folder).icon,
+-++            widget.item.type == "dir"
+-++                ? Container(
+-++                    padding: const EdgeInsets.all(8),
+-++                    decoration: BoxDecoration(
+-++                      shape: BoxShape.circle,
+-++                      color: widget.item.color,
+-++                    ),
+-++                    child: Icon(
+-++                      widget.item.icon,
+-+                       color: Colors.white,
+-+-                      size: 26,
+-+-                    )
+-+-                  : null,
+-+-            ),
+-++                      size: 24,
+-++                    ),
+-++                  )
+-++                : Container(
+-++                    // width: 55,
+-++                    padding: const EdgeInsets.all(8),
+-++                    decoration: BoxDecoration(
+-++                      shape: BoxShape.rectangle,
+-++                      color: Colors.grey.shade400,
+-++                      borderRadius: const BorderRadius.all(
+-++                        Radius.circular(5),
+-++                      ),
+-++                    ),
+-++                    child: Icon(
+-++                      iconData,
+- +                      color: Colors.white,
+--+                      size: 26,
+--+                    )
+--+                  : null,
+--+            ),
+-++                      size: 24,
+-++                    )),
+-              const SizedBox(
+---              width: 8,
+--+              width: 12,
+-+               width: 12,
+-              ),
+---            Center(
+--+            Expanded(
+--+              flex: 2,
+--               child: Text(
+---                item.text,
+--+                widget.item.text,
+--+                overflow: TextOverflow.ellipsis,
+--                 style: const TextStyle(
+--                   fontSize: 16,
+--                   fontWeight: FontWeight.w400,
+--@@ -55,6 +64,15 @@ class ItemFile extends StatelessWidget {
+-+@@ -64,13 +141,19 @@ class _ItemFileState extends State<ItemFile> {
+-                  ),
+-                ),
+-              ),
+--+            (widget.item.text.contains("."))
+--+                ? Checkbox(
+--+                    value: check1,
+--+                    onChanged: (bool? value) {
+--+                      setState(() {
+--+                        check1 = value;
+--+                      });
+--+                    })
+--+                : Container(),
+-+-            (widget.item.text.contains("."))
+-++            (widget.item.type == "file")
+-+                 ? Checkbox(
+-+-                    value: check1,
+-++                    value: isChecked,
+-+                     onChanged: (bool? value) {
+-+                       setState(() {
+-+-                        check1 = value;
+-++                        isChecked = value!;
+-++                        if (isChecked) {
+-++                          mapChecked.addAll({widget.item.id: true});
+-++                        } else {
+-++                          mapChecked.remove(widget.item.id);
+-++                        }
+-+                       });
+-++                      widget.onPressed(isChecked);
+-+                     })
+-+                 : Container(),
+-            ],
+--         ),
+--       ),
+-+diff --git a/lib/components/item_leading.dart b/lib/components/item_leading.dart
+-+deleted file mode 100644
+-+index ba70dc1..0000000
+-+--- a/lib/components/item_leading.dart
+-++++ /dev/null
+-+@@ -1,43 +0,0 @@
+-+-import 'package:flutter/material.dart';
+-+-
+-+-class ItemLeading extends StatelessWidget {
+-+-  const ItemLeading({
+-+-    Key? key,
+-+-    required this.icon,
+-+-    required this.content,
+-+-    required this.onPressed,
+-+-  }) : super(key: key);
+-+-  final IconData icon;
+-+-  final String content;
+-+-  final VoidCallback onPressed;
+-+-
+-+-  @override
+-+-  Widget build(BuildContext context) {
+-+-    return InkWell(
+-+-      onTap: () {
+-+-        onPressed();
+-+-      },
+-+-      child: Padding(
+-+-        padding: const EdgeInsets.all(16.0),
+-+-        child: Row(
+-+-          children: [
+-+-            Icon(
+-+-              icon,
+-+-              color: Colors.grey.shade700,
+-+-            ),
+-+-            const SizedBox(
+-+-              width: 24,
+-+-            ),
+-+-            Text(
+-+-              content,
+-+-              style: const TextStyle(
+-+-                fontSize: 18,
+-+-                color: Colors.black,
+-+-              ),
+-+-            )
+-+-          ],
+-+-        ),
+-+-      ),
+-+-    );
+-+-  }
+-+-}
+- diff --git a/lib/components/list_items.dart b/lib/components/list_items.dart
+--index 2df6c65..68dfcaf 100644
+-+index 68dfcaf..c4e761c 100644
+- --- a/lib/components/list_items.dart
+- +++ b/lib/components/list_items.dart
+--@@ -1,11 +1,9 @@
+---import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+-- import 'package:clouddisk_login_form/components/item_file.dart';
+-- import 'package:clouddisk_login_form/models/item.dart';
+-+@@ -3,9 +3,13 @@ import 'package:clouddisk_login_form/models/item.dart';
+-  import 'package:flutter/material.dart';
+---import 'package:flutter_bloc/flutter_bloc.dart';
+-  
+-  class ListItems extends StatefulWidget {
+---  final List<Folder> items;
+--+  final List<Item> items;
+--   const ListItems({super.key, required this.items});
+-- 
+-+-  final List<Item> items;
+-+-  const ListItems({super.key, required this.items});
+-+-
+-++  const ListItems({
+-++    super.key,
+-++    required this.items,
+-++    required this.onPressed,
+-++  });
+-++  final List<Folder> items;
+-++  final VoidCallback onPressed;
+-    @override
+--@@ -21,10 +19,13 @@ class _ListItemsState extends State<ListItems> {
+-+   State<ListItems> createState() => _ListItemsState();
+-+ }
+-+@@ -18,14 +22,14 @@ class _ListItemsState extends State<ListItems> {
+-+             itemCount: widget.items.length,
+-              itemBuilder: (context, index) => ItemFile(
+-                item: widget.items[index],
+--               onPressed: () {
+---                if (widget.items[index] is Folder) {
+---                  // BlocProvider.of<FolderTreeBloc>(context).add(
+---                  //   LoadEvent(widget.items[index].id),
+---                  // );
+--+                if (!widget.items[index].text.contains(".")) {
+--+                  Navigator.of(context).pushNamed("/folderScreen", arguments: {
+--+                    "folderId": widget.items[index].id.toString(),
+--+                    "currentPath": "/${widget.items[index].text}",
+--+                  });
+--+                } else {
+--+                  print("it's file");
+-+-              onPressed: () {
+-+-                if (!widget.items[index].text.contains(".")) {
+-++              onPressed: (value) {
+-++                if (widget.items[index].type == "dir") {
+-+                   Navigator.of(context).pushNamed("/folderScreen", arguments: {
+-+                     "folderId": widget.items[index].id.toString(),
+-+                     "currentPath": "/${widget.items[index].text}",
+-+                   });
+-+                 } else {
+-+-                  print("it's file");
+-++                  widget.onPressed();
+-                  }
+-                },
+-              ),
+--diff --git a/lib/main.dart b/lib/main.dart
+--index e311817..058833a 100644
+----- a/lib/main.dart
+--+++ b/lib/main.dart
+--@@ -1,8 +1,14 @@
+--+import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+-- import 'package:clouddisk_login_form/bloc/login/bloc/login_bloc.dart';
+--+import 'package:clouddisk_login_form/models/user.dart';
+--+import 'package:clouddisk_login_form/presentation/pages/home_page/home_page.dart';
+-- import 'package:clouddisk_login_form/presentation/pages/login_page/login_screen.dart';
+--+import 'package:clouddisk_login_form/utils/preferences.dart';
+-- import 'package:flutter/material.dart';
+-- import 'package:flutter_bloc/flutter_bloc.dart';
+-- 
+--+UserPreferences prefs = UserPreferences();
+-+diff --git a/lib/global_variable/global_variable.dart b/lib/global_variable/global_variable.dart
+-+new file mode 100644
+-+index 0000000..3e247b3
+-+--- /dev/null
+-++++ b/lib/global_variable/global_variable.dart
+-+@@ -0,0 +1 @@
+-++Map<String, dynamic> mapChecked = {};
+-+diff --git a/lib/icons/app_icons.dart b/lib/icons/app_icons.dart
+-+new file mode 100644
+-+index 0000000..e56e19b
+-+--- /dev/null
+-++++ b/lib/icons/app_icons.dart
+-+@@ -0,0 +1,50 @@
+-++/// Flutter icons AppIcon
+-++/// Copyright (C) 2022 by original authors @ fluttericon.com, fontello.com
+-++/// This font was generated by FlutterIcon.com, which is derived from Fontello.
+-++///
+-++/// To use this font, place it in your fonts/ directory and include the
+-++/// following in your pubspec.yaml
+-++///
+-++/// flutter:
+-++///   fonts:
+-++///    - family:  AppIcon
+-++///      fonts:
+-++///       - asset: fonts/AppIcon.ttf
+-++///
+-++///
+-++/// * Font Awesome 4, Copyright (C) 2016 by Dave Gandy
+-++///         Author:    Dave Gandy
+-++///         License:   SIL ()
+-++///         Homepage:  http://fortawesome.github.com/Font-Awesome/
+-++/// * Font Awesome 5, Copyright (C) 2016 by Dave Gandy
+-++///         Author:    Dave Gandy
+-++///         License:   SIL (https://github.com/FortAwesome/Font-Awesome/blob/master/LICENSE.txt)
+-++///         Homepage:  http://fortawesome.github.com/Font-Awesome/
+-++///
+-++import 'package:flutter/widgets.dart';
+- +
+-- void main() {
+--   runApp(const MyApp());
+-- }
+--@@ -32,13 +38,53 @@ class MyHomePage extends StatefulWidget {
+-- 
+-- class _MyHomePageState extends State<MyHomePage> {
+--   final LoginBloc loginBloc = LoginBloc();
+--+  bool hasCookie = true;
+--+  var session = "";
+--+  var hmailkey = "";
+--+  Future getCookie() async {
+--+    await prefs.getSession().then((value) {
+--+      session = value;
+--+    });
+--+    await prefs.getHmailKey().then((value) {
+--+      hmailkey = value;
+--+    });
+--+  }
+-++class AppIcon {
+-++  AppIcon._();
+- +
+--+  @override
+--+  void initState() {
+--+    getCookie().then((value) {
+--+      setState(() {
+--+        hasCookie = true;
+--+      });
+--+    });
+--+    super.initState();
+--+  }
+-++  static const _kFontFam = 'AppIcon';
+-++  static const String? _kFontPkg = null;
+- +
+--+  @override
+--+  void dispose() {
+--+    loginBloc.close();
+--+    super.dispose();
+--+  }
+-- 
+--   @override
+--   Widget build(BuildContext context) {
+--+    if (session == "" || hmailkey == "") {
+--+      hasCookie = false;
+--+    } else {
+--+      user.session = session;
+--+      user.hmailKey = hmailkey;
+--+    }
+--     return Scaffold(
+---      body: BlocProvider(
+---        create: (context) => loginBloc,
+---        child: const LoginScreen(),
+--+      body: MultiBlocProvider(
+--+        providers: [
+--+          BlocProvider(
+--+            create: (context) => loginBloc,
+--+          ),
+--+          BlocProvider(
+--+            create: (context) => FolderTreeBloc(),
+--+          ),
+--+        ],
+--+        child: hasCookie ? const HomePage() : const LoginScreen(),
+-++  static const IconData fileExcel =
+-++      IconData(0xe800, fontFamily: _kFontFam, fontPackage: _kFontPkg);
+-++  static const IconData fileWord =
+-++      IconData(0xe801, fontFamily: _kFontFam, fontPackage: _kFontPkg);
+-++  static const IconData filePowerpoint =
+-++      IconData(0xe802, fontFamily: _kFontFam, fontPackage: _kFontPkg);
+-++  static const IconData docText =
+-++      IconData(0xf15c, fontFamily: _kFontFam, fontPackage: _kFontPkg);
+-++  static const IconData filePdf =
+-++      IconData(0xf1c1, fontFamily: _kFontFam, fontPackage: _kFontPkg);
+-++  static const IconData fileImage =
+-++      IconData(0xf1c5, fontFamily: _kFontFam, fontPackage: _kFontPkg);
+-++  static const IconData fileArchive =
+-++      IconData(0xf1c6, fontFamily: _kFontFam, fontPackage: _kFontPkg);
+-++  static const IconData fileAudio =
+-++      IconData(0xf1c7, fontFamily: _kFontFam, fontPackage: _kFontPkg);
+-++  static const IconData fileVideo =
+-++      IconData(0xf1c8, fontFamily: _kFontFam, fontPackage: _kFontPkg);
+-++}
+-+diff --git a/lib/main.dart b/lib/main.dart
+-+index 058833a..92b452b 100644
+-+--- a/lib/main.dart
+-++++ b/lib/main.dart
+-+@@ -22,7 +22,7 @@ class MyApp extends StatelessWidget {
+-+       title: 'Flutter Demo',
+-+       debugShowCheckedModeBanner: false,
+-+       theme: ThemeData(
+-+-        primarySwatch: Colors.blue,
+-++        primarySwatch: Colors.cyan,
+-        ),
+-+       home: const MyHomePage(),
+-      );
+--   }
+- diff --git a/lib/models/item.dart b/lib/models/item.dart
+--index 3e288be..6856a8c 100644
+-+index 6856a8c..4be4b11 100644
+- --- a/lib/models/item.dart
+- +++ b/lib/models/item.dart
+--@@ -1,15 +1,36 @@
+---class Folder {
+--+import 'package:flutter/cupertino.dart';
+--+import 'package:flutter/material.dart';
+--+
+--+class Item {
+-+@@ -1,23 +1,20 @@
+-+-import 'package:flutter/cupertino.dart';
+-+ import 'package:flutter/material.dart';
+-+ 
+-+ class Item {
+-    final String id;
+-    final String text;
+---  Folder(
+---    this.id,
+---    this.text,
+---  );
+--+  Item(this.id, this.text);
+--+}
+--+
+--+class File extends Item {
+--+  String extension;
+--+  File(String id, String title, this.extension) : super(id, title);
+--+}
+--+
+--+class Folder extends Item {
+--+  Color? color;
+--+  IconData? icon;
+--+  List<Item> children;
+--+  Folder(String id, String text, this.color, this.icon, this.children)
+--+      : super(id, text);
+--+
+--+  void addColorandIcon(Color color, IconData icon) {
+--+    this.color = color;
+--+    this.icon = icon;
+--+  }
+-+-  Item(this.id, this.text);
+-+-}
+-+-
+-+-class File extends Item {
+-+-  String extension;
+-+-  File(String id, String title, this.extension) : super(id, title);
+-++  final String type;
+-++  final String regdate;
+-++  final String size;
+-++  Item(this.id, this.text, this.type, this.regdate, this.size);
+-+ }
+-+ 
+-+ class Folder extends Item {
+-+   Color? color;
+-+   IconData? icon;
+-+-  List<Item> children;
+-+-  Folder(String id, String text, this.color, this.icon, this.children)
+-+-      : super(id, text);
+-++  Folder(String id, String text, String type, String regdate, String size,
+-++      this.color, this.icon)
+-++      : super(id, text, type, regdate, size);
+-  
+--   factory Folder.fromJson(Map<String, dynamic> json) {
+-+   void addColorandIcon(Color color, IconData icon) {
+-+     this.color = color;
+-+@@ -28,14 +25,16 @@ class Folder extends Item {
+-      return Folder(
+-        json['id'] as String,
+-        json['text'] as String,
+--+      null,
+--+      null,
+--+      [],
+-++      json['type'] as String,
+-++      json['regdate'] as String,
+-++      json['size'] as String,
+-+       null,
+-+       null,
+-+-      [],
+-      );
+-    }
+-  
+--@@ -18,4 +39,15 @@ class Folder {
+-+   @override
+-+-  String toString() => 'Folder(id: $id, text: $text)';
+-++  String toString() => 'Folder(id: $id, text: $text, type: $type)';
+-  }
+-  
+-  List<Folder> folders = [];
+---List<Folder> subFolders = [];
+--+List<Folder> foldersRoot = [];
+--+
+--+void addColorandIcon() {
+--+  foldersRoot[0].addColorandIcon(Colors.blueAccent.shade400, Icons.folder);
+--+  foldersRoot[1].addColorandIcon(Colors.green.shade900, Icons.cloud_sync);
+--+  foldersRoot[2].addColorandIcon(Colors.orange.shade400, Icons.snippet_folder);
+--+  foldersRoot[3].addColorandIcon(Colors.purple.shade800, Icons.share);
+--+  foldersRoot[4].addColorandIcon(Colors.pink.shade300, Icons.star);
+--+  foldersRoot[5].addColorandIcon(Colors.brown, Icons.campaign_outlined);
+--+  foldersRoot[6].addColorandIcon(Colors.teal.shade700, Icons.source);
+--+  foldersRoot[7].addColorandIcon(Colors.red.shade900, Icons.delete_outline);
+--+}
+--diff --git a/lib/models/login.dart b/lib/models/login.dart
+--deleted file mode 100644
+--index 9bcd0a5..0000000
+----- a/lib/models/login.dart
+--+++ /dev/null
+--@@ -1,52 +0,0 @@
+---class LogInRequest {
+---  final String token;
+---  final String gwid;
+---  final String gwpass;
+---  final String model;
+---  final String code;
+---  final String deviceid;
+---  LogInRequest(
+---      this.token, this.gwid, this.gwpass, this.model, this.code, this.deviceid);
+---
+---  Map getMap() {
+---    return {
+---      'token': token,
+---      'gw_id': gwid,
+---      'gw_pass': gwpass,
+---      'model': model,
+---      'code': code,
+---      'device_id': deviceid
+---    };
+---  }
+---}
+---
+---final LogInRequest logInRequest = LogInRequest(
+---  "cmGw7OXyYe4:APA91bGYAL29_GyI7wx3IcFiVYsxZbt8FtJJezhs1Ot_F0F1vEHljzkmV28p9owvsI3ABM3yvqwpkEdqCXJWTGwXb9XQwFtDYqaS-9Inc",
+---  "oRfAa0Ex1ZVsHLimNx5XpV1eeiNs+g2OhPIDYHI8IpWFhHNQ2Nm0C1KuISROSJj9NZ6rpnL6ZsYduCKvD38he8bfK7lQHB/3EcDEZWRUgCyv4z61OAf2pMXhQfbOWvCMfsdJ0JBun7iC1mQ7aSLzT/JJYDUybwJbPx72GOjQ1j4=",
+---  "wtsaWk7utF6GtHIFZKwXYarexC/Qp4fY/5xAjq7+gC/afF1d1/Gt7FEgU1UcnHxLtNHOn2dgC8Z7qdTMonGaZ+aRTGWh70sfxy0QLL7Ij/RyjqqIwqGuxNXrSOkwcp3EiN1S/6z7maMTl5XZ6c/Bww3w/G1mcsmnPCZ6gaJzMMk=",
+---  "samsung SM-N970F",
+---  "212970",
+---  "2eaba74b-e0b5-49cb-b9ab-f9630845d43b",
+---);
+---
+---class LogInResponse {
+---  late bool success;
+---  late final String? msg;
+---  late String session;
+---  late String hmailkey;
+---  LogInResponse(Map map) {
+---    success = map["success"];
+---    msg = map["msg"];
+---    session = map["session"];
+---    hmailkey = map["hmail_key"];
+---  }
+---
+---  Map getMap() {
+---    return {
+---      "success": success,
+---      "msg": msg,
+---      "session": session,
+---      "hmail_key": hmailkey,
+---    };
+---  }
+---}
+- diff --git a/lib/presentation/pages/home_page/home_page.dart b/lib/presentation/pages/home_page/home_page.dart
+--index 7031ef0..58bad7a 100644
+-+index 58bad7a..05c43c7 100644
+- --- a/lib/presentation/pages/home_page/home_page.dart
+- +++ b/lib/presentation/pages/home_page/home_page.dart
+--@@ -1,34 +1,23 @@
+---import 'package:clouddisk_login_form/api/auth.dart';
+---import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+---import 'package:clouddisk_login_form/models/item.dart';
+-+@@ -1,3 +1,4 @@
+-++import 'package:clouddisk_login_form/global_variable/global_variable.dart';
+-  import 'package:clouddisk_login_form/presentation/screens/folder_screen.dart';
+-  import 'package:flutter/material.dart';
+---import 'package:flutter_bloc/flutter_bloc.dart';
+-- 
+-- class HomePage extends StatefulWidget {
+---  const HomePage({super.key});
+--+  const HomePage({
+--+    super.key,
+--+  });
+-  
+--   @override
+--   State<HomePage> createState() => _HomePageState();
+-- }
+-+@@ -12,7 +13,7 @@ class HomePage extends StatefulWidget {
+-  
+-  class _HomePageState extends State<HomePage> {
+---  final GlobalKey<ScaffoldState> scaffoldKey = GlobalKey<ScaffoldState>();
+---  final FolderTreeBloc folderTreeBloc = FolderTreeBloc();
+---  @override
+---  void initState() {
+---    folderTreeBloc.add(const LoadEvent(""));
+---    super.initState();
+---  }
+---
+--+  final navKey = GlobalKey<NavigatorState>();
+--+  var path = "...";
+-+   final navKey = GlobalKey<NavigatorState>();
+-+-  var path = "...";
+-++  var path = "";
+-    @override
+-    Widget build(BuildContext context) {
+---    getFolderlv2();
+---
+-      void onSelected(BuildContext context, int value) {
+--       switch (value) {
+--         case 0:
+---          print("Download");
+--           break;
+--         default:
+--       }
+--@@ -38,6 +27,8 @@ class _HomePageState extends State<HomePage> {
+--       appBar: PreferredSize(
+--         preferredSize: const Size.fromHeight(50),
+-+@@ -29,15 +30,44 @@ class _HomePageState extends State<HomePage> {
+-          child: AppBar(
+--+          elevation: 0,
+--+          automaticallyImplyLeading: false, //turn off leading
+--           title: const Text("Home"),
+-+           elevation: 0,
+-+           automaticallyImplyLeading: false, //turn off leading
+-+-          title: const Text("Home"),
+-++          title: Row(
+-++            children: [
+-++              const Text(
+-++                "Home",
+-++                style: TextStyle(
+-++                  color: Colors.white,
+-++                ),
+-++              ),
+-++              Text(
+-++                " ${mapChecked.isNotEmpty ? "(" : ""}${mapChecked.isNotEmpty ? mapChecked.length : ""}${mapChecked.isNotEmpty ? ")" : ""}",
+-++                style: const TextStyle(
+-++                  color: Colors.amberAccent,
+-++                ),
+-++              ),
+-++            ],
+-++          ),
+-            actions: [
+-++            mapChecked.isNotEmpty
+-++                ? IconButton(
+-++                    icon: const Icon(
+-++                      Icons.send,
+-++                      color: Colors.white,
+-++                    ),
+-++                    onPressed: () {
+-++                      ScaffoldMessenger.of(context).showSnackBar(
+-++                        const SnackBar(
+-++                          content: Text("Đang gửi..."),
+-++                        ),
+-++                      );
+-++                    },
+-++                  )
+-++                : Container(),
+-              Theme(
+--@@ -52,7 +43,6 @@ class _HomePageState extends State<HomePage> {
+-+               data: Theme.of(context).copyWith(
+-+                   iconTheme: const IconThemeData(color: Colors.white),
+-+                   textTheme: const TextTheme().apply(bodyColor: Colors.white)),
+-+               child: PopupMenuButton<int>(
+-+-                offset: const Offset(0, 50),
+-+-                color: Colors.indigo.shade900,
+-++                color: Colors.indigo,
+-+                 onSelected: (value) {
+-+                   onSelected(context, value);
+-                  },
+--                 itemBuilder: ((context) {
+--                   return [
+---                    popupMenuItem("New Folder"),
+--                     popupMenuItem("Sort"),
+--                   ];
+--                 }),
+--@@ -61,24 +51,50 @@ class _HomePageState extends State<HomePage> {
+--           ],
+--         ),
+-+@@ -53,10 +83,12 @@ class _HomePageState extends State<HomePage> {
+-        ),
+---      // body: FolderScreen(
+---      //   folders: folders,
+---      // ),
+---      body: BlocProvider(
+---        create: (context) => folderTreeBloc,
+---        child: BlocBuilder<FolderTreeBloc, FolderTreeState>(
+---          builder: (context, state) {
+---            if (state is FolderTreeLoading) {
+---              return const Center(
+---                child: CircularProgressIndicator(),
+---              );
+--+      body: WillPopScope(
+--+        onWillPop: () async {
+--+          //xóa thằng cuối khi pop
+--+          var chars = path.split("/");
+--+          chars.removeLast();
+--+          path = chars.join("/");
+--+          if (navKey.currentState != null) {
+--+            if (navKey.currentState!.canPop()) {
+--+              navKey.currentState!.pop();
+--+              return false;
+--             }
+---            if (state is FolderTreeLoaded) {
+---              return FolderScreen(
+---                folders: state.items,
+---              );
+--+          }
+--+          return true;
+--+        },
+--+        child: Navigator(
+--+          key: navKey,
+--+          onGenerateRoute: (settings) {
+--+            switch (settings.name) {
+--+              case "/":
+--+                return MaterialPageRoute(
+--+                  settings: settings,
+--+                  builder: (context) {
+--+                    return const FolderScreen(
+--+                      folderId: "",
+--+                      currentPath: "...",
+--+                    );
+--+                  },
+--+                );
+--+              case "/folderScreen":
+--+                var arguments = settings.arguments as Map;
+--+                var folderId = arguments["folderId"];
+--+                var currentPath = arguments["currentPath"];
+--+                path += currentPath;
+--+                return MaterialPageRoute(
+--+                  settings: settings,
+--+                  builder: (context) {
+-+       body: WillPopScope(
+-+         onWillPop: () async {
+-+-          //xóa thằng cuối khi pop
+-+-          var chars = path.split("/");
+-+-          chars.removeLast();
+-+-          path = chars.join("/");
+-++          setState(() {
+-++            //xóa thằng cuối khi pop
+-++            var chars = path.split("/");
+-++            chars.removeLast();
+-++            path = chars.join("/");
+-++          });
+-+           if (navKey.currentState != null) {
+-+             if (navKey.currentState!.canPop()) {
+-+               navKey.currentState!.pop();
+-+@@ -73,9 +105,12 @@ class _HomePageState extends State<HomePage> {
+-+                 return MaterialPageRoute(
+-+                   settings: settings,
+-+                   builder: (context) {
+-+-                    return const FolderScreen(
+- +                    return FolderScreen(
+--+                      folderId: folderId,
+--+                      currentPath: path,
+--+                    );
+--+                  },
+--+                );
+--             }
+---            return Container();
+--+            return null;
+--           },
+--         ),
+-+                       folderId: "",
+-+-                      currentPath: "...",
+-++                      currentPath: "",
+-++                      onPressed: () {
+-++                        setState(() {});
+-++                      },
+-+                     );
+-+                   },
+-+                 );
+-+@@ -84,12 +119,16 @@ class _HomePageState extends State<HomePage> {
+-+                 var folderId = arguments["folderId"];
+-+                 var currentPath = arguments["currentPath"];
+-+                 path += currentPath;
+-++                if (path[0] == "/") path = path.substring(1);
+-+                 return MaterialPageRoute(
+-+                   settings: settings,
+-+                   builder: (context) {
+-+                     return FolderScreen(
+-+                       folderId: folderId,
+-+                       currentPath: path,
+-++                      onPressed: () {
+-++                        setState(() {});
+-++                      },
+-+                     );
+-+                   },
+-+                 );
+-+@@ -103,28 +142,11 @@ class _HomePageState extends State<HomePage> {
+-+ 
+-+   PopupMenuItem<int> popupMenuItem(String content) {
+-+     return PopupMenuItem<int>(
+-+-      padding: const EdgeInsets.all(0),
+-++      padding: const EdgeInsets.only(left: 16),
+-+       value: 0,
+-+-      child: Container(
+-+-        padding: const EdgeInsets.symmetric(vertical: 6),
+-+-        child: Row(
+-+-          children: [
+-+-            const SizedBox(
+-+-              width: 6,
+-+-            ),
+-+-            const Icon(
+-+-              Icons.file_download_outlined,
+-+-              size: 16,
+-+-            ),
+-+-            const SizedBox(
+-+-              width: 6,
+-+-            ),
+-+-            Text(
+-+-              content,
+-+-              style: const TextStyle(fontSize: 16),
+-+-            ),
+-+-          ],
+-+-        ),
+-++      child: Text(
+-++        content,
+-++        style: const TextStyle(fontSize: 16),
+-        ),
+--diff --git a/lib/presentation/pages/login_page/login_screen.dart b/lib/presentation/pages/login_page/login_screen.dart
+--index be78863..484bba0 100644
+----- a/lib/presentation/pages/login_page/login_screen.dart
+--+++ b/lib/presentation/pages/login_page/login_screen.dart
+--@@ -1,8 +1,7 @@
+---import 'package:clouddisk_login_form/api/auth.dart';
+--+import 'package:clouddisk_login_form/api/request/login_req.dart';
+-- import 'package:clouddisk_login_form/bloc/login/bloc/login_bloc.dart';
+-- import 'package:clouddisk_login_form/components/auth_button.dart';
+-- import 'package:clouddisk_login_form/components/auth_input.dart';
+---import 'package:clouddisk_login_form/models/login.dart';
+-- import 'package:clouddisk_login_form/presentation/pages/home_page/home_page.dart';
+-- import 'package:flutter/material.dart';
+-- import 'package:flutter_bloc/flutter_bloc.dart';
+--@@ -52,8 +51,12 @@ class _LoginScreenState extends State<LoginScreen> {
+--       listener: (context, state) {
+--         if (state is LoginSuccessLoaded) {
+--           Navigator.pop(context); //pop dialog
+---          Navigator.push(context,
+---              MaterialPageRoute(builder: (context) => const HomePage()));
+--+          Navigator.push(
+--+            context,
+--+            MaterialPageRoute(
+--+              builder: (context) => const HomePage(),
+--+            ),
+--+          );
+--         }
+--         if (state is LoginFailLoaded) {
+--           Navigator.pop(context); //pop dialog
+-+     );
+-+   }
+- diff --git a/lib/presentation/screens/folder_screen.dart b/lib/presentation/screens/folder_screen.dart
+--index b5ffa57..2d91906 100644
+-+index 2d91906..e2bbd7a 100644
+- --- a/lib/presentation/screens/folder_screen.dart
+- +++ b/lib/presentation/screens/folder_screen.dart
+--@@ -1,34 +1,70 @@
+-- import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+-- import 'package:clouddisk_login_form/components/list_items.dart';
+---import 'package:clouddisk_login_form/models/item.dart';
+-- import 'package:flutter/material.dart';
+-- import 'package:flutter_bloc/flutter_bloc.dart';
+-- 
+-- class FolderScreen extends StatefulWidget {
+--   const FolderScreen({
+-+@@ -8,9 +8,11 @@ class FolderScreen extends StatefulWidget {
+-      super.key,
+---    required this.folders,
+--+    required this.folderId,
+--+    required this.currentPath,
+-+     required this.folderId,
+-+     required this.currentPath,
+-++    required this.onPressed,
+-    });
+---  final List<Folder> folders;
+--+  final String folderId;
+--+  final String currentPath;
+-+   final String folderId;
+-+   final String currentPath;
+-++  final VoidCallback onPressed;
+-    @override
+-    State<FolderScreen> createState() => _FolderScreenState();
+-  }
+-- 
+-- class _FolderScreenState extends State<FolderScreen> {
+--+  final FolderTreeBloc folderTreeBloc = FolderTreeBloc();
+--+  @override
+--+  void initState() {
+--+    folderTreeBloc.add(LoadEvent(widget.folderId));
+--+    super.initState();
+--+  }
+--+
+--+  @override
+--+  void dispose() {
+--+    folderTreeBloc.close();
+--+    super.dispose();
+--+  }
+--+
+--   @override
+--   Widget build(BuildContext context) {
+---    return WillPopScope(
+---      onWillPop: () async {
+---        // BlocProvider.of<FolderTreeBloc>(context).add(const BackEvent());
+---        return false;
+---      },
+---      child: Column(
+---        children: [
+---          // Text("path"),
+---          Expanded(
+---            child: ListItems(items: widget.folders),
+---          ),
+---        ],
+--+    return BlocProvider(
+--+      create: (context) => folderTreeBloc,
+--+      child: BlocBuilder<FolderTreeBloc, FolderTreeState>(
+--+        builder: (context, state) {
+--+          if (state is FolderTreeLoading) {
+--+            return const Center(
+--+              child: CircularProgressIndicator(),
+--+            );
+--+          } else if (state is FolderTreeLoaded) {
+--+            return Scaffold(
+--+              body: Column(
+--+                children: [
+--+                  widget.folderId == ""
+--+                      ? Container()
+--+                      : Container(
+--+                          width: double.infinity,
+--+                          padding:
+--+                              const EdgeInsets.only(left: 4, top: 5, bottom: 5),
+--+                          decoration:
+--+                              BoxDecoration(color: Colors.cyan.shade300),
+--+                          child: Text(
+--+                            widget.currentPath,
+--+                            style: const TextStyle(fontSize: 16),
+--+                          ),
+--+                        ),
+--+                  Expanded(
+--+                    child: ListItems(items: state.items),
+--+                  ),
+--+                ],
+--+              ),
+--+            );
+--+          }
+--+          return Container();
+--+        },
+--       ),
+--     );
+--   }
+--diff --git a/lib/utils/preferences.dart b/lib/utils/preferences.dart
+--new file mode 100644
+--index 0000000..f0552ac
+----- /dev/null
+--+++ b/lib/utils/preferences.dart
+--@@ -0,0 +1,23 @@
+--+import 'package:shared_preferences/shared_preferences.dart';
+--+
+--+class UserPreferences {
+--+  Future setSession(String session) async {
+--+    SharedPreferences preferences = await SharedPreferences.getInstance();
+--+    preferences.setString("session", session);
+--+  }
+--+
+--+  Future<String> getSession() async {
+--+    SharedPreferences preferences = await SharedPreferences.getInstance();
+--+    return preferences.getString("session") ?? "";
+--+  }
+--+
+--+  Future setHmailKey(String hmailkey) async {
+--+    SharedPreferences preferences = await SharedPreferences.getInstance();
+--+    preferences.setString("hmail_key", hmailkey);
+--+  }
+--+
+--+  Future<String> getHmailKey() async {
+--+    SharedPreferences preferences = await SharedPreferences.getInstance();
+--+    return preferences.getString("hmail_key") ?? "";
+--+  }
+--+}
+--diff --git a/macos/Flutter/GeneratedPluginRegistrant.swift b/macos/Flutter/GeneratedPluginRegistrant.swift
+--index cccf817..287b6a9 100644
+----- a/macos/Flutter/GeneratedPluginRegistrant.swift
+--+++ b/macos/Flutter/GeneratedPluginRegistrant.swift
+--@@ -5,6 +5,8 @@
+-- import FlutterMacOS
+-- import Foundation
+-- 
+--+import shared_preferences_macos
+-- 
+-- func RegisterGeneratedPlugins(registry: FlutterPluginRegistry) {
+--+  SharedPreferencesPlugin.register(with: registry.registrar(forPlugin: "SharedPreferencesPlugin"))
+-- }
+--diff --git a/pubspec.lock b/pubspec.lock
+--index 0ecf786..23927e5 100644
+----- a/pubspec.lock
+--+++ b/pubspec.lock
+--@@ -71,6 +71,20 @@ packages:
+--       url: "https://pub.dartlang.org"
+--     source: hosted
+--     version: "1.3.1"
+--+  ffi:
+--+    dependency: transitive
+--+    description:
+--+      name: ffi
+--+      url: "https://pub.dartlang.org"
+--+    source: hosted
+--+    version: "2.0.1"
+--+  file:
+--+    dependency: transitive
+--+    description:
+--+      name: file
+--+      url: "https://pub.dartlang.org"
+--+    source: hosted
+--+    version: "6.1.4"
+--   flutter:
+--     dependency: "direct main"
+--     description: flutter
+--@@ -95,6 +109,11 @@ packages:
+--     description: flutter
+--     source: sdk
+--     version: "0.0.0"
+--+  flutter_web_plugins:
+--+    dependency: transitive
+--+    description: flutter
+--+    source: sdk
+--+    version: "0.0.0"
+--   http_parser:
+--     dependency: transitive
+--     description:
+--@@ -102,6 +121,13 @@ packages:
+--       url: "https://pub.dartlang.org"
+--     source: hosted
+--     version: "4.0.2"
+--+  js:
+--+    dependency: transitive
+--+    description:
+--+      name: js
+--+      url: "https://pub.dartlang.org"
+--+    source: hosted
+--+    version: "0.6.4"
+--   lints:
+--     dependency: transitive
+--     description:
+--@@ -144,6 +170,48 @@ packages:
+--       url: "https://pub.dartlang.org"
+--     source: hosted
+--     version: "1.8.2"
+--+  path_provider_linux:
+--+    dependency: transitive
+--+    description:
+--+      name: path_provider_linux
+--+      url: "https://pub.dartlang.org"
+--+    source: hosted
+--+    version: "2.1.7"
+--+  path_provider_platform_interface:
+--+    dependency: transitive
+--+    description:
+--+      name: path_provider_platform_interface
+--+      url: "https://pub.dartlang.org"
+--+    source: hosted
+--+    version: "2.0.5"
+--+  path_provider_windows:
+--+    dependency: transitive
+--+    description:
+--+      name: path_provider_windows
+--+      url: "https://pub.dartlang.org"
+--+    source: hosted
+--+    version: "2.1.3"
+--+  platform:
+--+    dependency: transitive
+--+    description:
+--+      name: platform
+--+      url: "https://pub.dartlang.org"
+--+    source: hosted
+--+    version: "3.1.0"
+--+  plugin_platform_interface:
+--+    dependency: transitive
+--+    description:
+--+      name: plugin_platform_interface
+--+      url: "https://pub.dartlang.org"
+--+    source: hosted
+--+    version: "2.1.3"
+--+  process:
+--+    dependency: transitive
+--+    description:
+--+      name: process
+--+      url: "https://pub.dartlang.org"
+--+    source: hosted
+--+    version: "4.2.4"
+--   provider:
+--     dependency: transitive
+--     description:
+--@@ -151,6 +219,62 @@ packages:
+--       url: "https://pub.dartlang.org"
+--     source: hosted
+--     version: "6.0.4"
+--+  shared_preferences:
+--+    dependency: "direct main"
+--+    description:
+--+      name: shared_preferences
+--+      url: "https://pub.dartlang.org"
+--+    source: hosted
+--+    version: "2.0.15"
+--+  shared_preferences_android:
+--+    dependency: transitive
+--+    description:
+--+      name: shared_preferences_android
+--+      url: "https://pub.dartlang.org"
+--+    source: hosted
+--+    version: "2.0.14"
+--+  shared_preferences_ios:
+--+    dependency: transitive
+--+    description:
+--+      name: shared_preferences_ios
+--+      url: "https://pub.dartlang.org"
+--+    source: hosted
+--+    version: "2.1.1"
+--+  shared_preferences_linux:
+--+    dependency: transitive
+--+    description:
+--+      name: shared_preferences_linux
+--+      url: "https://pub.dartlang.org"
+--+    source: hosted
+--+    version: "2.1.2"
+--+  shared_preferences_macos:
+--+    dependency: transitive
+--+    description:
+--+      name: shared_preferences_macos
+--+      url: "https://pub.dartlang.org"
+--+    source: hosted
+--+    version: "2.0.4"
+--+  shared_preferences_platform_interface:
+--+    dependency: transitive
+--+    description:
+--+      name: shared_preferences_platform_interface
+--+      url: "https://pub.dartlang.org"
+--+    source: hosted
+--+    version: "2.1.0"
+--+  shared_preferences_web:
+--+    dependency: transitive
+--+    description:
+--+      name: shared_preferences_web
+--+      url: "https://pub.dartlang.org"
+--+    source: hosted
+--+    version: "2.0.4"
+--+  shared_preferences_windows:
+--+    dependency: transitive
+--+    description:
+--+      name: shared_preferences_windows
+--+      url: "https://pub.dartlang.org"
+--+    source: hosted
+--+    version: "2.1.2"
+--   sky_engine:
+--     dependency: transitive
+--     description: flutter
+--@@ -212,6 +336,20 @@ packages:
+--       url: "https://pub.dartlang.org"
+--     source: hosted
+--     version: "2.1.2"
+--+  win32:
+--+    dependency: transitive
+--+    description:
+--+      name: win32
+--+      url: "https://pub.dartlang.org"
+--+    source: hosted
+--+    version: "3.1.2"
+--+  xdg_directories:
+--+    dependency: transitive
+--+    description:
+--+      name: xdg_directories
+--+      url: "https://pub.dartlang.org"
+--+    source: hosted
+--+    version: "0.2.0+2"
+-- sdks:
+--   dart: ">=2.18.5 <3.0.0"
+---  flutter: ">=1.16.0"
+--+  flutter: ">=3.0.0"
+-+@@ -47,17 +49,22 @@ class _FolderScreenState extends State<FolderScreen> {
+-+                       ? Container()
+-+                       : Container(
+-+                           width: double.infinity,
+-+-                          padding:
+-+-                              const EdgeInsets.only(left: 4, top: 5, bottom: 5),
+-++                          padding: const EdgeInsets.only(
+-++                              left: 12, top: 8, bottom: 8),
+-+                           decoration:
+-+-                              BoxDecoration(color: Colors.cyan.shade300),
+-++                              BoxDecoration(color: Colors.cyan.shade100),
+-+                           child: Text(
+-+                             widget.currentPath,
+-+                             style: const TextStyle(fontSize: 16),
+-+                           ),
+-+                         ),
+-+                   Expanded(
+-+-                    child: ListItems(items: state.items),
+-++                    child: ListItems(
+-++                      items: state.items,
+-++                      onPressed: () {
+-++                        widget.onPressed();
+-++                      },
+-++                    ),
+-+                   ),
+-+                 ],
+-+               ),
+- diff --git a/pubspec.yaml b/pubspec.yaml
+--index db7d632..fee9a9c 100644
+-+index fee9a9c..b946b46 100644
+- --- a/pubspec.yaml
+- +++ b/pubspec.yaml
+--@@ -3,7 +3,7 @@ description: A new Flutter project.
+-- 
+-- # The following line prevents the package from being accidentally published to
+-- # pub.dev using `flutter pub publish`. This is preferred for private packages.
+---publish_to: 'none' # Remove this line if you wish to publish to pub.dev
+--+publish_to: "none" # Remove this line if you wish to publish to pub.dev
+-- 
+-- # The following defines the version and build number for your application.
+-- # A version number is three numbers separated by dots, like 1.2.43
+--@@ -20,7 +20,7 @@ publish_to: 'none' # Remove this line if you wish to publish to pub.dev
+-- version: 1.0.0+1
+-- 
+-- environment:
+---  sdk: '>=2.18.5 <3.0.0'
+--+  sdk: ">=2.18.5 <3.0.0"
+-- 
+-- # Dependencies specify other packages that your package needs in order to work.
+-- # To automatically upgrade your package dependencies to the latest versions
+--@@ -32,13 +32,13 @@ dependencies:
+--   flutter:
+--     sdk: flutter
+-- 
+---
+--   # The following adds the Cupertino Icons font to your application.
+--   # Use with the CupertinoIcons class for iOS style icons.
+--   cupertino_icons: ^1.0.2
+--   dio: ^4.0.6
+--   flutter_bloc: ^8.1.1
+---  equatable: 
+--+  equatable:
+--+  shared_preferences: ^2.0.15
+-- dev_dependencies:
+--   flutter_test:
+--     sdk: flutter
+--@@ -55,7 +55,6 @@ dev_dependencies:
+-- 
+-- # The following section is specific to Flutter packages.
+-- flutter:
+---
+--   # The following line ensures that the Material Icons font is
+--   # included with your application, so that you can use the icons in
+--   # the material Icons class.
+--@@ -63,7 +62,7 @@ flutter:
+-+@@ -61,8 +61,7 @@ flutter:
+-+   uses-material-design: true
+-  
+-    # To add assets to your application, add an assets section, like this:
+--   assets:
+---  - assets/images/
+--+    - assets/images/
+-+-  assets:
+-+-    - assets/images/
+-++  # assets:
+-    #   - images/a_dot_burr.jpeg
+-    #   - images/a_dot_ham.jpeg
+-  
+-+@@ -89,5 +88,9 @@ flutter:
+-+   #       - asset: fonts/TrajanPro_Bold.ttf
+-+   #         weight: 700
+-+   #
+-++  fonts:
+-++    - family: AppIcon
+-++      fonts:
+-++        - asset: assets/fonts/AppIcon.ttf 
+-+   # For details regarding fonts from package dependencies,
+-+   # see https://flutter.dev/custom-fonts/#from-packages
+ diff --git a/lib/api/api_header.dart b/lib/api/api_header.dart
+-index 1ac93d0..c4f6717 100644
++index c4f6717..f7e96cc 100644
+ --- a/lib/api/api_header.dart
+ +++ b/lib/api/api_header.dart
+-@@ -14,8 +14,8 @@ final loginHeader = {
++@@ -14,8 +14,6 @@ final loginHeader = {
+    'device_id': '1e10f743-196e-4bc0-aee7-8c14690f2ac4',
+    'X-REQUESTED-WITH': 'XMLHttpRequest',
+    "User_Agent": "Android 1.66 APP_HANBIRO_2.0.0.2",
+--  "Cookie":
+--      ";HANBIRO_GW=010254fedc4eaa12683367c2601053f919d8fd28b35cfd8c2f42173ed918e48eb9ab17480894076ec3ad7e268176e6b3;hmail_key=33b0cd76a231a3a0a6e247d814c23f9a;cook=kie",
+-+  // "Cookie":
+-+  //     ";HANBIRO_GW=010254fedc4eaa12683367c2601053f919d8fd28b35cfd8c2f42173ed918e48eb9ab17480894076ec3ad7e268176e6b3;hmail_key=33b0cd76a231a3a0a6e247d814c23f9a;cook=kie",
++-  // "Cookie":
++-  //     ";HANBIRO_GW=010254fedc4eaa12683367c2601053f919d8fd28b35cfd8c2f42173ed918e48eb9ab17480894076ec3ad7e268176e6b3;hmail_key=33b0cd76a231a3a0a6e247d814c23f9a;cook=kie",
+  };
+  List<String> cookie = [
+    ";HANBIRO_GW=${user.session}",
+-diff --git a/lib/api/api_service.dart b/lib/api/api_service.dart
+-index 911edce..bef36f8 100644
+---- a/lib/api/api_service.dart
+-+++ b/lib/api/api_service.dart
+-@@ -22,7 +22,6 @@ class AuthApi {
+-       ),
+-     );
+-     var responseData = response.data;
+--
+-     return responseData;
+-   }
++@@ -23,7 +21,7 @@ List<String> cookie = [
++   "cook=kie",
++ ];
++ 
++-//header của getFolder
+++//header của getFolder, sortFolder
++ final folderHeader = {
++   "Cookie": cookie.join(";"),
++ };
++diff --git a/lib/api/api_url.dart b/lib/api/api_url.dart
++index bb797ab..9a90953 100644
++--- a/lib/api/api_url.dart
+++++ b/lib/api/api_url.dart
++@@ -4,3 +4,7 @@ const loginUrl = "$baseUrl/ngw/sign/auth?is_checking_otp=1";
++ String getFolderUrl(String type, String id) {
++   return "$baseUrl/cloud/api/get.php?type=$type&id=$id";
+  }
+++
+++String sortFolderUrl(String type, String id, String sort, String order) {
+++  return "$baseUrl/cloud/api/get.php?type=$type&id=$id&sort=[{\"sort\":\"$sort\",\"order\":\"$order\"}]";
+++}
+ diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+-index e4d3ae5..87c64e5 100644
++index 87c64e5..f566a5a 100644
+ --- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+ +++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+-@@ -1,6 +1,5 @@
+- // ignore: depend_on_referenced_packages
+- import 'dart:convert';
+--
+- // ignore: depend_on_referenced_packages
+- import 'package:bloc/bloc.dart';
++@@ -5,6 +5,7 @@ import 'package:bloc/bloc.dart';
+  import 'package:clouddisk_login_form/api/api_header.dart';
+-@@ -21,24 +20,19 @@ class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
++ import 'package:clouddisk_login_form/api/api_url.dart';
++ import 'package:clouddisk_login_form/api/api_service.dart';
+++import 'package:clouddisk_login_form/global_variable/global_variable.dart';
++ import 'package:equatable/equatable.dart';
++ 
++ import 'package:clouddisk_login_form/models/item.dart';
++@@ -18,6 +19,7 @@ class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
++   FolderTreeBloc() : super(FolderTreeInitial()) {
++     on<FolderTreeEvent>((event, emit) async {
+        if (event is LoadEvent) {
+++        // if (folders.isNotEmpty) preFolders = folders;
+          folders = [];
+          emit(FolderTreeLoading());
+--        print(1);
+          final resp =
+-             await api.get(getFolderUrl("file", event.id), folderHeader);
+-         final json = jsonDecode(resp);
+-         final List itemList = json["files"];
+--        print(2);
+--
+-         folders =
+-             itemList.map((folderJson) => Folder.fromJson(folderJson)).toList();
+--        print(3);
+-         if (event.id == "") {
+-           foldersRoot = folders;
+--          print(4);
+--
++@@ -31,8 +33,26 @@ class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
+            addColorandIcon();
+          } else {
+            for (var element in folders) {
+--            print("${element.regdate} ....${element.size}");
+-+            // print(
+-+            //     "${element.regdate}....${element.formatBytes(element.size, 1)}");
++-            // print(
++-            //     "${element.regdate}....${element.formatBytes(element.size, 1)}");
+++            element.addColorandIcon(Colors.indigo, Icons.folder);
+++          }
+++        }
+++        emit(FolderTreeLoaded(folders));
+++      }
+++      if (event is SortEvent) {
+++        folders = [];
+++        emit(FolderTreeLoading());
+++        final resp = await api.get(
+++            sortFolderUrl("file", event.id, event.sort, event.order),
+++            folderHeader);
+++        final json = jsonDecode(resp);
+++        final List itemList = json["files"];
+++        folders =
+++            itemList.map((folderJson) => Folder.fromJson(folderJson)).toList();
+++        if (event.id == "") {
+++          foldersRoot = folders;
+++          addColorandIcon();
+++        } else {
+++          for (var element in folders) {
+              element.addColorandIcon(Colors.indigo, Icons.folder);
+            }
+          }
+-diff --git a/lib/bloc/login/bloc/login_bloc.dart b/lib/bloc/login_bloc/login_bloc.dart
+-similarity index 99%
+-rename from lib/bloc/login/bloc/login_bloc.dart
+-rename to lib/bloc/login_bloc/login_bloc.dart
+-index ae8bd59..bb06232 100644
+---- a/lib/bloc/login/bloc/login_bloc.dart
+-+++ b/lib/bloc/login_bloc/login_bloc.dart
+-@@ -1,6 +1,7 @@
+- // ignore: depend_on_referenced_packages
+- import 'package:bloc/bloc.dart';
+- import 'package:clouddisk_login_form/api/api_header.dart';
+-+import 'package:clouddisk_login_form/api/api_service.dart';
+- import 'package:clouddisk_login_form/api/api_url.dart';
+- import 'package:clouddisk_login_form/api/request/login_req.dart';
+- import 'package:clouddisk_login_form/api/response/login_res.dart';
+-@@ -8,8 +9,6 @@ import 'package:clouddisk_login_form/main.dart';
+- import 'package:clouddisk_login_form/models/user.dart';
+- import 'package:equatable/equatable.dart';
+- 
+--import 'package:clouddisk_login_form/api/api_service.dart';
+--
+- part 'login_event.dart';
+- part 'login_state.dart';
++diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
++index 7541c81..4491243 100644
++--- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
+++++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
++@@ -15,6 +15,11 @@ class LoadEvent extends FolderTreeEvent {
++   List<Object> get props => [id];
++ }
+  
+-diff --git a/lib/bloc/login/bloc/login_event.dart b/lib/bloc/login_bloc/login_event.dart
+-similarity index 100%
+-rename from lib/bloc/login/bloc/login_event.dart
+-rename to lib/bloc/login_bloc/login_event.dart
+-diff --git a/lib/bloc/login/bloc/login_state.dart b/lib/bloc/login_bloc/login_state.dart
+-similarity index 100%
+-rename from lib/bloc/login/bloc/login_state.dart
+-rename to lib/bloc/login_bloc/login_state.dart
++-class BackEvent extends FolderTreeEvent {
++-  const BackEvent();
+++class SortEvent extends FolderTreeEvent {
+++  final String id;
+++  final String sort;
+++  final String order;
+++  const SortEvent(this.id, this.sort, this.order);
+++  @override
+++  List<Object> get props => [id, sort, order];
++ }
+ diff --git a/lib/components/item_file.dart b/lib/components/item_file.dart
+-index f55ac60..5476855 100644
++index 5476855..0db8c9e 100644
+ --- a/lib/components/item_file.dart
+ +++ b/lib/components/item_file.dart
+-@@ -18,14 +18,32 @@ class ItemFile extends StatefulWidget {
++@@ -1,5 +1,4 @@
++ import 'package:clouddisk_login_form/global_variable/global_variable.dart';
++-import 'package:clouddisk_login_form/icons/app_icons.dart';
++ import 'package:clouddisk_login_form/models/item.dart';
++ import 'package:flutter/material.dart';
+  
++@@ -19,7 +18,6 @@ class ItemFile extends StatefulWidget {
+  class _ItemFileState extends State<ItemFile> {
+    bool isChecked = false;
+-+  bool hasThumbnail = false;
+-   late IconData iconData;
+-+  late Widget image;
+-+  Future getImage(String ext) async {
+-+    image = Image.network(
+-+      widget.item.buildThumbnail(ext),
+-+      height: 40,
+-+    );
+-+  }
+-+
++   bool hasThumbnail = false;
++-  late IconData iconData;
++   late Widget image;
++   Future getImage(String ext) async {
++     image = Image.network(
++@@ -29,69 +27,23 @@ class _ItemFileState extends State<ItemFile> {
++   }
++ 
+    @override
+-   void initState() {
+-+    //check thumbnail  != "" thi lay thubmnail
+-+    if (widget.item.buildThumbnail(widget.item.ext) != "") {
+-+      getImage(widget.item.ext).then((_) {
+-+        setState(() {
+-+          hasThumbnail = true;
+-+        });
++-  void initState() {
++-    //check thumbnail  != "" thi lay thubmnail
+++  Widget build(BuildContext context) {
++     if (widget.item.buildThumbnail(widget.item.ext) != "") {
++       getImage(widget.item.ext).then((_) {
++         setState(() {
++           hasThumbnail = true;
++         });
++       });
+++    } else {
+++      setState(() {
+++        hasThumbnail = false;
+ +      });
+-+    }
++     }
+      if (mapChecked[widget.item.id] == true) {
+        setState(() {
+          isChecked = true;
+        });
+      }
+-+    //gan icon dua vao extension
+-     if (widget.item.type == "file") {
+-       final List<String> text = widget.item.text.split(".");
+-       switch (text.last) {
+-@@ -98,47 +116,77 @@ class _ItemFileState extends State<ItemFile> {
+-         )),
++-    //gan icon dua vao extension
++-    if (widget.item.type == "file") {
++-      final List<String> text = widget.item.text.split(".");
++-      switch (text.last) {
++-        case "doc":
++-          iconData = AppIcon.fileWord;
++-          break;
++-        case "docx":
++-          iconData = AppIcon.fileWord;
++-          break;
++-        case "ppt":
++-          iconData = AppIcon.filePowerpoint;
++-          break;
++-        case "pptx":
++-          iconData = AppIcon.filePowerpoint;
++-          break;
++-        case "xls":
++-          iconData = AppIcon.fileExcel;
++-          break;
++-        case "xlsx":
++-          iconData = AppIcon.fileExcel;
++-          break;
++-        case "zip":
++-          iconData = AppIcon.fileArchive;
++-          break;
++-        case "pdf":
++-          iconData = AppIcon.filePdf;
++-          break;
++-        case "mp3":
++-          iconData = AppIcon.fileAudio;
++-          break;
++-        case "mp4":
++-          iconData = AppIcon.fileVideo;
++-          break;
++-        case "jpg":
++-          iconData = AppIcon.fileImage;
++-          break;
++-        case "png":
++-          iconData = AppIcon.fileImage;
++-          break;
++-        default:
++-          iconData = AppIcon.docText;
++-      }
++-    }
++-    super.initState();
++-  }
++-
++-  @override
++-  Widget build(BuildContext context) {
++     return InkWell(
++       onTap: () {
++         if (widget.item.type == "file") {
++@@ -109,44 +61,49 @@ class _ItemFileState extends State<ItemFile> {
++       child: Container(
++         padding: const EdgeInsets.only(top: 10, bottom: 10, left: 12),
++         decoration: BoxDecoration(
++-            border: Border(
++-          bottom: BorderSide(
++-            color: Colors.grey.shade300,
+++          border: Border(
+++            bottom: BorderSide(
+++              color: Colors.grey.shade300,
+++            ),
++           ),
++-        )),
+++        ),
+          child: Row(
+            children: [
+--            widget.item.type == "dir"
+--                ? Container(
+--                    padding: const EdgeInsets.all(8),
+--                    decoration: BoxDecoration(
+--                      shape: BoxShape.circle,
+--                      color: widget.item.color,
+--                    ),
+--                    child: Icon(
+--                      widget.item.icon,
+--                      color: Colors.white,
+--                      size: 24,
+--                    ),
+--                  )
+--                : Container(
+--                    // width: 55,
+--                    padding: const EdgeInsets.all(8),
+--                    decoration: BoxDecoration(
+--                      shape: BoxShape.rectangle,
+--                      color: Colors.grey.shade400,
+--                      borderRadius: const BorderRadius.all(
+--                        Radius.circular(5),
+--                      ),
+--                    ),
+--                    child: Icon(
+--                      iconData,
+--                      color: Colors.white,
+--                      size: 24,
+--                    )),
+-+            if (widget.item.type == "dir")
+-+              Container(
+-+                padding: const EdgeInsets.all(8),
+-+                decoration: BoxDecoration(
+-+                  shape: BoxShape.circle,
+-+                  color: widget.item.color,
+-+                ),
+-+                child: Icon(
+-+                  widget.item.icon,
+-+                  color: Colors.white,
+-+                  size: 24,
+-+                ),
+-+              )
+-+            else if (!hasThumbnail)
+-+              Container(
+-+                padding: const EdgeInsets.all(8),
+-+                decoration: BoxDecoration(
+-+                  shape: BoxShape.rectangle,
+-+                  color: Colors.grey.shade400,
+-+                  borderRadius: const BorderRadius.all(
+-+                    Radius.circular(5),
+-+                  ),
+-+                ),
+-+                child: Icon(
+-+                  iconData,
+-+                  color: Colors.white,
+-+                  size: 24,
+-+                ),
+-+              )
+-+            else
+-+              image,
+-             const SizedBox(
+-               width: 12,
+-             ),
+-             Expanded(
+-               flex: 2,
+--              child: Text(
+--                widget.item.text,
+--                overflow: TextOverflow.ellipsis,
+--                style: const TextStyle(
+--                  fontSize: 16,
+--                  fontWeight: FontWeight.w400,
+--                  color: Color(0xff121212),
++-            if (widget.item.type == "dir")
++-              Container(
++-                padding: const EdgeInsets.all(8),
++-                decoration: BoxDecoration(
++-                  shape: BoxShape.circle,
++-                  color: widget.item.color,
+ -                ),
+-+              child: Column(
+-+                crossAxisAlignment: CrossAxisAlignment.start,
+-+                children: [
+-+                  Text(
+-+                    widget.item.text,
+-+                    overflow: TextOverflow.ellipsis,
+-+                    style: const TextStyle(
+-+                      fontSize: 16,
+-+                      fontWeight: FontWeight.w400,
+-+                      color: Color(0xff121212),
++-                child: Icon(
++-                  widget.item.icon,
++-                  color: Colors.white,
++-                  size: 24,
++-                ),
++-              )
++-            else if (!hasThumbnail)
++-              Container(
++-                padding: const EdgeInsets.all(8),
++-                decoration: BoxDecoration(
++-                  shape: BoxShape.rectangle,
++-                  color: Colors.grey.shade400,
++-                  borderRadius: const BorderRadius.all(
++-                    Radius.circular(5),
+++            //Stack để khi load thumbnail xong sẽ đè lên icon, không bị xấu UI. Không dùng stack thì sẽ gây hiện tượng thụt vào thụt ra của content
+++            Stack(
+++              children: [
+++                if (widget.item.type == "dir")
+++                  Container(
+++                    padding: const EdgeInsets.all(8),
+++                    decoration: BoxDecoration(
+++                      shape: BoxShape.circle,
+++                      color: widget.item.color,
+++                    ),
+++                    child: Icon(
+++                      widget.item.icon,
+++                      color: Colors.white,
+++                      size: 24,
+ +                    ),
+-+                  ),
+-+                  const SizedBox(height: 6),
+-+                  Row(
+-+                    children: [
+-+                      Text(
+-+                        widget.item.formatBytes(widget.item.size, 1),
+-+                        style: const TextStyle(
+-+                          fontSize: 12,
+-+                          fontWeight: FontWeight.w400,
+-+                          color: Colors.black54,
+-+                        ),
+-+                      ),
+-+                      const SizedBox(width: 8),
+-+                      Text(
+-+                        widget.item.formatDates(widget.item.regdate),
+-+                        style: const TextStyle(
+-+                          fontSize: 12,
+-+                          fontWeight: FontWeight.w400,
+-+                          color: Colors.black54,
+-+                        ),
+-+                      )
+-+                    ],
+ +                  )
+-+                ],
+-               ),
+++                else
+++                  Container(
+++                    padding: const EdgeInsets.all(8),
+++                    decoration: BoxDecoration(
+++                      shape: BoxShape.rectangle,
+++                      color: Colors.grey.shade400,
+++                      borderRadius: const BorderRadius.all(
+++                        Radius.circular(5),
+++                      ),
+++                    ),
+++                    child: Icon(
+++                      widget.item.icon,
+++                      color: Colors.white,
+++                      size: 24,
+++                    ),
++                   ),
++-                ),
++-                child: Icon(
++-                  iconData,
++-                  color: Colors.white,
++-                  size: 24,
++-                ),
++-              )
++-            else
++-              image,
+++                if (hasThumbnail) image,
+++              ],
+++            ),
++             const SizedBox(
++               width: 12,
+              ),
+-             (widget.item.type == "file")
++diff --git a/lib/global_variable/global_variable.dart b/lib/global_variable/global_variable.dart
++index 3e247b3..4c9518a 100644
++--- a/lib/global_variable/global_variable.dart
+++++ b/lib/global_variable/global_variable.dart
++@@ -1 +1,6 @@
++ Map<String, dynamic> mapChecked = {};
+++bool isSort = false;
+++String sortType = "size";
+++String order = "asc";
+++String currentId = "";
+++String preId = "";
+ diff --git a/lib/main.dart b/lib/main.dart
+-index 92b452b..3464086 100644
++index 3464086..ead0f9f 100644
+ --- a/lib/main.dart
+ +++ b/lib/main.dart
+-@@ -1,5 +1,5 @@
+- import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+--import 'package:clouddisk_login_form/bloc/login/bloc/login_bloc.dart';
+-+import 'package:clouddisk_login_form/bloc/login_bloc/login_bloc.dart';
+- import 'package:clouddisk_login_form/models/user.dart';
+- import 'package:clouddisk_login_form/presentation/pages/home_page/home_page.dart';
+- import 'package:clouddisk_login_form/presentation/pages/login_page/login_screen.dart';
++@@ -38,6 +38,7 @@ class MyHomePage extends StatefulWidget {
++ 
++ class _MyHomePageState extends State<MyHomePage> {
++   final LoginBloc loginBloc = LoginBloc();
+++
++   bool hasCookie = true;
++   var session = "";
++   var hmailkey = "";
+ diff --git a/lib/models/item.dart b/lib/models/item.dart
+-index 4be4b11..22ca5ce 100644
++index 22ca5ce..cb03c4b 100644
+ --- a/lib/models/item.dart
+ +++ b/lib/models/item.dart
+-@@ -1,40 +1,74 @@
+-+import 'dart:math';
+-+
+- import 'package:flutter/material.dart';
+-+import 'package:intl/intl.dart';
++@@ -1,5 +1,6 @@
++ import 'dart:math';
+  
+- class Item {
+-   final String id;
+-   final String text;
+-   final String type;
+--  final String regdate;
+-   final String size;
+--  Item(this.id, this.text, this.type, this.regdate, this.size);
+-+  final String regdate;
+-+  final String ext;
+-+  Item(
+-+    this.id,
+-+    this.text,
+-+    this.type,
+-+    this.size,
+-+    this.regdate,
+-+    this.ext,
+-+  );
+- }
+++import 'package:clouddisk_login_form/icons/app_icons.dart';
++ import 'package:flutter/material.dart';
++ import 'package:intl/intl.dart';
+  
+- class Folder extends Item {
+-   Color? color;
+-   IconData? icon;
+--  Folder(String id, String text, String type, String regdate, String size,
+--      this.color, this.icon)
+--      : super(id, text, type, regdate, size);
+-+  Folder(String id, String text, String type, String size, String regdate,
+-+      String ext, this.color, this.icon)
+-+      : super(id, text, type, size, regdate, ext);
++@@ -28,8 +29,52 @@ class Folder extends Item {
++       : super(id, text, type, size, regdate, ext);
+  
+    void addColorandIcon(Color color, IconData icon) {
+-     this.color = color;
+-     this.icon = icon;
++-    this.color = color;
++-    this.icon = icon;
+++    if (type == "file") {
+++      final List<String> texts = text.split(".");
+++      switch (texts.last) {
+++        case "doc":
+++          this.icon = AppIcon.fileWord;
+++          break;
+++        case "docx":
+++          this.icon = AppIcon.fileWord;
+++          break;
+++        case "ppt":
+++          this.icon = AppIcon.filePowerpoint;
+++          break;
+++        case "pptx":
+++          this.icon = AppIcon.filePowerpoint;
+++          break;
+++        case "xls":
+++          this.icon = AppIcon.fileExcel;
+++          break;
+++        case "xlsx":
+++          this.icon = AppIcon.fileExcel;
+++          break;
+++        case "zip":
+++          this.icon = AppIcon.fileArchive;
+++          break;
+++        case "pdf":
+++          this.icon = AppIcon.filePdf;
+++          break;
+++        case "mp3":
+++          this.icon = AppIcon.fileAudio;
+++          break;
+++        case "mp4":
+++          this.icon = AppIcon.fileVideo;
+++          break;
+++        case "jpg":
+++          this.icon = AppIcon.fileImage;
+++          break;
+++        case "png":
+++          this.icon = AppIcon.fileImage;
+++          break;
+++        default:
+++          this.icon = AppIcon.docText;
+++      }
+++    } else {
+++      this.color = color;
+++      this.icon = icon;
+++    }
+    }
+  
+-+  String formatBytes(String size, int decimals) {
+-+    //decimals: làm tròn tới decimals số thập phân
+-+    int bytes = int.parse(size);
+-+    if (bytes <= 0) return "0 B";
+-+    const suffixes = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
+-+    var i = (log(bytes) / log(1024)).floor();
+-+    return '${(bytes / pow(1024, i)).toStringAsFixed(decimals)} ${suffixes[i]}';
+-+  }
+-+
+-+  String formatDates(String regdate) {
+-+    if (regdate == "0") return "";
+-+    int milisecond = int.parse(regdate);
+-+    DateTime date = DateTime.fromMillisecondsSinceEpoch(milisecond * 1000);
+-+    String dateString = DateFormat("yyyy/MM/dd").format(date);
+-+    return dateString;
+-+  }
+-+
+-+  String buildThumbnail(String ext) {
+-+    if (ext[0] != "/") return "";
+-+    return "https://groupware57.hanbiro.net${ext}_76x76.png";
+-+  }
+-+
+-   factory Folder.fromJson(Map<String, dynamic> json) {
+-     return Folder(
+--      json['id'] as String,
+--      json['text'] as String,
+--      json['type'] as String,
+--      json['regdate'] as String,
+--      json['size'] as String,
+-+      json["id"] as String,
+-+      json["text"] as String,
+-+      json["type"] as String,
+-+      "${json["size"]}", //vì api trả về nếu >0 => String, = 0 thì là int
+-+      "${json["regdate"]}", //vì api trả về nếu >0 => String, = 0 thì là int
+-+      "${json["ext"]}",
+-       null,
+-       null,
+-     );
++   String formatBytes(String size, int decimals) {
++@@ -68,10 +113,12 @@ class Folder extends Item {
+    }
+  
+    @override
+--  String toString() => 'Folder(id: $id, text: $text, type: $type)';
+-+  String toString() => "Folder(id: $id, text: $text, type: $type)";
++-  String toString() => "Folder(id: $id, text: $text, type: $type)";
+++  String toString() =>
+++      "Folder(id: $id, text: $text, type: $type, size: $size, regdate: $regdate, ext: $ext, icon: $icon, color: $color)";
+  }
+  
+  List<Folder> folders = [];
+++List<Folder> preFolders = [];
++ List<Folder> foldersRoot = [];
++ 
++ void addColorandIcon() {
++@@ -84,3 +131,20 @@ void addColorandIcon() {
++   foldersRoot[6].addColorandIcon(Colors.teal.shade700, Icons.source);
++   foldersRoot[7].addColorandIcon(Colors.red.shade900, Icons.delete_outline);
++ }
+++
+++// void sortListItem(List<Folder> folders, int sortType, int order) {
+++//   if (sortType == 0) {
+++//     if (order == 0) {
+++//       folders.sort((a, b) {
+++//         return int.parse(a.size).compareTo(int.parse(b.size));
+++//       });
+++//       // print(folders);
+++//     }
+++//     if (order == 1) {
+++//       folders.sort((a, b) {
+++//         return int.parse(b.size).compareTo(int.parse(a.size));
+++//       });
+++//       // print(folders);
+++//     }
+++//   }
+++// }
+ diff --git a/lib/presentation/pages/home_page/home_page.dart b/lib/presentation/pages/home_page/home_page.dart
+-index 05c43c7..b44e99f 100644
++index b44e99f..f55813b 100644
+ --- a/lib/presentation/pages/home_page/home_page.dart
+ +++ b/lib/presentation/pages/home_page/home_page.dart
+-@@ -14,11 +14,120 @@ class HomePage extends StatefulWidget {
++@@ -1,6 +1,11 @@
+++// ignore_for_file: public_member_api_docs, sort_constructors_first
+++import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+++
+++import 'package:flutter/material.dart';
+++
++ import 'package:clouddisk_login_form/global_variable/global_variable.dart';
++ import 'package:clouddisk_login_form/presentation/screens/folder_screen.dart';
++-import 'package:flutter/material.dart';
+++import 'package:flutter_bloc/flutter_bloc.dart';
++ 
++ class HomePage extends StatefulWidget {
++   const HomePage({
++@@ -14,181 +19,101 @@ class HomePage extends StatefulWidget {
+  class _HomePageState extends State<HomePage> {
+    final navKey = GlobalKey<NavigatorState>();
+    var path = "";
+-+  int selectedIndex = 0;
+-+  int selectedRadioTile = 0;
+-+  setSelectedRadioTile(int val) {
+-+    setState(() {
+-+      selectedRadioTile = val;
+-+    });
++-  int selectedIndex = 0;
++-  int selectedRadioTile = 0;
++-  setSelectedRadioTile(int val) {
++-    setState(() {
++-      selectedRadioTile = val;
++-    });
++-  }
++ 
++-  @override
++-  Widget build(BuildContext context) {
++-    Future pushDialog() {
++-      return showDialog(
++-          useRootNavigator: false,
+++  void onSelected(BuildContext context, int value) {
+++    switch (value) {
+++      case 0:
+++        showDialog(
++           context: context,
++           builder: (context) {
++-            int selectedRadio = 0;
++-            return AlertDialog(
++-              contentPadding: EdgeInsets.zero,
++-              content: SizedBox(
++-                width: 170,
++-                height: 250,
++-                child: Row(
++-                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
++-                  crossAxisAlignment: CrossAxisAlignment.start,
++-                  children: [
++-                    Padding(
++-                      padding: const EdgeInsets.only(top: 12, left: 12),
++-                      child: Column(
++-                        crossAxisAlignment: CrossAxisAlignment.start,
++-                        children: [
++-                          const Text(
++-                            "Sort Type",
++-                            style: TextStyle(
++-                              color: Colors.black54,
++-                            ),
++-                          ),
++-                          // StatefulBuilder(builder:
++-                          //     (BuildContext context, StateSetter setState) {
++-                          //   List<String> list = ["Size", "File Name", "Date"];
++-                          //   return Column(
++-                          //     mainAxisSize: MainAxisSize.min,
++-                          //     children: List<Widget>.generate(3, (int index) {
++-                          //       return Row(
++-                          //         children: [
++-                          //           Radio<int>(
++-                          //             value: index,
++-                          //             groupValue: selectedRadio,
++-                          //             onChanged: (value) {
++-                          //               setState(() => selectedRadio = value!);
++-                          //             },
++-                          //           ),
++-                          //           const SizedBox(width: 8),
++-                          //           Text(list[index]),
++-                          //         ],
++-                          //       );
++-                          //     }),
++-                          //   );
++-                          // }),
++-                          const Text(
++-                            "Order",
++-                            style: TextStyle(
++-                              color: Colors.black54,
++-                            ),
++-                          ),
++-                        ],
++-                      ),
++-                    ),
++-                    InkWell(
++-                      onTap: () {
++-                        Navigator.of(context).pop();
++-                      },
++-                      child: const Icon(
++-                        Icons.close,
++-                        color: Colors.black54,
++-                        size: 36,
++-                      ),
++-                    )
++-                  ],
++-                ),
++-              ),
++-              actions: [
++-                ElevatedButton(
++-                  onPressed: () {},
++-                  style: ElevatedButton.styleFrom(
++-                    backgroundColor: Colors.grey.shade300,
++-                    padding: EdgeInsets.zero,
++-                    fixedSize: const Size(135, 40),
++-                  ),
++-                  child: const Text(
++-                    "SAVE AS DEFAULT",
++-                    style: TextStyle(fontSize: 12),
++-                  ),
++-                ),
++-                ElevatedButton(
++-                  onPressed: () {},
++-                  style: ElevatedButton.styleFrom(
++-                    backgroundColor: Colors.grey.shade300,
++-                    padding: EdgeInsets.zero,
++-                    fixedSize: const Size(135, 40),
++-                  ),
++-                  child: const Text(
++-                    "SAVE",
++-                    style: TextStyle(fontSize: 12),
++-                  ),
++-                ),
++-              ],
+++            return MyDialog(
+++              onValueChange: (int value1, int value2) {
+++                switch (value1) {
+++                  case 0:
+++                    sortType = "size";
+++                    break;
+++                  case 1:
+++                    sortType = "name";
+++                    break;
+++                  case 2:
+++                    sortType = "time";
+++                    break;
+++                }
+++                switch (value2) {
+++                  case 0:
+++                    order = "asc";
+++                    break;
+++                  case 1:
+++                    order = "desc";
+++                    break;
+++                }
+++              },
+++              onSave: () {
+++                print("Sort Type: $sortType");
+++                print("Order: $order");
+++              },
++             );
++-          });
++-    }
++-
++-    void onSelected(BuildContext context, int value) {
++-      switch (value) {
++-        case 0:
++-          pushDialog();
++-          break;
++-        default:
++-      }
+++          },
+++        );
+++        break;
++     }
+ +  }
+-+
+-   @override
+-   Widget build(BuildContext context) {
+-+    Future pushDialog() {
+-+      return showDialog(
+-+          useRootNavigator: false,
+-+          context: context,
+-+          builder: (context) {
+-+            int selectedRadio = 0;
+-+            return AlertDialog(
+-+              contentPadding: EdgeInsets.zero,
+-+              content: SizedBox(
+-+                width: 170,
+-+                height: 250,
+-+                child: Row(
+-+                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
+-+                  crossAxisAlignment: CrossAxisAlignment.start,
+-+                  children: [
+-+                    Padding(
+-+                      padding: const EdgeInsets.only(top: 12, left: 12),
+-+                      child: Column(
+-+                        crossAxisAlignment: CrossAxisAlignment.start,
+-+                        children: [
+-+                          const Text(
+-+                            "Sort Type",
+-+                            style: TextStyle(
+-+                              color: Colors.black54,
+-+                            ),
+-+                          ),
+-+                          // StatefulBuilder(builder:
+-+                          //     (BuildContext context, StateSetter setState) {
+-+                          //   List<String> list = ["Size", "File Name", "Date"];
+-+                          //   return Column(
+-+                          //     mainAxisSize: MainAxisSize.min,
+-+                          //     children: List<Widget>.generate(3, (int index) {
+-+                          //       return Row(
+-+                          //         children: [
+-+                          //           Radio<int>(
+-+                          //             value: index,
+-+                          //             groupValue: selectedRadio,
+-+                          //             onChanged: (value) {
+-+                          //               setState(() => selectedRadio = value!);
+-+                          //             },
+-+                          //           ),
+-+                          //           const SizedBox(width: 8),
+-+                          //           Text(list[index]),
+-+                          //         ],
+-+                          //       );
+-+                          //     }),
+-+                          //   );
+-+                          // }),
+-+                          const Text(
+-+                            "Order",
+-+                            style: TextStyle(
+-+                              color: Colors.black54,
+-+                            ),
+-+                          ),
+-+                        ],
+-+                      ),
+-+                    ),
+-+                    InkWell(
+-+                      onTap: () {
+-+                        Navigator.of(context).pop();
+-+                      },
+-+                      child: const Icon(
+-+                        Icons.close,
+-+                        color: Colors.black54,
+-+                        size: 36,
++ 
+++  @override
+++  Widget build(BuildContext context) {
++     return Scaffold(
++-      appBar: PreferredSize(
++-        preferredSize: const Size.fromHeight(50),
++-        child: AppBar(
++-          elevation: 0,
++-          automaticallyImplyLeading: false, //turn off leading
++-          title: Row(
++-            children: [
++-              const Text(
++-                "Home",
++-                style: TextStyle(
++-                  color: Colors.white,
++-                ),
+++      appBar: AppBar(
+++        elevation: 0,
+++        automaticallyImplyLeading: false, //turn off leading
+++        title: Row(
+++          children: [
+++            const Text(
+++              "Home",
+++              style: TextStyle(
+++                color: Colors.white,
++               ),
++-              Text(
++-                " ${mapChecked.isNotEmpty ? "(" : ""}${mapChecked.isNotEmpty ? mapChecked.length : ""}${mapChecked.isNotEmpty ? ")" : ""}",
++-                style: const TextStyle(
++-                  color: Colors.amberAccent,
++-                ),
++-              ),
++-            ],
++-          ),
++-          actions: [
++-            mapChecked.isNotEmpty
++-                ? IconButton(
++-                    icon: const Icon(
++-                      Icons.send,
++-                      color: Colors.white,
++-                    ),
++-                    onPressed: () {
++-                      ScaffoldMessenger.of(context).showSnackBar(
++-                        const SnackBar(
++-                          content: Text("Đang gửi..."),
++-                        ),
++-                      );
++-                    },
++-                  )
++-                : Container(),
++-            Theme(
++-              data: Theme.of(context).copyWith(
++-                  iconTheme: const IconThemeData(color: Colors.white),
++-                  textTheme: const TextTheme().apply(bodyColor: Colors.white)),
++-              child: PopupMenuButton<int>(
++-                color: Colors.indigo,
++-                onSelected: (value) {
++-                  onSelected(context, value);
++-                },
++-                itemBuilder: ((context) {
++-                  return [
++-                    popupMenuItem("Sort"),
++-                  ];
++-                }),
+++            ),
+++            Text(
+++              " ${mapChecked.isNotEmpty ? "(" : ""}${mapChecked.isNotEmpty ? mapChecked.length : ""}${mapChecked.isNotEmpty ? ")" : ""}",
+++              style: const TextStyle(
+++                color: Colors.amberAccent,
++               ),
++             ),
++           ],
++         ),
+++        actions: [
+++          mapChecked.isNotEmpty
+++              ? IconButton(
+++                  icon: const Icon(
+++                    Icons.send,
+++                    color: Colors.white,
+++                  ),
+++                  onPressed: () {
+++                    ScaffoldMessenger.of(context).showSnackBar(
+++                      const SnackBar(
+++                        content: Text("Đang gửi..."),
+ +                      ),
+-+                    )
+-+                  ],
+-+                ),
+++                    );
+++                  },
+++                )
+++              : Container(),
+++          Theme(
+++            data: Theme.of(context).copyWith(
+++                iconTheme: const IconThemeData(color: Colors.white),
+++                textTheme: const TextTheme().apply(bodyColor: Colors.white)),
+++            child: PopupMenuButton<int>(
+++              color: Colors.indigo,
+++              onSelected: (value) {
+++                onSelected(context, value);
+++              },
+++              itemBuilder: ((context) {
+++                return [
+++                  popupMenuItem("Sort"),
+++                ];
+++              }),
+++            ),
+++          ),
+++        ],
++       ),
++       body: WillPopScope(
++         onWillPop: () async {
++@@ -260,3 +185,159 @@ class _HomePageState extends State<HomePage> {
++     );
++   }
++ }
+++
+++class RadioList extends StatefulWidget {
+++  const RadioList({
+++    Key? key,
+++    required this.listItem,
+++    required this.onTap,
+++  }) : super(key: key);
+++  final List<String> listItem;
+++  final void Function(int) onTap;
+++  @override
+++  State<RadioList> createState() => _RadioListState();
+++}
+++
+++class _RadioListState extends State<RadioList> {
+++  int selectedRadio = 0;
+++  @override
+++  Widget build(BuildContext context) {
+++    return Column(
+++      crossAxisAlignment: CrossAxisAlignment.start,
+++      children: widget.listItem.map((item) {
+++        return InkWell(
+++          onTap: () {
+++            setState(() {
+++              selectedRadio = widget.listItem.indexOf(item);
+++              widget.onTap(selectedRadio);
+++            });
+++          },
+++          child: Row(
+++            children: [
+++              Radio(
+++                value: widget.listItem.indexOf(item),
+++                groupValue: selectedRadio,
+++                onChanged: (value) {
+++                  setState(() {
+++                    selectedRadio = value!;
+++                    widget.onTap(selectedRadio);
+++                  });
+++                },
+++              ),
+++              SizedBox(
+++                width: 180,
+++                child: Text(item),
+ +              ),
+-+              actions: [
+-+                ElevatedButton(
+-+                  onPressed: () {},
+-+                  style: ElevatedButton.styleFrom(
+-+                    backgroundColor: Colors.grey.shade300,
+-+                    padding: EdgeInsets.zero,
+-+                    fixedSize: const Size(135, 40),
+++            ],
+++          ),
+++        );
+++      }).toList(),
+++    );
+++  }
+++}
+++
+++class MyDialog extends StatefulWidget {
+++  const MyDialog({
+++    Key? key,
+++    required this.onValueChange,
+++    required this.onSave,
+++  }) : super(key: key);
+++  final void Function(int, int) onValueChange;
+++  final VoidCallback onSave;
+++  @override
+++  State<MyDialog> createState() => _MyDialogState();
+++}
+++
+++class _MyDialogState extends State<MyDialog> {
+++  int sortType = 0;
+++  int order = 0;
+++  @override
+++  Widget build(BuildContext context) {
+++    return AlertDialog(
+++      contentPadding: EdgeInsets.zero,
+++      content: SizedBox(
+++        width: 170,
+++        height: 300,
+++        child: Row(
+++          mainAxisAlignment: MainAxisAlignment.spaceBetween,
+++          crossAxisAlignment: CrossAxisAlignment.start,
+++          children: [
+++            Padding(
+++              padding: const EdgeInsets.only(top: 12, left: 12),
+++              child: Column(
+++                crossAxisAlignment: CrossAxisAlignment.start,
+++                children: [
+++                  const Text(
+++                    "Sort Type",
+++                    style: TextStyle(
+++                      color: Colors.black54,
+++                    ),
+ +                  ),
+-+                  child: const Text(
+-+                    "SAVE AS DEFAULT",
+-+                    style: TextStyle(fontSize: 12),
+++                  RadioList(
+++                    listItem: const ["Size", "File Name", "Date"],
+++                    onTap: (value) {
+++                      sortType = value;
+++                      widget.onValueChange(sortType, order);
+++                    },
+ +                  ),
+-+                ),
+-+                ElevatedButton(
+-+                  onPressed: () {},
+-+                  style: ElevatedButton.styleFrom(
+-+                    backgroundColor: Colors.grey.shade300,
+-+                    padding: EdgeInsets.zero,
+-+                    fixedSize: const Size(135, 40),
+++                  const Text(
+++                    "Order",
+++                    style: TextStyle(
+++                      color: Colors.black54,
+++                    ),
+ +                  ),
+-+                  child: const Text(
+-+                    "SAVE",
+-+                    style: TextStyle(fontSize: 12),
+++                  RadioList(
+++                    listItem: const ["Ascending", "Descending"],
+++                    onTap: (value) {
+++                      order = value;
+++                      widget.onValueChange(sortType, order);
+++                    },
+ +                  ),
+-+                ),
+-+              ],
+-+            );
+-+          });
+-+    }
+++                ],
+++              ),
+++            ),
+++            InkWell(
+++              onTap: () {
+++                Navigator.of(context).pop();
+++              },
+++              child: const Icon(
+++                Icons.close,
+++                color: Colors.black54,
+++                size: 36,
+++              ),
+++            )
+++          ],
+++        ),
+++      ),
+++      actions: [
+++        ElevatedButton(
+++          onPressed: () {},
+++          style: ElevatedButton.styleFrom(
+++            backgroundColor: Colors.grey.shade300,
+++            padding: EdgeInsets.zero,
+++            fixedSize: const Size(135, 40),
+++          ),
+++          child: const Text(
+++            "SAVE AS DEFAULT",
+++            style: TextStyle(fontSize: 12),
+++          ),
+++        ),
+++        ElevatedButton(
+++          onPressed: () {
+++            Navigator.of(context).pop();
+++            widget.onSave();
+++          },
+++          style: ElevatedButton.styleFrom(
+++            backgroundColor: Colors.grey.shade300,
+++            padding: EdgeInsets.zero,
+++            fixedSize: const Size(135, 40),
+++          ),
+++          child: const Text(
+++            "SAVE",
+++            style: TextStyle(fontSize: 12),
+++          ),
+++        ),
+++      ],
+++    );
+++  }
+++}
++diff --git a/lib/presentation/screens/folder_screen.dart b/lib/presentation/screens/folder_screen.dart
++index e2bbd7a..d6ca771 100644
++--- a/lib/presentation/screens/folder_screen.dart
+++++ b/lib/presentation/screens/folder_screen.dart
++@@ -19,6 +19,7 @@ class FolderScreen extends StatefulWidget {
++ 
++ class _FolderScreenState extends State<FolderScreen> {
++   final FolderTreeBloc folderTreeBloc = FolderTreeBloc();
+ +
+-     void onSelected(BuildContext context, int value) {
+-       switch (value) {
+-         case 0:
+-+          pushDialog();
+-           break;
+-         default:
+-       }
+-diff --git a/lib/presentation/pages/login_page/login_screen.dart b/lib/presentation/pages/login_page/login_screen.dart
+-index 484bba0..327a81d 100644
+---- a/lib/presentation/pages/login_page/login_screen.dart
+-+++ b/lib/presentation/pages/login_page/login_screen.dart
+-@@ -1,5 +1,5 @@
+- import 'package:clouddisk_login_form/api/request/login_req.dart';
+--import 'package:clouddisk_login_form/bloc/login/bloc/login_bloc.dart';
+-+import 'package:clouddisk_login_form/bloc/login_bloc/login_bloc.dart';
+- import 'package:clouddisk_login_form/components/auth_button.dart';
+- import 'package:clouddisk_login_form/components/auth_input.dart';
+- import 'package:clouddisk_login_form/presentation/pages/home_page/home_page.dart';
+-diff --git a/pubspec.lock b/pubspec.lock
+-index 23927e5..8bc031c 100644
+---- a/pubspec.lock
+-+++ b/pubspec.lock
+-@@ -121,6 +121,13 @@ packages:
+-       url: "https://pub.dartlang.org"
+-     source: hosted
+-     version: "4.0.2"
+-+  intl:
+-+    dependency: "direct main"
+-+    description:
+-+      name: intl
+-+      url: "https://pub.dartlang.org"
+-+    source: hosted
+-+    version: "0.18.0"
+-   js:
+-     dependency: transitive
+-     description:
+-diff --git a/pubspec.yaml b/pubspec.yaml
+-index b946b46..2d3d124 100644
+---- a/pubspec.yaml
+-+++ b/pubspec.yaml
+-@@ -37,8 +37,9 @@ dependencies:
+-   cupertino_icons: ^1.0.2
+-   dio: ^4.0.6
+-   flutter_bloc: ^8.1.1
+--  equatable:
+-+  equatable: ^2.0.5
+-   shared_preferences: ^2.0.15
+-+  intl: ^0.18.0
+- dev_dependencies:
+-   flutter_test:
+-     sdk: flutter
++   @override
++   void initState() {
++     folderTreeBloc.add(LoadEvent(widget.folderId));
++@@ -37,27 +38,26 @@ class _FolderScreenState extends State<FolderScreen> {
++       create: (context) => folderTreeBloc,
++       child: BlocBuilder<FolderTreeBloc, FolderTreeState>(
++         builder: (context, state) {
++-          if (state is FolderTreeLoading) {
++-            return const Center(
++-              child: CircularProgressIndicator(),
++-            );
++-          } else if (state is FolderTreeLoaded) {
++-            return Scaffold(
++-              body: Column(
++-                children: [
++-                  widget.folderId == ""
++-                      ? Container()
++-                      : Container(
++-                          width: double.infinity,
++-                          padding: const EdgeInsets.only(
++-                              left: 12, top: 8, bottom: 8),
++-                          decoration:
++-                              BoxDecoration(color: Colors.cyan.shade100),
++-                          child: Text(
++-                            widget.currentPath,
++-                            style: const TextStyle(fontSize: 16),
++-                          ),
+++          return Scaffold(
+++            body: Column(
+++              children: [
+++                widget.folderId == ""
+++                    ? Container()
+++                    : Container(
+++                        width: double.infinity,
+++                        padding:
+++                            const EdgeInsets.only(left: 12, top: 8, bottom: 8),
+++                        decoration: BoxDecoration(color: Colors.cyan.shade100),
+++                        child: Text(
+++                          widget.currentPath,
+++                          style: const TextStyle(fontSize: 16),
++                         ),
+++                      ),
+++                if (state is FolderTreeLoading)
+++                  const Center(
+++                    child: CircularProgressIndicator(),
+++                  )
+++                else if (state is FolderTreeLoaded)
++                   Expanded(
++                     child: ListItems(
++                       items: state.items,
++@@ -66,11 +66,9 @@ class _FolderScreenState extends State<FolderScreen> {
++                       },
++                     ),
++                   ),
++-                ],
++-              ),
++-            );
++-          }
++-          return Container();
+++              ],
+++            ),
+++          );
++         },
++       ),
++     );
 diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
-index 87c64e5..f566a5a 100644
+index f566a5a..7667865 100644
 --- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
 +++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
-@@ -5,6 +5,7 @@ import 'package:bloc/bloc.dart';
- import 'package:clouddisk_login_form/api/api_header.dart';
- import 'package:clouddisk_login_form/api/api_url.dart';
- import 'package:clouddisk_login_form/api/api_service.dart';
-+import 'package:clouddisk_login_form/global_variable/global_variable.dart';
- import 'package:equatable/equatable.dart';
- 
- import 'package:clouddisk_login_form/models/item.dart';
-@@ -18,6 +19,7 @@ class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
+@@ -19,7 +19,7 @@ class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
    FolderTreeBloc() : super(FolderTreeInitial()) {
      on<FolderTreeEvent>((event, emit) async {
        if (event is LoadEvent) {
-+        // if (folders.isNotEmpty) preFolders = folders;
+-        // if (folders.isNotEmpty) preFolders = folders;
++        print(1);
          folders = [];
          emit(FolderTreeLoading());
          final resp =
-@@ -31,8 +33,26 @@ class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
-           addColorandIcon();
-         } else {
-           for (var element in folders) {
--            // print(
--            //     "${element.regdate}....${element.formatBytes(element.size, 1)}");
-+            element.addColorandIcon(Colors.indigo, Icons.folder);
-+          }
-+        }
-+        emit(FolderTreeLoaded(folders));
-+      }
-+      if (event is SortEvent) {
-+        folders = [];
-+        emit(FolderTreeLoading());
-+        final resp = await api.get(
-+            sortFolderUrl("file", event.id, event.sort, event.order),
-+            folderHeader);
-+        final json = jsonDecode(resp);
-+        final List itemList = json["files"];
-+        folders =
-+            itemList.map((folderJson) => Folder.fromJson(folderJson)).toList();
-+        if (event.id == "") {
-+          foldersRoot = folders;
-+          addColorandIcon();
-+        } else {
-+          for (var element in folders) {
+@@ -36,9 +36,12 @@ class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
              element.addColorandIcon(Colors.indigo, Icons.folder);
            }
          }
-diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
-index 7541c81..4491243 100644
---- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
-+++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
-@@ -15,6 +15,11 @@ class LoadEvent extends FolderTreeEvent {
-   List<Object> get props => [id];
- }
- 
--class BackEvent extends FolderTreeEvent {
--  const BackEvent();
-+class SortEvent extends FolderTreeEvent {
-+  final String id;
-+  final String sort;
-+  final String order;
-+  const SortEvent(this.id, this.sort, this.order);
-+  @override
-+  List<Object> get props => [id, sort, order];
- }
-diff --git a/lib/components/item_file.dart b/lib/components/item_file.dart
-index 5476855..0db8c9e 100644
---- a/lib/components/item_file.dart
-+++ b/lib/components/item_file.dart
-@@ -1,5 +1,4 @@
- import 'package:clouddisk_login_form/global_variable/global_variable.dart';
--import 'package:clouddisk_login_form/icons/app_icons.dart';
- import 'package:clouddisk_login_form/models/item.dart';
- import 'package:flutter/material.dart';
- 
-@@ -19,7 +18,6 @@ class ItemFile extends StatefulWidget {
- class _ItemFileState extends State<ItemFile> {
-   bool isChecked = false;
-   bool hasThumbnail = false;
--  late IconData iconData;
-   late Widget image;
-   Future getImage(String ext) async {
-     image = Image.network(
-@@ -29,69 +27,23 @@ class _ItemFileState extends State<ItemFile> {
-   }
- 
-   @override
--  void initState() {
--    //check thumbnail  != "" thi lay thubmnail
-+  Widget build(BuildContext context) {
-     if (widget.item.buildThumbnail(widget.item.ext) != "") {
-       getImage(widget.item.ext).then((_) {
-         setState(() {
-           hasThumbnail = true;
-         });
-       });
-+    } else {
-+      setState(() {
-+        hasThumbnail = false;
-+      });
-     }
-     if (mapChecked[widget.item.id] == true) {
-       setState(() {
-         isChecked = true;
-       });
-     }
--    //gan icon dua vao extension
--    if (widget.item.type == "file") {
--      final List<String> text = widget.item.text.split(".");
--      switch (text.last) {
--        case "doc":
--          iconData = AppIcon.fileWord;
--          break;
--        case "docx":
--          iconData = AppIcon.fileWord;
--          break;
--        case "ppt":
--          iconData = AppIcon.filePowerpoint;
--          break;
--        case "pptx":
--          iconData = AppIcon.filePowerpoint;
--          break;
--        case "xls":
--          iconData = AppIcon.fileExcel;
--          break;
--        case "xlsx":
--          iconData = AppIcon.fileExcel;
--          break;
--        case "zip":
--          iconData = AppIcon.fileArchive;
--          break;
--        case "pdf":
--          iconData = AppIcon.filePdf;
--          break;
--        case "mp3":
--          iconData = AppIcon.fileAudio;
--          break;
--        case "mp4":
--          iconData = AppIcon.fileVideo;
--          break;
--        case "jpg":
--          iconData = AppIcon.fileImage;
--          break;
--        case "png":
--          iconData = AppIcon.fileImage;
--          break;
--        default:
--          iconData = AppIcon.docText;
--      }
--    }
--    super.initState();
--  }
--
--  @override
--  Widget build(BuildContext context) {
-     return InkWell(
-       onTap: () {
-         if (widget.item.type == "file") {
-@@ -109,44 +61,49 @@ class _ItemFileState extends State<ItemFile> {
-       child: Container(
-         padding: const EdgeInsets.only(top: 10, bottom: 10, left: 12),
-         decoration: BoxDecoration(
--            border: Border(
--          bottom: BorderSide(
--            color: Colors.grey.shade300,
-+          border: Border(
-+            bottom: BorderSide(
-+              color: Colors.grey.shade300,
-+            ),
-           ),
--        )),
-+        ),
-         child: Row(
-           children: [
--            if (widget.item.type == "dir")
--              Container(
--                padding: const EdgeInsets.all(8),
--                decoration: BoxDecoration(
--                  shape: BoxShape.circle,
--                  color: widget.item.color,
--                ),
--                child: Icon(
--                  widget.item.icon,
--                  color: Colors.white,
--                  size: 24,
--                ),
--              )
--            else if (!hasThumbnail)
--              Container(
--                padding: const EdgeInsets.all(8),
--                decoration: BoxDecoration(
--                  shape: BoxShape.rectangle,
--                  color: Colors.grey.shade400,
--                  borderRadius: const BorderRadius.all(
--                    Radius.circular(5),
-+            //Stack để khi load thumbnail xong sẽ đè lên icon, không bị xấu UI. Không dùng stack thì sẽ gây hiện tượng thụt vào thụt ra của content
-+            Stack(
-+              children: [
-+                if (widget.item.type == "dir")
-+                  Container(
-+                    padding: const EdgeInsets.all(8),
-+                    decoration: BoxDecoration(
-+                      shape: BoxShape.circle,
-+                      color: widget.item.color,
-+                    ),
-+                    child: Icon(
-+                      widget.item.icon,
-+                      color: Colors.white,
-+                      size: 24,
-+                    ),
-+                  )
-+                else
-+                  Container(
-+                    padding: const EdgeInsets.all(8),
-+                    decoration: BoxDecoration(
-+                      shape: BoxShape.rectangle,
-+                      color: Colors.grey.shade400,
-+                      borderRadius: const BorderRadius.all(
-+                        Radius.circular(5),
-+                      ),
-+                    ),
-+                    child: Icon(
-+                      widget.item.icon,
-+                      color: Colors.white,
-+                      size: 24,
-+                    ),
-                   ),
--                ),
--                child: Icon(
--                  iconData,
--                  color: Colors.white,
--                  size: 24,
--                ),
--              )
--            else
--              image,
-+                if (hasThumbnail) image,
-+              ],
-+            ),
-             const SizedBox(
-               width: 12,
-             ),
-diff --git a/lib/global_variable/global_variable.dart b/lib/global_variable/global_variable.dart
-index 3e247b3..4c9518a 100644
---- a/lib/global_variable/global_variable.dart
-+++ b/lib/global_variable/global_variable.dart
-@@ -1 +1,6 @@
- Map<String, dynamic> mapChecked = {};
-+bool isSort = false;
-+String sortType = "size";
-+String order = "asc";
-+String currentId = "";
-+String preId = "";
-diff --git a/lib/main.dart b/lib/main.dart
-index 3464086..ead0f9f 100644
---- a/lib/main.dart
-+++ b/lib/main.dart
-@@ -38,6 +38,7 @@ class MyHomePage extends StatefulWidget {
- 
- class _MyHomePageState extends State<MyHomePage> {
-   final LoginBloc loginBloc = LoginBloc();
++        isClickedDefault = false;
+         emit(FolderTreeLoaded(folders));
+       }
+       if (event is SortEvent) {
++        print(2);
 +
-   bool hasCookie = true;
-   var session = "";
-   var hmailkey = "";
-diff --git a/lib/models/item.dart b/lib/models/item.dart
-index 22ca5ce..cb03c4b 100644
---- a/lib/models/item.dart
-+++ b/lib/models/item.dart
-@@ -1,5 +1,6 @@
- import 'dart:math';
+         folders = [];
+         emit(FolderTreeLoading());
+         final resp = await api.get(
+@@ -56,6 +59,8 @@ class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
+             element.addColorandIcon(Colors.indigo, Icons.folder);
+           }
+         }
++        // sau khi sort sẽ cho isSort = false để qua màn hình khác không bị auto sort
++        isSort = false;
+         emit(FolderTreeLoaded(folders));
+       }
+     });
+diff --git a/lib/components/auth_input.dart b/lib/components/auth_input.dart
+index ea94596..28f4941 100644
+--- a/lib/components/auth_input.dart
++++ b/lib/components/auth_input.dart
+@@ -3,14 +3,14 @@ import 'package:flutter/material.dart';
+ class AuthInput extends StatefulWidget {
+   const AuthInput({
+     Key? key,
+-    required this.domainController,
++    required this.controller,
+     required this.label,
+     required this.icon,
+     required this.keyboardType,
+     required this.isPassword,
+   }) : super(key: key);
  
-+import 'package:clouddisk_login_form/icons/app_icons.dart';
+-  final TextEditingController domainController;
++  final TextEditingController controller;
+   final String label;
+   final IconData icon;
+   final TextInputType keyboardType;
+@@ -47,7 +47,7 @@ class _AuthInputState extends State<AuthInput> {
+           ),
+           Expanded(
+             child: TextFormField(
+-              controller: widget.domainController,
++              controller: widget.controller,
+               keyboardType: widget.keyboardType,
+               obscureText: isVisible,
+               style: const TextStyle(
+diff --git a/lib/components/list_items.dart b/lib/components/list_items.dart
+index c4e761c..4074578 100644
+--- a/lib/components/list_items.dart
++++ b/lib/components/list_items.dart
+@@ -1,4 +1,5 @@
+ import 'package:clouddisk_login_form/components/item_file.dart';
++import 'package:clouddisk_login_form/global_variable/global_variable.dart';
+ import 'package:clouddisk_login_form/models/item.dart';
  import 'package:flutter/material.dart';
- import 'package:intl/intl.dart';
- 
-@@ -28,8 +29,52 @@ class Folder extends Item {
-       : super(id, text, type, size, regdate, ext);
- 
-   void addColorandIcon(Color color, IconData icon) {
--    this.color = color;
--    this.icon = icon;
-+    if (type == "file") {
-+      final List<String> texts = text.split(".");
-+      switch (texts.last) {
-+        case "doc":
-+          this.icon = AppIcon.fileWord;
-+          break;
-+        case "docx":
-+          this.icon = AppIcon.fileWord;
-+          break;
-+        case "ppt":
-+          this.icon = AppIcon.filePowerpoint;
-+          break;
-+        case "pptx":
-+          this.icon = AppIcon.filePowerpoint;
-+          break;
-+        case "xls":
-+          this.icon = AppIcon.fileExcel;
-+          break;
-+        case "xlsx":
-+          this.icon = AppIcon.fileExcel;
-+          break;
-+        case "zip":
-+          this.icon = AppIcon.fileArchive;
-+          break;
-+        case "pdf":
-+          this.icon = AppIcon.filePdf;
-+          break;
-+        case "mp3":
-+          this.icon = AppIcon.fileAudio;
-+          break;
-+        case "mp4":
-+          this.icon = AppIcon.fileVideo;
-+          break;
-+        case "jpg":
-+          this.icon = AppIcon.fileImage;
-+          break;
-+        case "png":
-+          this.icon = AppIcon.fileImage;
-+          break;
-+        default:
-+          this.icon = AppIcon.docText;
-+      }
-+    } else {
-+      this.color = color;
-+      this.icon = icon;
-+    }
-   }
- 
-   String formatBytes(String size, int decimals) {
-@@ -68,10 +113,12 @@ class Folder extends Item {
-   }
  
-   @override
--  String toString() => "Folder(id: $id, text: $text, type: $type)";
-+  String toString() =>
-+      "Folder(id: $id, text: $text, type: $type, size: $size, regdate: $regdate, ext: $ext, icon: $icon, color: $color)";
- }
- 
- List<Folder> folders = [];
-+List<Folder> preFolders = [];
- List<Folder> foldersRoot = [];
- 
- void addColorandIcon() {
-@@ -84,3 +131,20 @@ void addColorandIcon() {
-   foldersRoot[6].addColorandIcon(Colors.teal.shade700, Icons.source);
-   foldersRoot[7].addColorandIcon(Colors.red.shade900, Icons.delete_outline);
- }
-+
-+// void sortListItem(List<Folder> folders, int sortType, int order) {
-+//   if (sortType == 0) {
-+//     if (order == 0) {
-+//       folders.sort((a, b) {
-+//         return int.parse(a.size).compareTo(int.parse(b.size));
-+//       });
-+//       // print(folders);
-+//     }
-+//     if (order == 1) {
-+//       folders.sort((a, b) {
-+//         return int.parse(b.size).compareTo(int.parse(a.size));
-+//       });
-+//       // print(folders);
-+//     }
-+//   }
-+// }
-diff --git a/lib/presentation/pages/home_page/home_page.dart b/lib/presentation/pages/home_page/home_page.dart
-index b44e99f..f55813b 100644
---- a/lib/presentation/pages/home_page/home_page.dart
-+++ b/lib/presentation/pages/home_page/home_page.dart
-@@ -1,6 +1,11 @@
-+// ignore_for_file: public_member_api_docs, sort_constructors_first
-+import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
-+
+@@ -24,6 +25,7 @@ class _ListItemsState extends State<ListItems> {
+               item: widget.items[index],
+               onPressed: (value) {
+                 if (widget.items[index].type == "dir") {
++                  preId = currentId;
+                   Navigator.of(context).pushNamed("/folderScreen", arguments: {
+                     "folderId": widget.items[index].id.toString(),
+                     "currentPath": "/${widget.items[index].text}",
+diff --git a/lib/components/list_radio.dart b/lib/components/list_radio.dart
+new file mode 100644
+index 0000000..2f0a214
+--- /dev/null
++++ b/lib/components/list_radio.dart
+@@ -0,0 +1,59 @@
 +import 'package:flutter/material.dart';
-+
- import 'package:clouddisk_login_form/global_variable/global_variable.dart';
- import 'package:clouddisk_login_form/presentation/screens/folder_screen.dart';
--import 'package:flutter/material.dart';
-+import 'package:flutter_bloc/flutter_bloc.dart';
- 
- class HomePage extends StatefulWidget {
-   const HomePage({
-@@ -14,181 +19,101 @@ class HomePage extends StatefulWidget {
- class _HomePageState extends State<HomePage> {
-   final navKey = GlobalKey<NavigatorState>();
-   var path = "";
--  int selectedIndex = 0;
--  int selectedRadioTile = 0;
--  setSelectedRadioTile(int val) {
--    setState(() {
--      selectedRadioTile = val;
--    });
--  }
- 
--  @override
--  Widget build(BuildContext context) {
--    Future pushDialog() {
--      return showDialog(
--          useRootNavigator: false,
-+  void onSelected(BuildContext context, int value) {
-+    switch (value) {
-+      case 0:
-+        showDialog(
-           context: context,
-           builder: (context) {
--            int selectedRadio = 0;
--            return AlertDialog(
--              contentPadding: EdgeInsets.zero,
--              content: SizedBox(
--                width: 170,
--                height: 250,
--                child: Row(
--                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
--                  crossAxisAlignment: CrossAxisAlignment.start,
--                  children: [
--                    Padding(
--                      padding: const EdgeInsets.only(top: 12, left: 12),
--                      child: Column(
--                        crossAxisAlignment: CrossAxisAlignment.start,
--                        children: [
--                          const Text(
--                            "Sort Type",
--                            style: TextStyle(
--                              color: Colors.black54,
--                            ),
--                          ),
--                          // StatefulBuilder(builder:
--                          //     (BuildContext context, StateSetter setState) {
--                          //   List<String> list = ["Size", "File Name", "Date"];
--                          //   return Column(
--                          //     mainAxisSize: MainAxisSize.min,
--                          //     children: List<Widget>.generate(3, (int index) {
--                          //       return Row(
--                          //         children: [
--                          //           Radio<int>(
--                          //             value: index,
--                          //             groupValue: selectedRadio,
--                          //             onChanged: (value) {
--                          //               setState(() => selectedRadio = value!);
--                          //             },
--                          //           ),
--                          //           const SizedBox(width: 8),
--                          //           Text(list[index]),
--                          //         ],
--                          //       );
--                          //     }),
--                          //   );
--                          // }),
--                          const Text(
--                            "Order",
--                            style: TextStyle(
--                              color: Colors.black54,
--                            ),
--                          ),
--                        ],
--                      ),
--                    ),
--                    InkWell(
--                      onTap: () {
--                        Navigator.of(context).pop();
--                      },
--                      child: const Icon(
--                        Icons.close,
--                        color: Colors.black54,
--                        size: 36,
--                      ),
--                    )
--                  ],
--                ),
--              ),
--              actions: [
--                ElevatedButton(
--                  onPressed: () {},
--                  style: ElevatedButton.styleFrom(
--                    backgroundColor: Colors.grey.shade300,
--                    padding: EdgeInsets.zero,
--                    fixedSize: const Size(135, 40),
--                  ),
--                  child: const Text(
--                    "SAVE AS DEFAULT",
--                    style: TextStyle(fontSize: 12),
--                  ),
--                ),
--                ElevatedButton(
--                  onPressed: () {},
--                  style: ElevatedButton.styleFrom(
--                    backgroundColor: Colors.grey.shade300,
--                    padding: EdgeInsets.zero,
--                    fixedSize: const Size(135, 40),
--                  ),
--                  child: const Text(
--                    "SAVE",
--                    style: TextStyle(fontSize: 12),
--                  ),
--                ),
--              ],
-+            return MyDialog(
-+              onValueChange: (int value1, int value2) {
-+                switch (value1) {
-+                  case 0:
-+                    sortType = "size";
-+                    break;
-+                  case 1:
-+                    sortType = "name";
-+                    break;
-+                  case 2:
-+                    sortType = "time";
-+                    break;
-+                }
-+                switch (value2) {
-+                  case 0:
-+                    order = "asc";
-+                    break;
-+                  case 1:
-+                    order = "desc";
-+                    break;
-+                }
-+              },
-+              onSave: () {
-+                print("Sort Type: $sortType");
-+                print("Order: $order");
-+              },
-             );
--          });
--    }
--
--    void onSelected(BuildContext context, int value) {
--      switch (value) {
--        case 0:
--          pushDialog();
--          break;
--        default:
--      }
-+          },
-+        );
-+        break;
-     }
-+  }
- 
-+  @override
-+  Widget build(BuildContext context) {
-     return Scaffold(
--      appBar: PreferredSize(
--        preferredSize: const Size.fromHeight(50),
--        child: AppBar(
--          elevation: 0,
--          automaticallyImplyLeading: false, //turn off leading
--          title: Row(
--            children: [
--              const Text(
--                "Home",
--                style: TextStyle(
--                  color: Colors.white,
--                ),
-+      appBar: AppBar(
-+        elevation: 0,
-+        automaticallyImplyLeading: false, //turn off leading
-+        title: Row(
-+          children: [
-+            const Text(
-+              "Home",
-+              style: TextStyle(
-+                color: Colors.white,
-               ),
--              Text(
--                " ${mapChecked.isNotEmpty ? "(" : ""}${mapChecked.isNotEmpty ? mapChecked.length : ""}${mapChecked.isNotEmpty ? ")" : ""}",
--                style: const TextStyle(
--                  color: Colors.amberAccent,
--                ),
--              ),
--            ],
--          ),
--          actions: [
--            mapChecked.isNotEmpty
--                ? IconButton(
--                    icon: const Icon(
--                      Icons.send,
--                      color: Colors.white,
--                    ),
--                    onPressed: () {
--                      ScaffoldMessenger.of(context).showSnackBar(
--                        const SnackBar(
--                          content: Text("Đang gửi..."),
--                        ),
--                      );
--                    },
--                  )
--                : Container(),
--            Theme(
--              data: Theme.of(context).copyWith(
--                  iconTheme: const IconThemeData(color: Colors.white),
--                  textTheme: const TextTheme().apply(bodyColor: Colors.white)),
--              child: PopupMenuButton<int>(
--                color: Colors.indigo,
--                onSelected: (value) {
--                  onSelected(context, value);
--                },
--                itemBuilder: ((context) {
--                  return [
--                    popupMenuItem("Sort"),
--                  ];
--                }),
-+            ),
-+            Text(
-+              " ${mapChecked.isNotEmpty ? "(" : ""}${mapChecked.isNotEmpty ? mapChecked.length : ""}${mapChecked.isNotEmpty ? ")" : ""}",
-+              style: const TextStyle(
-+                color: Colors.amberAccent,
-               ),
-             ),
-           ],
-         ),
-+        actions: [
-+          mapChecked.isNotEmpty
-+              ? IconButton(
-+                  icon: const Icon(
-+                    Icons.send,
-+                    color: Colors.white,
-+                  ),
-+                  onPressed: () {
-+                    ScaffoldMessenger.of(context).showSnackBar(
-+                      const SnackBar(
-+                        content: Text("Đang gửi..."),
-+                      ),
-+                    );
-+                  },
-+                )
-+              : Container(),
-+          Theme(
-+            data: Theme.of(context).copyWith(
-+                iconTheme: const IconThemeData(color: Colors.white),
-+                textTheme: const TextTheme().apply(bodyColor: Colors.white)),
-+            child: PopupMenuButton<int>(
-+              color: Colors.indigo,
-+              onSelected: (value) {
-+                onSelected(context, value);
-+              },
-+              itemBuilder: ((context) {
-+                return [
-+                  popupMenuItem("Sort"),
-+                ];
-+              }),
-+            ),
-+          ),
-+        ],
-       ),
-       body: WillPopScope(
-         onWillPop: () async {
-@@ -260,3 +185,159 @@ class _HomePageState extends State<HomePage> {
-     );
-   }
- }
 +
 +class RadioList extends StatefulWidget {
 +  const RadioList({
 +    Key? key,
 +    required this.listItem,
 +    required this.onTap,
++    required this.initValue,
 +  }) : super(key: key);
 +  final List<String> listItem;
 +  final void Function(int) onTap;
++  final int initValue;
 +  @override
 +  State<RadioList> createState() => _RadioListState();
 +}
@@ -702,6 +8485,12 @@ index b44e99f..f55813b 100644
 +class _RadioListState extends State<RadioList> {
 +  int selectedRadio = 0;
 +  @override
++  void initState() {
++    selectedRadio = widget.initValue;
++    super.initState();
++  }
++
++  @override
 +  Widget build(BuildContext context) {
 +    return Column(
 +      crossAxisAlignment: CrossAxisAlignment.start,
@@ -736,183 +8525,601 @@ index b44e99f..f55813b 100644
 +    );
 +  }
 +}
+diff --git a/lib/global_variable/global_variable.dart b/lib/global_variable/global_variable.dart
+index 4c9518a..591dcc1 100644
+--- a/lib/global_variable/global_variable.dart
++++ b/lib/global_variable/global_variable.dart
+@@ -1,5 +1,6 @@
+ Map<String, dynamic> mapChecked = {};
+ bool isSort = false;
++bool isClickedDefault = false;
+ String sortType = "size";
+ String order = "asc";
+ String currentId = "";
+diff --git a/lib/main.dart b/lib/main.dart
+index ead0f9f..873b435 100644
+--- a/lib/main.dart
++++ b/lib/main.dart
+@@ -1,4 +1,3 @@
+-import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+ import 'package:clouddisk_login_form/bloc/login_bloc/login_bloc.dart';
+ import 'package:clouddisk_login_form/models/user.dart';
+ import 'package:clouddisk_login_form/presentation/pages/home_page/home_page.dart';
+@@ -81,9 +80,9 @@ class _MyHomePageState extends State<MyHomePage> {
+           BlocProvider(
+             create: (context) => loginBloc,
+           ),
+-          BlocProvider(
+-            create: (context) => FolderTreeBloc(),
+-          ),
++          // BlocProvider(
++          //   create: (context) => FolderTreeBloc(),
++          // ),
+         ],
+         child: hasCookie ? const HomePage() : const LoginScreen(),
+       ),
+diff --git a/lib/models/item.dart b/lib/models/item.dart
+index cb03c4b..bfedd09 100644
+--- a/lib/models/item.dart
++++ b/lib/models/item.dart
+@@ -132,19 +132,4 @@ void addColorandIcon() {
+   foldersRoot[7].addColorandIcon(Colors.red.shade900, Icons.delete_outline);
+ }
+ 
+-// void sortListItem(List<Folder> folders, int sortType, int order) {
+-//   if (sortType == 0) {
+-//     if (order == 0) {
+-//       folders.sort((a, b) {
+-//         return int.parse(a.size).compareTo(int.parse(b.size));
+-//       });
+-//       // print(folders);
+-//     }
+-//     if (order == 1) {
+-//       folders.sort((a, b) {
+-//         return int.parse(b.size).compareTo(int.parse(a.size));
+-//       });
+-//       // print(folders);
+-//     }
+-//   }
+-// }
++Map<String, List<Folder>> mapListFolder = {};
+diff --git a/lib/presentation/pages/home_page/home_page.dart b/lib/presentation/pages/home_page/home_page.dart
+index f55813b..0388098 100644
+--- a/lib/presentation/pages/home_page/home_page.dart
++++ b/lib/presentation/pages/home_page/home_page.dart
+@@ -1,11 +1,7 @@
+-// ignore_for_file: public_member_api_docs, sort_constructors_first
+-import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+-
++import 'package:clouddisk_login_form/components/list_radio.dart';
+ import 'package:flutter/material.dart';
+-
+ import 'package:clouddisk_login_form/global_variable/global_variable.dart';
+ import 'package:clouddisk_login_form/presentation/screens/folder_screen.dart';
+-import 'package:flutter_bloc/flutter_bloc.dart';
+ 
+ class HomePage extends StatefulWidget {
+   const HomePage({
+@@ -18,7 +14,17 @@ class HomePage extends StatefulWidget {
+ 
+ class _HomePageState extends State<HomePage> {
+   final navKey = GlobalKey<NavigatorState>();
++  bool canPop = false;
+   var path = "";
++  int initialValue1 = 0;
++  int initialValue2 = 0;
++  Future onSend(BuildContext context) {
++    return showDialog(
++        context: context,
++        builder: (context) {
++          return const SendDialog();
++        });
++  }
+ 
+   void onSelected(BuildContext context, int value) {
+     switch (value) {
+@@ -26,8 +32,10 @@ class _HomePageState extends State<HomePage> {
+         showDialog(
+           context: context,
+           builder: (context) {
+-            return MyDialog(
++            return SortDialog(
+               onValueChange: (int value1, int value2) {
++                initialValue1 = value1;
++                initialValue2 = value2;
+                 switch (value1) {
+                   case 0:
+                     sortType = "size";
+@@ -51,7 +59,24 @@ class _HomePageState extends State<HomePage> {
+               onSave: () {
+                 print("Sort Type: $sortType");
+                 print("Order: $order");
++                setState(() {
++                  //nhấn Save sẽ gán isSort = true để tiến hành sort, isDefault = false
++                  isSort = true;
++                  isClickedDefault = false;
++                });
+               },
++              onDefault: () {
++                initialValue1 = 0;
++                initialValue2 = 0;
++                setState(() {
++                  //nhấn Save as Default sẽ gán isDefault = true để trở lại list ban đầu chưa sort, isSort = false
++                  //isClickedDefault có nghĩa là ấn nút Default hay không chứ không có nghĩa list đó default hay không
++                  isClickedDefault = true;
++                  isSort = false;
++                });
++              },
++              initValue1: initialValue1,
++              initValue2: initialValue2,
+             );
+           },
+         );
+@@ -64,11 +89,38 @@ class _HomePageState extends State<HomePage> {
+     return Scaffold(
+       appBar: AppBar(
+         elevation: 0,
+-        automaticallyImplyLeading: false, //turn off leading
+         title: Row(
++          mainAxisAlignment: MainAxisAlignment.start,
+           children: [
++            SizedBox(
++              height: 28.0,
++              width: 28.0,
++              child: IconButton(
++                padding: const EdgeInsets.all(0),
++                onPressed: () {
++                  setState(() {
++                    //xóa thằng cuối khi pop
++                    var chars = path.split("/");
++                    chars.removeLast();
++                    path = chars.join("/");
++                  });
++                  if (navKey.currentState != null) {
++                    if (navKey.currentState!.canPop()) {
++                      navKey.currentState!.pop();
++                    }
++                  }
++                },
++                icon: const Icon(
++                  Icons.arrow_back,
++                  color: Colors.white,
++                ),
++              ),
++            ),
++            const SizedBox(
++              width: 8,
++            ),
+             const Text(
+-              "Home",
++              "CloudDisk",
+               style: TextStyle(
+                 color: Colors.white,
+               ),
+@@ -89,34 +141,35 @@ class _HomePageState extends State<HomePage> {
+                     color: Colors.white,
+                   ),
+                   onPressed: () {
+-                    ScaffoldMessenger.of(context).showSnackBar(
+-                      const SnackBar(
+-                        content: Text("Đang gửi..."),
+-                      ),
+-                    );
++                    onSend(context);
+                   },
+                 )
+               : Container(),
+-          Theme(
+-            data: Theme.of(context).copyWith(
+-                iconTheme: const IconThemeData(color: Colors.white),
+-                textTheme: const TextTheme().apply(bodyColor: Colors.white)),
+-            child: PopupMenuButton<int>(
+-              color: Colors.indigo,
+-              onSelected: (value) {
+-                onSelected(context, value);
+-              },
+-              itemBuilder: ((context) {
+-                return [
+-                  popupMenuItem("Sort"),
+-                ];
+-              }),
++          PopupMenuButton<int>(
++            color: Colors.white,
++            constraints: const BoxConstraints(
++              minWidth: 150,
++            ),
++            padding: const EdgeInsets.all(0),
++            icon: const Icon(
++              Icons.more_vert,
++              color: Colors.white,
+             ),
++            onSelected: (value) {
++              onSelected(context, value);
++            },
++            itemBuilder: ((context) {
++              return [
++                popupMenuItem("Sort"),
++              ];
++            }),
+           ),
+         ],
+       ),
+       body: WillPopScope(
+         onWillPop: () async {
++          currentId = preId;
++          isSort = false;
+           setState(() {
+             //xóa thằng cuối khi pop
+             var chars = path.split("/");
+@@ -180,75 +233,32 @@ class _HomePageState extends State<HomePage> {
+       value: 0,
+       child: Text(
+         content,
+-        style: const TextStyle(fontSize: 16),
++        style: const TextStyle(fontSize: 16, color: Colors.black),
+       ),
+     );
+   }
+ }
+ 
+-class RadioList extends StatefulWidget {
+-  const RadioList({
+-    Key? key,
+-    required this.listItem,
+-    required this.onTap,
+-  }) : super(key: key);
+-  final List<String> listItem;
+-  final void Function(int) onTap;
+-  @override
+-  State<RadioList> createState() => _RadioListState();
+-}
+-
+-class _RadioListState extends State<RadioList> {
+-  int selectedRadio = 0;
+-  @override
+-  Widget build(BuildContext context) {
+-    return Column(
+-      crossAxisAlignment: CrossAxisAlignment.start,
+-      children: widget.listItem.map((item) {
+-        return InkWell(
+-          onTap: () {
+-            setState(() {
+-              selectedRadio = widget.listItem.indexOf(item);
+-              widget.onTap(selectedRadio);
+-            });
+-          },
+-          child: Row(
+-            children: [
+-              Radio(
+-                value: widget.listItem.indexOf(item),
+-                groupValue: selectedRadio,
+-                onChanged: (value) {
+-                  setState(() {
+-                    selectedRadio = value!;
+-                    widget.onTap(selectedRadio);
+-                  });
+-                },
+-              ),
+-              SizedBox(
+-                width: 180,
+-                child: Text(item),
+-              ),
+-            ],
+-          ),
+-        );
+-      }).toList(),
+-    );
+-  }
+-}
+-
+-class MyDialog extends StatefulWidget {
+-  const MyDialog({
++class SortDialog extends StatefulWidget {
++  const SortDialog({
+     Key? key,
+     required this.onValueChange,
+     required this.onSave,
++    required this.onDefault,
++    required this.initValue1,
++    required this.initValue2,
+   }) : super(key: key);
+   final void Function(int, int) onValueChange;
+   final VoidCallback onSave;
++  final VoidCallback onDefault;
++  final int initValue1;
++  final int initValue2;
++
+   @override
+-  State<MyDialog> createState() => _MyDialogState();
++  State<SortDialog> createState() => _SortDialogState();
+ }
+ 
+-class _MyDialogState extends State<MyDialog> {
++class _SortDialogState extends State<SortDialog> {
+   int sortType = 0;
+   int order = 0;
+   @override
+@@ -279,6 +289,7 @@ class _MyDialogState extends State<MyDialog> {
+                       sortType = value;
+                       widget.onValueChange(sortType, order);
+                     },
++                    initValue: widget.initValue1,
+                   ),
+                   const Text(
+                     "Order",
+@@ -292,6 +303,7 @@ class _MyDialogState extends State<MyDialog> {
+                       order = value;
+                       widget.onValueChange(sortType, order);
+                     },
++                    initValue: widget.initValue2,
+                   ),
+                 ],
+               ),
+@@ -311,7 +323,10 @@ class _MyDialogState extends State<MyDialog> {
+       ),
+       actions: [
+         ElevatedButton(
+-          onPressed: () {},
++          onPressed: () {
++            Navigator.of(context).pop();
++            widget.onDefault();
++          },
+           style: ElevatedButton.styleFrom(
+             backgroundColor: Colors.grey.shade300,
+             padding: EdgeInsets.zero,
+@@ -341,3 +356,90 @@ class _MyDialogState extends State<MyDialog> {
+     );
+   }
+ }
++
++class SendDialog extends StatefulWidget {
++  const SendDialog({super.key});
 +
-+class MyDialog extends StatefulWidget {
-+  const MyDialog({
-+    Key? key,
-+    required this.onValueChange,
-+    required this.onSave,
-+  }) : super(key: key);
-+  final void Function(int, int) onValueChange;
-+  final VoidCallback onSave;
 +  @override
-+  State<MyDialog> createState() => _MyDialogState();
++  State<SendDialog> createState() => _SendDialogState();
 +}
 +
-+class _MyDialogState extends State<MyDialog> {
-+  int sortType = 0;
-+  int order = 0;
++class _SendDialogState extends State<SendDialog> {
 +  @override
 +  Widget build(BuildContext context) {
 +    return AlertDialog(
-+      contentPadding: EdgeInsets.zero,
++      // contentPadding: EdgeInsets.zero,
 +      content: SizedBox(
-+        width: 170,
-+        height: 300,
-+        child: Row(
-+          mainAxisAlignment: MainAxisAlignment.spaceBetween,
++        // width: 260,
++        height: 200,
++        child: Column(
 +          crossAxisAlignment: CrossAxisAlignment.start,
 +          children: [
-+            Padding(
-+              padding: const EdgeInsets.only(top: 12, left: 12),
-+              child: Column(
-+                crossAxisAlignment: CrossAxisAlignment.start,
-+                children: [
-+                  const Text(
-+                    "Sort Type",
-+                    style: TextStyle(
-+                      color: Colors.black54,
-+                    ),
-+                  ),
-+                  RadioList(
-+                    listItem: const ["Size", "File Name", "Date"],
-+                    onTap: (value) {
-+                      sortType = value;
-+                      widget.onValueChange(sortType, order);
-+                    },
-+                  ),
-+                  const Text(
-+                    "Order",
-+                    style: TextStyle(
-+                      color: Colors.black54,
-+                    ),
-+                  ),
-+                  RadioList(
-+                    listItem: const ["Ascending", "Descending"],
-+                    onTap: (value) {
-+                      order = value;
-+                      widget.onValueChange(sortType, order);
-+                    },
-+                  ),
-+                ],
++            const SizedBox(
++              height: 12,
++            ),
++            const Text(
++              "Cloud Disk",
++              style: TextStyle(
++                color: Colors.black,
++                fontSize: 20,
++                fontWeight: FontWeight.w500,
 +              ),
 +            ),
-+            InkWell(
-+              onTap: () {
-+                Navigator.of(context).pop();
-+              },
-+              child: const Icon(
-+                Icons.close,
-+                color: Colors.black54,
-+                size: 36,
++            const SizedBox(
++              height: 16,
++            ),
++            const Text(
++              "Expired Date (NOT less than current date)",
++              style: TextStyle(
++                color: Colors.black,
++                fontSize: 14,
 +              ),
-+            )
++            ),
++            const SizedBox(
++              height: 16,
++            ),
++            const Text(
++              "Download count (greate than 0)",
++              style: TextStyle(
++                color: Colors.black,
++                fontSize: 14,
++              ),
++            ),
++            TextFormField(
++              keyboardType: TextInputType.number,
++              style: const TextStyle(
++                fontSize: 18,
++              ),
++              initialValue: "100",
++              decoration: const InputDecoration(
++                contentPadding: EdgeInsets.only(bottom: -20),
++                hintText: "100",
++              ),
++            ),
 +          ],
 +        ),
 +      ),
 +      actions: [
-+        ElevatedButton(
-+          onPressed: () {},
-+          style: ElevatedButton.styleFrom(
-+            backgroundColor: Colors.grey.shade300,
-+            padding: EdgeInsets.zero,
-+            fixedSize: const Size(135, 40),
-+          ),
++        TextButton(
++          onPressed: () {
++            Navigator.of(context).pop();
++          },
 +          child: const Text(
-+            "SAVE AS DEFAULT",
-+            style: TextStyle(fontSize: 12),
++            "CANCEL",
++            style: TextStyle(fontSize: 14),
 +          ),
 +        ),
-+        ElevatedButton(
++        TextButton(
 +          onPressed: () {
 +            Navigator.of(context).pop();
-+            widget.onSave();
 +          },
-+          style: ElevatedButton.styleFrom(
-+            backgroundColor: Colors.grey.shade300,
-+            padding: EdgeInsets.zero,
-+            fixedSize: const Size(135, 40),
-+          ),
 +          child: const Text(
-+            "SAVE",
-+            style: TextStyle(fontSize: 12),
++            "OK",
++            style: TextStyle(fontSize: 14),
 +          ),
 +        ),
 +      ],
 +    );
 +  }
 +}
+diff --git a/lib/presentation/pages/login_page/login_screen.dart b/lib/presentation/pages/login_page/login_screen.dart
+index 327a81d..8db1aaf 100644
+--- a/lib/presentation/pages/login_page/login_screen.dart
++++ b/lib/presentation/pages/login_page/login_screen.dart
+@@ -108,7 +108,7 @@ class _LoginScreenState extends State<LoginScreen> {
+                       height: 36,
+                     ),
+                     AuthInput(
+-                      domainController: domainController,
++                      controller: domainController,
+                       label: "Domain",
+                       icon: Icons.language,
+                       keyboardType: TextInputType.name,
+@@ -118,7 +118,7 @@ class _LoginScreenState extends State<LoginScreen> {
+                       height: 8,
+                     ),
+                     AuthInput(
+-                      domainController: idController,
++                      controller: idController,
+                       label: "ID",
+                       icon: Icons.person,
+                       keyboardType: TextInputType.name,
+@@ -128,7 +128,7 @@ class _LoginScreenState extends State<LoginScreen> {
+                       height: 8,
+                     ),
+                     AuthInput(
+-                      domainController: passwordController,
++                      controller: passwordController,
+                       label: "Password",
+                       icon: Icons.lock,
+                       keyboardType: TextInputType.visiblePassword,
 diff --git a/lib/presentation/screens/folder_screen.dart b/lib/presentation/screens/folder_screen.dart
-index e2bbd7a..d6ca771 100644
+index d6ca771..50755bd 100644
 --- a/lib/presentation/screens/folder_screen.dart
 +++ b/lib/presentation/screens/folder_screen.dart
-@@ -19,6 +19,7 @@ class FolderScreen extends StatefulWidget {
+@@ -1,5 +1,6 @@
+ import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+ import 'package:clouddisk_login_form/components/list_items.dart';
++import 'package:clouddisk_login_form/global_variable/global_variable.dart';
+ import 'package:flutter/material.dart';
+ import 'package:flutter_bloc/flutter_bloc.dart';
+ 
+@@ -19,57 +20,86 @@ class FolderScreen extends StatefulWidget {
  
  class _FolderScreenState extends State<FolderScreen> {
    final FolderTreeBloc folderTreeBloc = FolderTreeBloc();
-+
+-
++  late bool sorted = false;
    @override
    void initState() {
      folderTreeBloc.add(LoadEvent(widget.folderId));
-@@ -37,27 +38,26 @@ class _FolderScreenState extends State<FolderScreen> {
++    currentId = widget.folderId;
+     super.initState();
+   }
+ 
+-  @override
+-  void dispose() {
+-    folderTreeBloc.close();
+-    super.dispose();
++  Future<void> _refresh() async {
++    if (sorted) {
++      folderTreeBloc.add(SortEvent(widget.folderId, sortType, order));
++    } else {
++      folderTreeBloc.add(LoadEvent(widget.folderId));
++    }
+   }
+ 
+   @override
+   Widget build(BuildContext context) {
++    // print("${widget.folderId}...$isSort...$isClickedDefault");
++    //Khi nhấn nút "Save on Default" hoặc "Save" thì sẽ setState lại(ở homepage.dart), nên tất cả màn hình con đều bị ảnh hưởng,
++    //=>> thêm điều kiện "currentId == widget.folderId" để chỉ áp dụng cho 1 màn hình đang hiển thị
++    if (isSort && currentId == widget.folderId) {
++      sorted = true;
++      folderTreeBloc.add(SortEvent(widget.folderId, sortType, order));
++    }
++    if (isClickedDefault && currentId == widget.folderId) {
++      sorted = false;
++      folderTreeBloc.add(LoadEvent(widget.folderId));
++    }
+     return BlocProvider(
        create: (context) => folderTreeBloc,
-       child: BlocBuilder<FolderTreeBloc, FolderTreeState>(
-         builder: (context, state) {
--          if (state is FolderTreeLoading) {
--            return const Center(
--              child: CircularProgressIndicator(),
--            );
--          } else if (state is FolderTreeLoaded) {
--            return Scaffold(
--              body: Column(
--                children: [
--                  widget.folderId == ""
--                      ? Container()
--                      : Container(
--                          width: double.infinity,
--                          padding: const EdgeInsets.only(
--                              left: 12, top: 8, bottom: 8),
--                          decoration:
--                              BoxDecoration(color: Colors.cyan.shade100),
--                          child: Text(
--                            widget.currentPath,
--                            style: const TextStyle(fontSize: 16),
--                          ),
-+          return Scaffold(
-+            body: Column(
-+              children: [
-+                widget.folderId == ""
-+                    ? Container()
-+                    : Container(
-+                        width: double.infinity,
-+                        padding:
-+                            const EdgeInsets.only(left: 12, top: 8, bottom: 8),
-+                        decoration: BoxDecoration(color: Colors.cyan.shade100),
-+                        child: Text(
-+                          widget.currentPath,
-+                          style: const TextStyle(fontSize: 16),
-                         ),
+-      child: BlocBuilder<FolderTreeBloc, FolderTreeState>(
+-        builder: (context, state) {
+-          return Scaffold(
+-            body: Column(
+-              children: [
+-                widget.folderId == ""
+-                    ? Container()
+-                    : Container(
+-                        width: double.infinity,
+-                        padding:
+-                            const EdgeInsets.only(left: 12, top: 8, bottom: 8),
+-                        decoration: BoxDecoration(color: Colors.cyan.shade100),
+-                        child: Text(
+-                          widget.currentPath,
+-                          style: const TextStyle(fontSize: 16),
++      child: BlocListener<FolderTreeBloc, FolderTreeState>(
++        listener: (context, state) {
++          if (state is FolderTreeLoading) {
++            print("loading");
++          } else if (state is FolderTreeLoaded) {
++            print("loaded");
++          }
++        },
++        child: BlocBuilder<FolderTreeBloc, FolderTreeState>(
++          builder: (context, state) {
++            return Scaffold(
++              body: Column(
++                children: [
++                  widget.folderId == ""
++                      ? Container()
++                      : Container(
++                          width: double.infinity,
++                          padding: const EdgeInsets.only(
++                              left: 12, top: 8, bottom: 8),
++                          decoration:
++                              BoxDecoration(color: Colors.cyan.shade100),
++                          child: Text(
++                            widget.currentPath,
++                            style: const TextStyle(fontSize: 16),
++                          ),
++                        ),
++                  if (state is FolderTreeLoading)
++                    const Expanded(
++                      child: Center(
++                        child: CircularProgressIndicator(),
 +                      ),
-+                if (state is FolderTreeLoading)
-+                  const Center(
-+                    child: CircularProgressIndicator(),
-+                  )
-+                else if (state is FolderTreeLoaded)
-                   Expanded(
-                     child: ListItems(
-                       items: state.items,
-@@ -66,11 +66,9 @@ class _FolderScreenState extends State<FolderScreen> {
-                       },
++                    )
++                  else if (state is FolderTreeLoaded)
++                    Expanded(
++                      child: RefreshIndicator(
++                        onRefresh: _refresh,
++                        child: ListItems(
++                          items: state.items,
++                          onPressed: () {
++                            widget.onPressed();
++                          },
+                         ),
+                       ),
+-                if (state is FolderTreeLoading)
+-                  const Center(
+-                    child: CircularProgressIndicator(),
+-                  )
+-                else if (state is FolderTreeLoaded)
+-                  Expanded(
+-                    child: ListItems(
+-                      items: state.items,
+-                      onPressed: () {
+-                        widget.onPressed();
+-                      },
                      ),
-                   ),
--                ],
--              ),
--            );
--          }
--          return Container();
-+              ],
-+            ),
-+          );
-         },
+-                  ),
+-              ],
+-            ),
+-          );
+-        },
++                ],
++              ),
++            );
++          },
++        ),
        ),
      );
+   }
diff --git a/lib/api/api_header.dart b/lib/api/api_header.dart
index f7e96cc..fd62740 100644
--- a/lib/api/api_header.dart
+++ b/lib/api/api_header.dart
@@ -22,6 +22,6 @@ List<String> cookie = [
 ];
 
 //header của getFolder, sortFolder
-final folderHeader = {
+final fileHeader = {
   "Cookie": cookie.join(";"),
 };
diff --git a/lib/api/api_service.dart b/lib/api/api_service.dart
index bef36f8..e2195af 100644
--- a/lib/api/api_service.dart
+++ b/lib/api/api_service.dart
@@ -1,6 +1,6 @@
 import 'package:dio/dio.dart';
 
-class AuthApi {
+class Api {
   final Dio _dio = Dio();
   Future<String> get(url, Map<String, dynamic>? header) async {
     var response = await _dio.get(
diff --git a/lib/api/api_url.dart b/lib/api/api_url.dart
index 9a90953..8659ef5 100644
--- a/lib/api/api_url.dart
+++ b/lib/api/api_url.dart
@@ -8,3 +8,7 @@ String getFolderUrl(String type, String id) {
 String sortFolderUrl(String type, String id, String sort, String order) {
   return "$baseUrl/cloud/api/get.php?type=$type&id=$id&sort=[{\"sort\":\"$sort\",\"order\":\"$order\"}]";
 }
+
+String sendFileUrl(String files, String mode) {
+  return "$baseUrl/cloud/api/link.php?files=$files&mode=$mode";
+}
diff --git a/lib/api/params/send_file_par.dart b/lib/api/params/send_file_par.dart
new file mode 100644
index 0000000..c87aea6
--- /dev/null
+++ b/lib/api/params/send_file_par.dart
@@ -0,0 +1,25 @@
+class SendFile {
+  List<Map<String, dynamic>> files;
+  String mode;
+  SendFile(this.files, this.mode);
+  Map getMap() {
+    return {
+      "files": files,
+      "mode": mode,
+    };
+  }
+
+  String convertListToString() {
+    String listToString = "[";
+    for (var element in files) {
+      if (files.indexOf(element) == files.length - 1) {
+        listToString +=
+            "{\"id\":\"${element["id"]}\",\"name\":\"${element["name"]}\",\"count\":\"${element["count"]}\",\"expire\":\"${element["expire"]}\"}";
+      } else {
+        listToString +=
+            "{\"id\":\"${element["id"]}\",\"name\":\"${element["name"]}\",\"count\":\"${element["count"]}\",\"expire\":\"${element["expire"]}\"},";
+      }
+    }
+    return "$listToString]";
+  }
+}
diff --git a/lib/api/request/login_req.dart b/lib/api/requests/login_req.dart
similarity index 100%
rename from lib/api/request/login_req.dart
rename to lib/api/requests/login_req.dart
diff --git a/lib/api/response/login_res.dart b/lib/api/responses/login_res.dart
similarity index 100%
rename from lib/api/response/login_res.dart
rename to lib/api/responses/login_res.dart
diff --git a/lib/api/responses/send_file_res.dart b/lib/api/responses/send_file_res.dart
new file mode 100644
index 0000000..2ba33c6
--- /dev/null
+++ b/lib/api/responses/send_file_res.dart
@@ -0,0 +1,13 @@
+class SendFileResponse {
+  late bool success;
+  late List<dynamic> data;
+  SendFileResponse(Map map) {
+    success = map["success"];
+    data = map["data"];
+  }
+
+  @override
+  String toString() {
+    return "success: $success, data: ${data.toString()}";
+  }
+}
diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
index 7667865..17bef74 100644
--- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
@@ -15,15 +15,13 @@ part 'folder_tree_event.dart';
 part 'folder_tree_state.dart';
 
 class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
-  AuthApi api = AuthApi();
+  Api api = Api();
   FolderTreeBloc() : super(FolderTreeInitial()) {
     on<FolderTreeEvent>((event, emit) async {
       if (event is LoadEvent) {
-        print(1);
         folders = [];
         emit(FolderTreeLoading());
-        final resp =
-            await api.get(getFolderUrl("file", event.id), folderHeader);
+        final resp = await api.get(getFolderUrl("file", event.id), fileHeader);
         final json = jsonDecode(resp);
         final List itemList = json["files"];
         folders =
@@ -40,13 +38,11 @@ class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
         emit(FolderTreeLoaded(folders));
       }
       if (event is SortEvent) {
-        print(2);
-
         folders = [];
         emit(FolderTreeLoading());
         final resp = await api.get(
             sortFolderUrl("file", event.id, event.sort, event.order),
-            folderHeader);
+            fileHeader);
         final json = jsonDecode(resp);
         final List itemList = json["files"];
         folders =
@@ -59,8 +55,6 @@ class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
             element.addColorandIcon(Colors.indigo, Icons.folder);
           }
         }
-        // sau khi sort sẽ cho isSort = false để qua màn hình khác không bị auto sort
-        isSort = false;
         emit(FolderTreeLoaded(folders));
       }
     });
diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
index 4491243..3250eeb 100644
--- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
+++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
@@ -9,6 +9,7 @@ abstract class FolderTreeEvent extends Equatable {
 
 class LoadEvent extends FolderTreeEvent {
   final String id;
+
   const LoadEvent(this.id);
 
   @override
diff --git a/lib/bloc/login_bloc/login_bloc.dart b/lib/bloc/login_bloc/login_bloc.dart
index bb06232..267089b 100644
--- a/lib/bloc/login_bloc/login_bloc.dart
+++ b/lib/bloc/login_bloc/login_bloc.dart
@@ -3,8 +3,8 @@ import 'package:bloc/bloc.dart';
 import 'package:clouddisk_login_form/api/api_header.dart';
 import 'package:clouddisk_login_form/api/api_service.dart';
 import 'package:clouddisk_login_form/api/api_url.dart';
-import 'package:clouddisk_login_form/api/request/login_req.dart';
-import 'package:clouddisk_login_form/api/response/login_res.dart';
+import 'package:clouddisk_login_form/api/requests/login_req.dart';
+import 'package:clouddisk_login_form/api/responses/login_res.dart';
 import 'package:clouddisk_login_form/main.dart';
 import 'package:clouddisk_login_form/models/user.dart';
 import 'package:equatable/equatable.dart';
@@ -13,7 +13,7 @@ part 'login_event.dart';
 part 'login_state.dart';
 
 class LoginBloc extends Bloc<LoginEvent, LoginState> {
-  AuthApi api = AuthApi();
+  Api api = Api();
   LoginBloc() : super(LoginInitial()) {
     on<LoginEvent>((event, emit) async {
       if (event is ClickedLoginEvent) {
diff --git a/lib/bloc/send_file_bloc/send_file_bloc.dart b/lib/bloc/send_file_bloc/send_file_bloc.dart
new file mode 100644
index 0000000..d5a7589
--- /dev/null
+++ b/lib/bloc/send_file_bloc/send_file_bloc.dart
@@ -0,0 +1,37 @@
+// ignore: depend_on_referenced_packages
+import 'dart:convert';
+
+// ignore: depend_on_referenced_packages
+import 'package:bloc/bloc.dart';
+import 'package:clouddisk_login_form/global_variable/global_variable.dart';
+import 'package:equatable/equatable.dart';
+
+import 'package:clouddisk_login_form/api/api_header.dart';
+import 'package:clouddisk_login_form/api/api_service.dart';
+import 'package:clouddisk_login_form/api/api_url.dart';
+import 'package:clouddisk_login_form/api/params/send_file_par.dart';
+import 'package:clouddisk_login_form/api/responses/send_file_res.dart';
+
+part 'send_file_event.dart';
+part 'send_file_state.dart';
+
+class SendFileBloc extends Bloc<SendFileEvent, SendFileState> {
+  Api api = Api();
+
+  SendFileBloc() : super(SendFileInitial()) {
+    on<SendFileEvent>((event, emit) async {
+      if (event is CLickedSendEvent) {
+        emit(SendFileLoading());
+        final resp = await api.get(
+            sendFileUrl(
+                event.sendFile.convertListToString(), event.sendFile.mode),
+            fileHeader);
+        var json = jsonDecode(resp);
+        var sendFileRes = SendFileResponse(json);
+        print(sendFileRes.toString());
+        listMapChecked.clear;
+        emit(SendFileLoaded());
+      }
+    });
+  }
+}
diff --git a/lib/bloc/send_file_bloc/send_file_event.dart b/lib/bloc/send_file_bloc/send_file_event.dart
new file mode 100644
index 0000000..7c3173d
--- /dev/null
+++ b/lib/bloc/send_file_bloc/send_file_event.dart
@@ -0,0 +1,15 @@
+part of 'send_file_bloc.dart';
+
+abstract class SendFileEvent extends Equatable {
+  const SendFileEvent();
+
+  @override
+  List<Object> get props => [];
+}
+
+class CLickedSendEvent extends SendFileEvent {
+  final SendFile sendFile;
+  const CLickedSendEvent(this.sendFile);
+  @override
+  List<Object> get props => [sendFile];
+}
diff --git a/lib/bloc/send_file_bloc/send_file_state.dart b/lib/bloc/send_file_bloc/send_file_state.dart
new file mode 100644
index 0000000..ba30a1a
--- /dev/null
+++ b/lib/bloc/send_file_bloc/send_file_state.dart
@@ -0,0 +1,14 @@
+part of 'send_file_bloc.dart';
+
+abstract class SendFileState extends Equatable {
+  const SendFileState();
+
+  @override
+  List<Object> get props => [];
+}
+
+class SendFileInitial extends SendFileState {}
+
+class SendFileLoading extends SendFileState {}
+
+class SendFileLoaded extends SendFileState {}
diff --git a/lib/components/item_file.dart b/lib/components/item_file.dart
index 0db8c9e..c7bcc83 100644
--- a/lib/components/item_file.dart
+++ b/lib/components/item_file.dart
@@ -26,6 +26,19 @@ class _ItemFileState extends State<ItemFile> {
     );
   }
 
+  @override
+  void initState() {
+    //kiểm tra trong list, phần tử nào có "id" = itemId và "checked" = true thì setState
+    if (listMapChecked.isNotEmpty) {
+      if (listMapChecked
+              .indexWhere((element) => element["id"] == widget.item.id) !=
+          -1) {
+        isChecked = true;
+      }
+    }
+    super.initState();
+  }
+
   @override
   Widget build(BuildContext context) {
     if (widget.item.buildThumbnail(widget.item.ext) != "") {
@@ -39,20 +52,20 @@ class _ItemFileState extends State<ItemFile> {
         hasThumbnail = false;
       });
     }
-    if (mapChecked[widget.item.id] == true) {
-      setState(() {
-        isChecked = true;
-      });
-    }
     return InkWell(
       onTap: () {
         if (widget.item.type == "file") {
           setState(() {
             isChecked = !isChecked;
             if (isChecked) {
-              mapChecked.addAll({widget.item.id: true});
+              listMapChecked.add({
+                "id": widget.item.id,
+                "name": widget.item.text,
+                "checked": true,
+              });
             } else {
-              mapChecked.remove(widget.item.id);
+              listMapChecked
+                  .removeWhere((element) => element["id"] == widget.item.id);
             }
           });
         }
@@ -153,9 +166,14 @@ class _ItemFileState extends State<ItemFile> {
                       setState(() {
                         isChecked = value!;
                         if (isChecked) {
-                          mapChecked.addAll({widget.item.id: true});
+                          listMapChecked.add({
+                            "id": widget.item.id,
+                            "name": widget.item.text,
+                            "checked": true,
+                          });
                         } else {
-                          mapChecked.remove(widget.item.id);
+                          listMapChecked.removeWhere(
+                              (element) => element["id"] == widget.item.id);
                         }
                       });
                       widget.onPressed(isChecked);
diff --git a/lib/global_variable/global_variable.dart b/lib/global_variable/global_variable.dart
index 591dcc1..fe68b3b 100644
--- a/lib/global_variable/global_variable.dart
+++ b/lib/global_variable/global_variable.dart
@@ -1,5 +1,6 @@
-Map<String, dynamic> mapChecked = {};
+List<Map<String, dynamic>> listMapChecked = [];
 bool isSort = false;
+bool isClickedSort = false;
 bool isClickedDefault = false;
 String sortType = "size";
 String order = "asc";
diff --git a/lib/main.dart b/lib/main.dart
index 873b435..88844f4 100644
--- a/lib/main.dart
+++ b/lib/main.dart
@@ -1,4 +1,5 @@
 import 'package:clouddisk_login_form/bloc/login_bloc/login_bloc.dart';
+import 'package:clouddisk_login_form/bloc/send_file_bloc/send_file_bloc.dart';
 import 'package:clouddisk_login_form/models/user.dart';
 import 'package:clouddisk_login_form/presentation/pages/home_page/home_page.dart';
 import 'package:clouddisk_login_form/presentation/pages/login_page/login_screen.dart';
@@ -80,9 +81,9 @@ class _MyHomePageState extends State<MyHomePage> {
           BlocProvider(
             create: (context) => loginBloc,
           ),
-          // BlocProvider(
-          //   create: (context) => FolderTreeBloc(),
-          // ),
+          BlocProvider(
+            create: (context) => SendFileBloc(),
+          ),
         ],
         child: hasCookie ? const HomePage() : const LoginScreen(),
       ),
diff --git a/lib/presentation/pages/home_page/conponents/send_dialog.dart b/lib/presentation/pages/home_page/conponents/send_dialog.dart
new file mode 100644
index 0000000..8f45f6b
--- /dev/null
+++ b/lib/presentation/pages/home_page/conponents/send_dialog.dart
@@ -0,0 +1,166 @@
+import 'package:flutter/material.dart';
+import 'package:intl/intl.dart';
+
+class SendDialog extends StatefulWidget {
+  const SendDialog({super.key, required this.onSend});
+
+  final Function(String, String) onSend;
+
+  @override
+  State<SendDialog> createState() => _SendDialogState();
+}
+
+class _SendDialogState extends State<SendDialog> {
+  DateTime selectedDate = DateTime.now();
+  TextEditingController countController = TextEditingController();
+  @override
+  void initState() {
+    countController.text = "100";
+    super.initState();
+  }
+
+  @override
+  void dispose() {
+    countController.dispose();
+    super.dispose();
+  }
+
+  void _selectDate(BuildContext context) async {
+    final DateTime? picked = await showDatePicker(
+      context: context,
+      initialDate: selectedDate,
+      firstDate: DateTime.now(),
+      lastDate: DateTime(2100),
+      // helpText: 'Pick date',
+      confirmText: 'OK',
+      cancelText: 'Cancel',
+    );
+
+    if (picked != null && picked != selectedDate) {
+      setState(() {
+        selectedDate = picked;
+      });
+    }
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return AlertDialog(
+      content: SizedBox(
+        height: 200,
+        child: Column(
+          crossAxisAlignment: CrossAxisAlignment.start,
+          children: [
+            const SizedBox(
+              height: 12,
+            ),
+            const Text(
+              "Cloud Disk",
+              style: TextStyle(
+                color: Colors.black,
+                fontSize: 20,
+                fontWeight: FontWeight.w500,
+              ),
+            ),
+            const SizedBox(
+              height: 16,
+            ),
+            const Text(
+              "Expired Date (NOT less than current date)",
+              style: TextStyle(
+                color: Colors.black,
+                fontSize: 14,
+              ),
+            ),
+            calendarMethod(context),
+            const SizedBox(
+              height: 16,
+            ),
+            const Text(
+              "Download count (greater than 0)",
+              style: TextStyle(
+                color: Colors.black,
+                fontSize: 14,
+              ),
+            ),
+            SizedBox(
+              height: 36,
+              child: TextFormField(
+                controller: countController,
+                keyboardType: TextInputType.number,
+                style: const TextStyle(
+                  fontSize: 18,
+                ),
+                decoration: const InputDecoration(
+                  contentPadding: EdgeInsets.only(bottom: 4),
+                  hintText: "100",
+                ),
+              ),
+            ),
+          ],
+        ),
+      ),
+      actions: [
+        TextButton(
+          onPressed: () {
+            Navigator.of(context).pop();
+          },
+          child: const Text(
+            "CANCEL",
+            style: TextStyle(fontSize: 14),
+          ),
+        ),
+        TextButton(
+          onPressed: () {
+            print("Selected Date: $selectedDate");
+            print("Count: ${countController.text}");
+            var miliseconds = selectedDate.millisecondsSinceEpoch;
+            var seconds = miliseconds ~/ 1000;
+            widget.onSend(countController.text, seconds.toString());
+            Navigator.of(context).pop();
+          },
+          child: const Text(
+            "OK",
+            style: TextStyle(fontSize: 14),
+          ),
+        ),
+      ],
+    );
+  }
+
+  GestureDetector calendarMethod(BuildContext context) {
+    return GestureDetector(
+      onTap: () {
+        _selectDate(context);
+      },
+      child: Container(
+        margin: const EdgeInsets.only(top: 8),
+        padding: const EdgeInsets.fromLTRB(12, 8, 12, 8),
+        width: double.infinity,
+        height: 48,
+        decoration: BoxDecoration(
+          borderRadius: BorderRadius.circular(4),
+          border: Border.all(color: const Color(0xffdcdcdc)),
+        ),
+        child: Row(
+          mainAxisAlignment: MainAxisAlignment.spaceBetween,
+          children: [
+            Text(
+              DateFormat('dd/MM/yyyy').format(selectedDate),
+              style: const TextStyle(
+                fontSize: 16,
+                fontWeight: FontWeight.w400,
+                color: Color(0xff121212),
+              ),
+            ),
+            const Icon(
+              Icons.calendar_month_outlined,
+              color: Colors.black,
+              size: 28,
+            ),
+          ],
+        ),
+      ),
+    );
+  }
+}
diff --git a/lib/presentation/pages/home_page/conponents/sort_dialog.dart b/lib/presentation/pages/home_page/conponents/sort_dialog.dart
new file mode 100644
index 0000000..5bc4a55
--- /dev/null
+++ b/lib/presentation/pages/home_page/conponents/sort_dialog.dart
@@ -0,0 +1,120 @@
+import 'package:clouddisk_login_form/components/list_radio.dart';
+import 'package:flutter/material.dart';
+
+class SortDialog extends StatefulWidget {
+  const SortDialog({
+    Key? key,
+    required this.onValueChange,
+    required this.onSave,
+    required this.onDefault,
+    required this.initValue1,
+    required this.initValue2,
+  }) : super(key: key);
+  final void Function(int, int) onValueChange;
+  final VoidCallback onSave;
+  final VoidCallback onDefault;
+  final int initValue1;
+  final int initValue2;
+
+  @override
+  State<SortDialog> createState() => _SortDialogState();
+}
+
+class _SortDialogState extends State<SortDialog> {
+  @override
+  Widget build(BuildContext context) {
+    int sortType = widget.initValue1;
+    int order = widget.initValue2;
+    return AlertDialog(
+      contentPadding: EdgeInsets.zero,
+      content: SizedBox(
+        width: 170,
+        height: 300,
+        child: Row(
+          mainAxisAlignment: MainAxisAlignment.spaceBetween,
+          crossAxisAlignment: CrossAxisAlignment.start,
+          children: [
+            Padding(
+              padding: const EdgeInsets.only(top: 12, left: 12),
+              child: Column(
+                crossAxisAlignment: CrossAxisAlignment.start,
+                children: [
+                  const Text(
+                    "Sort Type",
+                    style: TextStyle(
+                      color: Colors.black54,
+                    ),
+                  ),
+                  RadioList(
+                    listItem: const ["Size", "File Name", "Date"],
+                    onTap: (value) {
+                      sortType = value;
+                      widget.onValueChange(sortType, order);
+                    },
+                    initValue: sortType,
+                  ),
+                  const Text(
+                    "Order",
+                    style: TextStyle(
+                      color: Colors.black54,
+                    ),
+                  ),
+                  RadioList(
+                    listItem: const ["Ascending", "Descending"],
+                    onTap: (value) {
+                      order = value;
+                      widget.onValueChange(sortType, order);
+                    },
+                    initValue: order,
+                  ),
+                ],
+              ),
+            ),
+            InkWell(
+              onTap: () {
+                Navigator.of(context).pop();
+              },
+              child: const Icon(
+                Icons.close,
+                color: Colors.black54,
+                size: 36,
+              ),
+            )
+          ],
+        ),
+      ),
+      actions: [
+        ElevatedButton(
+          onPressed: () {
+            Navigator.of(context).pop();
+            widget.onDefault();
+          },
+          style: ElevatedButton.styleFrom(
+            backgroundColor: Colors.grey.shade300,
+            padding: EdgeInsets.zero,
+            fixedSize: const Size(135, 40),
+          ),
+          child: const Text(
+            "SAVE AS DEFAULT",
+            style: TextStyle(fontSize: 12),
+          ),
+        ),
+        ElevatedButton(
+          onPressed: () {
+            Navigator.of(context).pop();
+            widget.onSave();
+          },
+          style: ElevatedButton.styleFrom(
+            backgroundColor: Colors.grey.shade300,
+            padding: EdgeInsets.zero,
+            fixedSize: const Size(135, 40),
+          ),
+          child: const Text(
+            "SAVE",
+            style: TextStyle(fontSize: 12),
+          ),
+        ),
+      ],
+    );
+  }
+}
diff --git a/lib/presentation/pages/home_page/home_page.dart b/lib/presentation/pages/home_page/home_page.dart
index 0388098..d137430 100644
--- a/lib/presentation/pages/home_page/home_page.dart
+++ b/lib/presentation/pages/home_page/home_page.dart
@@ -1,7 +1,11 @@
-import 'package:clouddisk_login_form/components/list_radio.dart';
+import 'package:clouddisk_login_form/api/params/send_file_par.dart';
+import 'package:clouddisk_login_form/bloc/send_file_bloc/send_file_bloc.dart';
+import 'package:clouddisk_login_form/presentation/pages/home_page/conponents/send_dialog.dart';
+import 'package:clouddisk_login_form/presentation/pages/home_page/conponents/sort_dialog.dart';
 import 'package:flutter/material.dart';
 import 'package:clouddisk_login_form/global_variable/global_variable.dart';
 import 'package:clouddisk_login_form/presentation/screens/folder_screen.dart';
+import 'package:flutter_bloc/flutter_bloc.dart';
 
 class HomePage extends StatefulWidget {
   const HomePage({
@@ -18,14 +22,35 @@ class _HomePageState extends State<HomePage> {
   var path = "";
   int initialValue1 = 0;
   int initialValue2 = 0;
+  SendFile sendFile = SendFile([], "set");
+  List<Map<String, dynamic>> listFileSend = [];
+
   Future onSend(BuildContext context) {
     return showDialog(
+        useRootNavigator: false,
         context: context,
         builder: (context) {
-          return const SendDialog();
+          return SendDialog(
+            onSend: (p0, p1) {
+              for (var element in listMapChecked) {
+                listFileSend.add({
+                  "id": element["id"],
+                  "name": element["name"],
+                  "count": p0,
+                  "expire": p1,
+                });
+              }
+              sendFile.files = listFileSend;
+              addEvent(); //gọi function ở dưới để sử dụng context của HomePage, vì context của HomePage nằm trong BlocProvider ở main.dart
+            },
+          );
         });
   }
 
+  void addEvent() {
+    BlocProvider.of<SendFileBloc>(context).add(CLickedSendEvent(sendFile));
+  }
+
   void onSelected(BuildContext context, int value) {
     switch (value) {
       case 0:
@@ -62,17 +87,14 @@ class _HomePageState extends State<HomePage> {
                 setState(() {
                   //nhấn Save sẽ gán isSort = true để tiến hành sort, isDefault = false
                   isSort = true;
-                  isClickedDefault = false;
+                  // isClickedSort = true;
                 });
               },
               onDefault: () {
-                initialValue1 = 0;
-                initialValue2 = 0;
                 setState(() {
                   //nhấn Save as Default sẽ gán isDefault = true để trở lại list ban đầu chưa sort, isSort = false
                   //isClickedDefault có nghĩa là ấn nút Default hay không chứ không có nghĩa list đó default hay không
                   isClickedDefault = true;
-                  isSort = false;
                 });
               },
               initValue1: initialValue1,
@@ -86,144 +108,147 @@ class _HomePageState extends State<HomePage> {
 
   @override
   Widget build(BuildContext context) {
-    return Scaffold(
-      appBar: AppBar(
-        elevation: 0,
-        title: Row(
-          mainAxisAlignment: MainAxisAlignment.start,
-          children: [
-            SizedBox(
-              height: 28.0,
-              width: 28.0,
-              child: IconButton(
+    return BlocBuilder<SendFileBloc, SendFileState>(
+      builder: (context, state) {
+        return Scaffold(
+          appBar: AppBar(
+            elevation: 0,
+            title: Row(
+              mainAxisAlignment: MainAxisAlignment.start,
+              children: [
+                SizedBox(
+                  height: 28.0,
+                  width: 28.0,
+                  child: IconButton(
+                    padding: const EdgeInsets.all(0),
+                    onPressed: () {
+                      setState(() {
+                        //xóa thằng cuối khi pop
+                        var chars = path.split("/");
+                        chars.removeLast();
+                        path = chars.join("/");
+                      });
+                      if (navKey.currentState != null) {
+                        if (navKey.currentState!.canPop()) {
+                          navKey.currentState!.pop();
+                        }
+                      }
+                    },
+                    icon: const Icon(
+                      Icons.arrow_back,
+                      color: Colors.white,
+                    ),
+                  ),
+                ),
+                const SizedBox(
+                  width: 8,
+                ),
+                const Text(
+                  "CloudDisk",
+                  style: TextStyle(
+                    color: Colors.white,
+                  ),
+                ),
+                Text(
+                  " ${listMapChecked.isNotEmpty ? "(" : ""}${listMapChecked.isNotEmpty ? listMapChecked.length : ""}${listMapChecked.isNotEmpty ? ")" : ""}",
+                  style: const TextStyle(
+                    color: Colors.amberAccent,
+                  ),
+                ),
+              ],
+            ),
+            actions: [
+              listMapChecked.isNotEmpty
+                  ? IconButton(
+                      icon: const Icon(
+                        Icons.send,
+                        color: Colors.white,
+                      ),
+                      onPressed: () {
+                        onSend(context);
+                      },
+                    )
+                  : Container(),
+              PopupMenuButton<int>(
+                color: Colors.white,
+                constraints: const BoxConstraints(
+                  minWidth: 150,
+                ),
                 padding: const EdgeInsets.all(0),
-                onPressed: () {
-                  setState(() {
-                    //xóa thằng cuối khi pop
-                    var chars = path.split("/");
-                    chars.removeLast();
-                    path = chars.join("/");
-                  });
-                  if (navKey.currentState != null) {
-                    if (navKey.currentState!.canPop()) {
-                      navKey.currentState!.pop();
-                    }
-                  }
-                },
                 icon: const Icon(
-                  Icons.arrow_back,
+                  Icons.more_vert,
                   color: Colors.white,
                 ),
+                onSelected: (value) {
+                  onSelected(context, value);
+                },
+                itemBuilder: ((context) {
+                  return [
+                    popupMenuItem("Sort"),
+                  ];
+                }),
               ),
-            ),
-            const SizedBox(
-              width: 8,
-            ),
-            const Text(
-              "CloudDisk",
-              style: TextStyle(
-                color: Colors.white,
-              ),
-            ),
-            Text(
-              " ${mapChecked.isNotEmpty ? "(" : ""}${mapChecked.isNotEmpty ? mapChecked.length : ""}${mapChecked.isNotEmpty ? ")" : ""}",
-              style: const TextStyle(
-                color: Colors.amberAccent,
-              ),
-            ),
-          ],
-        ),
-        actions: [
-          mapChecked.isNotEmpty
-              ? IconButton(
-                  icon: const Icon(
-                    Icons.send,
-                    color: Colors.white,
-                  ),
-                  onPressed: () {
-                    onSend(context);
-                  },
-                )
-              : Container(),
-          PopupMenuButton<int>(
-            color: Colors.white,
-            constraints: const BoxConstraints(
-              minWidth: 150,
-            ),
-            padding: const EdgeInsets.all(0),
-            icon: const Icon(
-              Icons.more_vert,
-              color: Colors.white,
-            ),
-            onSelected: (value) {
-              onSelected(context, value);
-            },
-            itemBuilder: ((context) {
-              return [
-                popupMenuItem("Sort"),
-              ];
-            }),
+            ],
           ),
-        ],
-      ),
-      body: WillPopScope(
-        onWillPop: () async {
-          currentId = preId;
-          isSort = false;
-          setState(() {
-            //xóa thằng cuối khi pop
-            var chars = path.split("/");
-            chars.removeLast();
-            path = chars.join("/");
-          });
-          if (navKey.currentState != null) {
-            if (navKey.currentState!.canPop()) {
-              navKey.currentState!.pop();
-              return false;
-            }
-          }
-          return true;
-        },
-        child: Navigator(
-          key: navKey,
-          onGenerateRoute: (settings) {
-            switch (settings.name) {
-              case "/":
-                return MaterialPageRoute(
-                  settings: settings,
-                  builder: (context) {
-                    return FolderScreen(
-                      folderId: "",
-                      currentPath: "",
-                      onPressed: () {
-                        setState(() {});
+          body: WillPopScope(
+            onWillPop: () async {
+              currentId = preId;
+              setState(() {
+                //xóa thằng cuối khi pop
+                var chars = path.split("/");
+                chars.removeLast();
+                path = chars.join("/");
+              });
+              if (navKey.currentState != null) {
+                if (navKey.currentState!.canPop()) {
+                  navKey.currentState!.pop();
+                  return false;
+                }
+              }
+              return true;
+            },
+            child: Navigator(
+              key: navKey,
+              onGenerateRoute: (settings) {
+                switch (settings.name) {
+                  case "/":
+                    return MaterialPageRoute(
+                      settings: settings,
+                      builder: (context) {
+                        return FolderScreen(
+                          folderId: "",
+                          currentPath: "",
+                          onPressed: () {
+                            setState(() {});
+                          },
+                        );
                       },
                     );
-                  },
-                );
-              case "/folderScreen":
-                var arguments = settings.arguments as Map;
-                var folderId = arguments["folderId"];
-                var currentPath = arguments["currentPath"];
-                path += currentPath;
-                if (path[0] == "/") path = path.substring(1);
-                return MaterialPageRoute(
-                  settings: settings,
-                  builder: (context) {
-                    return FolderScreen(
-                      folderId: folderId,
-                      currentPath: path,
-                      onPressed: () {
-                        setState(() {});
+                  case "/folderScreen":
+                    var arguments = settings.arguments as Map;
+                    var folderId = arguments["folderId"];
+                    var currentPath = arguments["currentPath"];
+                    path += currentPath;
+                    if (path[0] == "/") path = path.substring(1);
+                    return MaterialPageRoute(
+                      settings: settings,
+                      builder: (context) {
+                        return FolderScreen(
+                          folderId: folderId,
+                          currentPath: path,
+                          onPressed: () {
+                            setState(() {});
+                          },
+                        );
                       },
                     );
-                  },
-                );
-            }
-            return null;
-          },
-        ),
-      ),
+                }
+                return null;
+              },
+            ),
+          ),
+        );
+      },
     );
   }
 
@@ -238,208 +263,3 @@ class _HomePageState extends State<HomePage> {
     );
   }
 }
-
-class SortDialog extends StatefulWidget {
-  const SortDialog({
-    Key? key,
-    required this.onValueChange,
-    required this.onSave,
-    required this.onDefault,
-    required this.initValue1,
-    required this.initValue2,
-  }) : super(key: key);
-  final void Function(int, int) onValueChange;
-  final VoidCallback onSave;
-  final VoidCallback onDefault;
-  final int initValue1;
-  final int initValue2;
-
-  @override
-  State<SortDialog> createState() => _SortDialogState();
-}
-
-class _SortDialogState extends State<SortDialog> {
-  int sortType = 0;
-  int order = 0;
-  @override
-  Widget build(BuildContext context) {
-    return AlertDialog(
-      contentPadding: EdgeInsets.zero,
-      content: SizedBox(
-        width: 170,
-        height: 300,
-        child: Row(
-          mainAxisAlignment: MainAxisAlignment.spaceBetween,
-          crossAxisAlignment: CrossAxisAlignment.start,
-          children: [
-            Padding(
-              padding: const EdgeInsets.only(top: 12, left: 12),
-              child: Column(
-                crossAxisAlignment: CrossAxisAlignment.start,
-                children: [
-                  const Text(
-                    "Sort Type",
-                    style: TextStyle(
-                      color: Colors.black54,
-                    ),
-                  ),
-                  RadioList(
-                    listItem: const ["Size", "File Name", "Date"],
-                    onTap: (value) {
-                      sortType = value;
-                      widget.onValueChange(sortType, order);
-                    },
-                    initValue: widget.initValue1,
-                  ),
-                  const Text(
-                    "Order",
-                    style: TextStyle(
-                      color: Colors.black54,
-                    ),
-                  ),
-                  RadioList(
-                    listItem: const ["Ascending", "Descending"],
-                    onTap: (value) {
-                      order = value;
-                      widget.onValueChange(sortType, order);
-                    },
-                    initValue: widget.initValue2,
-                  ),
-                ],
-              ),
-            ),
-            InkWell(
-              onTap: () {
-                Navigator.of(context).pop();
-              },
-              child: const Icon(
-                Icons.close,
-                color: Colors.black54,
-                size: 36,
-              ),
-            )
-          ],
-        ),
-      ),
-      actions: [
-        ElevatedButton(
-          onPressed: () {
-            Navigator.of(context).pop();
-            widget.onDefault();
-          },
-          style: ElevatedButton.styleFrom(
-            backgroundColor: Colors.grey.shade300,
-            padding: EdgeInsets.zero,
-            fixedSize: const Size(135, 40),
-          ),
-          child: const Text(
-            "SAVE AS DEFAULT",
-            style: TextStyle(fontSize: 12),
-          ),
-        ),
-        ElevatedButton(
-          onPressed: () {
-            Navigator.of(context).pop();
-            widget.onSave();
-          },
-          style: ElevatedButton.styleFrom(
-            backgroundColor: Colors.grey.shade300,
-            padding: EdgeInsets.zero,
-            fixedSize: const Size(135, 40),
-          ),
-          child: const Text(
-            "SAVE",
-            style: TextStyle(fontSize: 12),
-          ),
-        ),
-      ],
-    );
-  }
-}
-
-class SendDialog extends StatefulWidget {
-  const SendDialog({super.key});
-
-  @override
-  State<SendDialog> createState() => _SendDialogState();
-}
-
-class _SendDialogState extends State<SendDialog> {
-  @override
-  Widget build(BuildContext context) {
-    return AlertDialog(
-      // contentPadding: EdgeInsets.zero,
-      content: SizedBox(
-        // width: 260,
-        height: 200,
-        child: Column(
-          crossAxisAlignment: CrossAxisAlignment.start,
-          children: [
-            const SizedBox(
-              height: 12,
-            ),
-            const Text(
-              "Cloud Disk",
-              style: TextStyle(
-                color: Colors.black,
-                fontSize: 20,
-                fontWeight: FontWeight.w500,
-              ),
-            ),
-            const SizedBox(
-              height: 16,
-            ),
-            const Text(
-              "Expired Date (NOT less than current date)",
-              style: TextStyle(
-                color: Colors.black,
-                fontSize: 14,
-              ),
-            ),
-            const SizedBox(
-              height: 16,
-            ),
-            const Text(
-              "Download count (greate than 0)",
-              style: TextStyle(
-                color: Colors.black,
-                fontSize: 14,
-              ),
-            ),
-            TextFormField(
-              keyboardType: TextInputType.number,
-              style: const TextStyle(
-                fontSize: 18,
-              ),
-              initialValue: "100",
-              decoration: const InputDecoration(
-                contentPadding: EdgeInsets.only(bottom: -20),
-                hintText: "100",
-              ),
-            ),
-          ],
-        ),
-      ),
-      actions: [
-        TextButton(
-          onPressed: () {
-            Navigator.of(context).pop();
-          },
-          child: const Text(
-            "CANCEL",
-            style: TextStyle(fontSize: 14),
-          ),
-        ),
-        TextButton(
-          onPressed: () {
-            Navigator.of(context).pop();
-          },
-          child: const Text(
-            "OK",
-            style: TextStyle(fontSize: 14),
-          ),
-        ),
-      ],
-    );
-  }
-}
diff --git a/lib/presentation/pages/login_page/login_screen.dart b/lib/presentation/pages/login_page/login_screen.dart
index 8db1aaf..c8b52f9 100644
--- a/lib/presentation/pages/login_page/login_screen.dart
+++ b/lib/presentation/pages/login_page/login_screen.dart
@@ -1,4 +1,4 @@
-import 'package:clouddisk_login_form/api/request/login_req.dart';
+import 'package:clouddisk_login_form/api/requests/login_req.dart';
 import 'package:clouddisk_login_form/bloc/login_bloc/login_bloc.dart';
 import 'package:clouddisk_login_form/components/auth_button.dart';
 import 'package:clouddisk_login_form/components/auth_input.dart';
diff --git a/lib/presentation/screens/folder_screen.dart b/lib/presentation/screens/folder_screen.dart
index 50755bd..8c6cfcb 100644
--- a/lib/presentation/screens/folder_screen.dart
+++ b/lib/presentation/screens/folder_screen.dart
@@ -20,16 +20,21 @@ class FolderScreen extends StatefulWidget {
 
 class _FolderScreenState extends State<FolderScreen> {
   final FolderTreeBloc folderTreeBloc = FolderTreeBloc();
-  late bool sorted = false;
+
   @override
   void initState() {
-    folderTreeBloc.add(LoadEvent(widget.folderId));
+    if (isSort) {
+      print("$sortType...$order");
+      folderTreeBloc.add(SortEvent(widget.folderId, sortType, order));
+    } else {
+      folderTreeBloc.add(LoadEvent(widget.folderId));
+    }
     currentId = widget.folderId;
     super.initState();
   }
 
   Future<void> _refresh() async {
-    if (sorted) {
+    if (isSort) {
       folderTreeBloc.add(SortEvent(widget.folderId, sortType, order));
     } else {
       folderTreeBloc.add(LoadEvent(widget.folderId));
@@ -38,17 +43,20 @@ class _FolderScreenState extends State<FolderScreen> {
 
   @override
   Widget build(BuildContext context) {
-    // print("${widget.folderId}...$isSort...$isClickedDefault");
-    //Khi nhấn nút "Save on Default" hoặc "Save" thì sẽ setState lại(ở homepage.dart), nên tất cả màn hình con đều bị ảnh hưởng,
+    print(isSort);
+    print("$currentId...${widget.folderId}...$preId");
     //=>> thêm điều kiện "currentId == widget.folderId" để chỉ áp dụng cho 1 màn hình đang hiển thị
+    // Bấm save, tức là tiêu chí sort được áp dụng. (k áp dụng tiêu chí sort đó cho sau này, nghĩa là khi kill app, mở lên lại thì app default)
+    // Khi push màn hình mới thì sẽ auto sort màn hình mới đó theo tiêu chí sort
+    // Khi pop, màn hình giữ nguyên như cũ, pull down to refresh mới sort theo tiêu chí sort
     if (isSort && currentId == widget.folderId) {
-      sorted = true;
+      print(1);
       folderTreeBloc.add(SortEvent(widget.folderId, sortType, order));
     }
-    if (isClickedDefault && currentId == widget.folderId) {
-      sorted = false;
-      folderTreeBloc.add(LoadEvent(widget.folderId));
-    }
+    // else {
+    //   currentId == widget.folderId;
+    // }
+    // Save as default, tức là áp dụng tiêu chí sort đó cho sau này, nghĩa là khi kill app, mở lên lại thì app sẽ theo tiêu chí sort đó
     return BlocProvider(
       create: (context) => folderTreeBloc,
       child: BlocListener<FolderTreeBloc, FolderTreeState>(
