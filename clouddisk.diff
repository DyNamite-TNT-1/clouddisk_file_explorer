diff --git a/lib/api/api_header.dart b/lib/api/api_header.dart
index c4f6717..f7e96cc 100644
--- a/lib/api/api_header.dart
+++ b/lib/api/api_header.dart
@@ -14,8 +14,6 @@ final loginHeader = {
   'device_id': '1e10f743-196e-4bc0-aee7-8c14690f2ac4',
   'X-REQUESTED-WITH': 'XMLHttpRequest',
   "User_Agent": "Android 1.66 APP_HANBIRO_2.0.0.2",
-  // "Cookie":
-  //     ";HANBIRO_GW=010254fedc4eaa12683367c2601053f919d8fd28b35cfd8c2f42173ed918e48eb9ab17480894076ec3ad7e268176e6b3;hmail_key=33b0cd76a231a3a0a6e247d814c23f9a;cook=kie",
 };
 List<String> cookie = [
   ";HANBIRO_GW=${user.session}",
@@ -23,7 +21,7 @@ List<String> cookie = [
   "cook=kie",
 ];
 
-//header của getFolder
+//header của getFolder, sortFolder
 final folderHeader = {
   "Cookie": cookie.join(";"),
 };
diff --git a/lib/api/api_url.dart b/lib/api/api_url.dart
index bb797ab..9a90953 100644
--- a/lib/api/api_url.dart
+++ b/lib/api/api_url.dart
@@ -4,3 +4,7 @@ const loginUrl = "$baseUrl/ngw/sign/auth?is_checking_otp=1";
 String getFolderUrl(String type, String id) {
   return "$baseUrl/cloud/api/get.php?type=$type&id=$id";
 }
+
+String sortFolderUrl(String type, String id, String sort, String order) {
+  return "$baseUrl/cloud/api/get.php?type=$type&id=$id&sort=[{\"sort\":\"$sort\",\"order\":\"$order\"}]";
+}
diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
index 87c64e5..f566a5a 100644
--- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
+++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart
@@ -5,6 +5,7 @@ import 'package:bloc/bloc.dart';
 import 'package:clouddisk_login_form/api/api_header.dart';
 import 'package:clouddisk_login_form/api/api_url.dart';
 import 'package:clouddisk_login_form/api/api_service.dart';
+import 'package:clouddisk_login_form/global_variable/global_variable.dart';
 import 'package:equatable/equatable.dart';
 
 import 'package:clouddisk_login_form/models/item.dart';
@@ -18,6 +19,7 @@ class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
   FolderTreeBloc() : super(FolderTreeInitial()) {
     on<FolderTreeEvent>((event, emit) async {
       if (event is LoadEvent) {
+        // if (folders.isNotEmpty) preFolders = folders;
         folders = [];
         emit(FolderTreeLoading());
         final resp =
@@ -31,8 +33,26 @@ class FolderTreeBloc extends Bloc<FolderTreeEvent, FolderTreeState> {
           addColorandIcon();
         } else {
           for (var element in folders) {
-            // print(
-            //     "${element.regdate}....${element.formatBytes(element.size, 1)}");
+            element.addColorandIcon(Colors.indigo, Icons.folder);
+          }
+        }
+        emit(FolderTreeLoaded(folders));
+      }
+      if (event is SortEvent) {
+        folders = [];
+        emit(FolderTreeLoading());
+        final resp = await api.get(
+            sortFolderUrl("file", event.id, event.sort, event.order),
+            folderHeader);
+        final json = jsonDecode(resp);
+        final List itemList = json["files"];
+        folders =
+            itemList.map((folderJson) => Folder.fromJson(folderJson)).toList();
+        if (event.id == "") {
+          foldersRoot = folders;
+          addColorandIcon();
+        } else {
+          for (var element in folders) {
             element.addColorandIcon(Colors.indigo, Icons.folder);
           }
         }
diff --git a/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart b/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
index 7541c81..4491243 100644
--- a/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
+++ b/lib/bloc/folder_tree_bloc/bloc/folder_tree_event.dart
@@ -15,6 +15,11 @@ class LoadEvent extends FolderTreeEvent {
   List<Object> get props => [id];
 }
 
-class BackEvent extends FolderTreeEvent {
-  const BackEvent();
+class SortEvent extends FolderTreeEvent {
+  final String id;
+  final String sort;
+  final String order;
+  const SortEvent(this.id, this.sort, this.order);
+  @override
+  List<Object> get props => [id, sort, order];
 }
diff --git a/lib/components/item_file.dart b/lib/components/item_file.dart
index 5476855..0db8c9e 100644
--- a/lib/components/item_file.dart
+++ b/lib/components/item_file.dart
@@ -1,5 +1,4 @@
 import 'package:clouddisk_login_form/global_variable/global_variable.dart';
-import 'package:clouddisk_login_form/icons/app_icons.dart';
 import 'package:clouddisk_login_form/models/item.dart';
 import 'package:flutter/material.dart';
 
@@ -19,7 +18,6 @@ class ItemFile extends StatefulWidget {
 class _ItemFileState extends State<ItemFile> {
   bool isChecked = false;
   bool hasThumbnail = false;
-  late IconData iconData;
   late Widget image;
   Future getImage(String ext) async {
     image = Image.network(
@@ -29,69 +27,23 @@ class _ItemFileState extends State<ItemFile> {
   }
 
   @override
-  void initState() {
-    //check thumbnail  != "" thi lay thubmnail
+  Widget build(BuildContext context) {
     if (widget.item.buildThumbnail(widget.item.ext) != "") {
       getImage(widget.item.ext).then((_) {
         setState(() {
           hasThumbnail = true;
         });
       });
+    } else {
+      setState(() {
+        hasThumbnail = false;
+      });
     }
     if (mapChecked[widget.item.id] == true) {
       setState(() {
         isChecked = true;
       });
     }
-    //gan icon dua vao extension
-    if (widget.item.type == "file") {
-      final List<String> text = widget.item.text.split(".");
-      switch (text.last) {
-        case "doc":
-          iconData = AppIcon.fileWord;
-          break;
-        case "docx":
-          iconData = AppIcon.fileWord;
-          break;
-        case "ppt":
-          iconData = AppIcon.filePowerpoint;
-          break;
-        case "pptx":
-          iconData = AppIcon.filePowerpoint;
-          break;
-        case "xls":
-          iconData = AppIcon.fileExcel;
-          break;
-        case "xlsx":
-          iconData = AppIcon.fileExcel;
-          break;
-        case "zip":
-          iconData = AppIcon.fileArchive;
-          break;
-        case "pdf":
-          iconData = AppIcon.filePdf;
-          break;
-        case "mp3":
-          iconData = AppIcon.fileAudio;
-          break;
-        case "mp4":
-          iconData = AppIcon.fileVideo;
-          break;
-        case "jpg":
-          iconData = AppIcon.fileImage;
-          break;
-        case "png":
-          iconData = AppIcon.fileImage;
-          break;
-        default:
-          iconData = AppIcon.docText;
-      }
-    }
-    super.initState();
-  }
-
-  @override
-  Widget build(BuildContext context) {
     return InkWell(
       onTap: () {
         if (widget.item.type == "file") {
@@ -109,44 +61,49 @@ class _ItemFileState extends State<ItemFile> {
       child: Container(
         padding: const EdgeInsets.only(top: 10, bottom: 10, left: 12),
         decoration: BoxDecoration(
-            border: Border(
-          bottom: BorderSide(
-            color: Colors.grey.shade300,
+          border: Border(
+            bottom: BorderSide(
+              color: Colors.grey.shade300,
+            ),
           ),
-        )),
+        ),
         child: Row(
           children: [
-            if (widget.item.type == "dir")
-              Container(
-                padding: const EdgeInsets.all(8),
-                decoration: BoxDecoration(
-                  shape: BoxShape.circle,
-                  color: widget.item.color,
-                ),
-                child: Icon(
-                  widget.item.icon,
-                  color: Colors.white,
-                  size: 24,
-                ),
-              )
-            else if (!hasThumbnail)
-              Container(
-                padding: const EdgeInsets.all(8),
-                decoration: BoxDecoration(
-                  shape: BoxShape.rectangle,
-                  color: Colors.grey.shade400,
-                  borderRadius: const BorderRadius.all(
-                    Radius.circular(5),
+            //Stack để khi load thumbnail xong sẽ đè lên icon, không bị xấu UI. Không dùng stack thì sẽ gây hiện tượng thụt vào thụt ra của content
+            Stack(
+              children: [
+                if (widget.item.type == "dir")
+                  Container(
+                    padding: const EdgeInsets.all(8),
+                    decoration: BoxDecoration(
+                      shape: BoxShape.circle,
+                      color: widget.item.color,
+                    ),
+                    child: Icon(
+                      widget.item.icon,
+                      color: Colors.white,
+                      size: 24,
+                    ),
+                  )
+                else
+                  Container(
+                    padding: const EdgeInsets.all(8),
+                    decoration: BoxDecoration(
+                      shape: BoxShape.rectangle,
+                      color: Colors.grey.shade400,
+                      borderRadius: const BorderRadius.all(
+                        Radius.circular(5),
+                      ),
+                    ),
+                    child: Icon(
+                      widget.item.icon,
+                      color: Colors.white,
+                      size: 24,
+                    ),
                   ),
-                ),
-                child: Icon(
-                  iconData,
-                  color: Colors.white,
-                  size: 24,
-                ),
-              )
-            else
-              image,
+                if (hasThumbnail) image,
+              ],
+            ),
             const SizedBox(
               width: 12,
             ),
diff --git a/lib/global_variable/global_variable.dart b/lib/global_variable/global_variable.dart
index 3e247b3..4c9518a 100644
--- a/lib/global_variable/global_variable.dart
+++ b/lib/global_variable/global_variable.dart
@@ -1 +1,6 @@
 Map<String, dynamic> mapChecked = {};
+bool isSort = false;
+String sortType = "size";
+String order = "asc";
+String currentId = "";
+String preId = "";
diff --git a/lib/main.dart b/lib/main.dart
index 3464086..ead0f9f 100644
--- a/lib/main.dart
+++ b/lib/main.dart
@@ -38,6 +38,7 @@ class MyHomePage extends StatefulWidget {
 
 class _MyHomePageState extends State<MyHomePage> {
   final LoginBloc loginBloc = LoginBloc();
+
   bool hasCookie = true;
   var session = "";
   var hmailkey = "";
diff --git a/lib/models/item.dart b/lib/models/item.dart
index 22ca5ce..cb03c4b 100644
--- a/lib/models/item.dart
+++ b/lib/models/item.dart
@@ -1,5 +1,6 @@
 import 'dart:math';
 
+import 'package:clouddisk_login_form/icons/app_icons.dart';
 import 'package:flutter/material.dart';
 import 'package:intl/intl.dart';
 
@@ -28,8 +29,52 @@ class Folder extends Item {
       : super(id, text, type, size, regdate, ext);
 
   void addColorandIcon(Color color, IconData icon) {
-    this.color = color;
-    this.icon = icon;
+    if (type == "file") {
+      final List<String> texts = text.split(".");
+      switch (texts.last) {
+        case "doc":
+          this.icon = AppIcon.fileWord;
+          break;
+        case "docx":
+          this.icon = AppIcon.fileWord;
+          break;
+        case "ppt":
+          this.icon = AppIcon.filePowerpoint;
+          break;
+        case "pptx":
+          this.icon = AppIcon.filePowerpoint;
+          break;
+        case "xls":
+          this.icon = AppIcon.fileExcel;
+          break;
+        case "xlsx":
+          this.icon = AppIcon.fileExcel;
+          break;
+        case "zip":
+          this.icon = AppIcon.fileArchive;
+          break;
+        case "pdf":
+          this.icon = AppIcon.filePdf;
+          break;
+        case "mp3":
+          this.icon = AppIcon.fileAudio;
+          break;
+        case "mp4":
+          this.icon = AppIcon.fileVideo;
+          break;
+        case "jpg":
+          this.icon = AppIcon.fileImage;
+          break;
+        case "png":
+          this.icon = AppIcon.fileImage;
+          break;
+        default:
+          this.icon = AppIcon.docText;
+      }
+    } else {
+      this.color = color;
+      this.icon = icon;
+    }
   }
 
   String formatBytes(String size, int decimals) {
@@ -68,10 +113,12 @@ class Folder extends Item {
   }
 
   @override
-  String toString() => "Folder(id: $id, text: $text, type: $type)";
+  String toString() =>
+      "Folder(id: $id, text: $text, type: $type, size: $size, regdate: $regdate, ext: $ext, icon: $icon, color: $color)";
 }
 
 List<Folder> folders = [];
+List<Folder> preFolders = [];
 List<Folder> foldersRoot = [];
 
 void addColorandIcon() {
@@ -84,3 +131,20 @@ void addColorandIcon() {
   foldersRoot[6].addColorandIcon(Colors.teal.shade700, Icons.source);
   foldersRoot[7].addColorandIcon(Colors.red.shade900, Icons.delete_outline);
 }
+
+// void sortListItem(List<Folder> folders, int sortType, int order) {
+//   if (sortType == 0) {
+//     if (order == 0) {
+//       folders.sort((a, b) {
+//         return int.parse(a.size).compareTo(int.parse(b.size));
+//       });
+//       // print(folders);
+//     }
+//     if (order == 1) {
+//       folders.sort((a, b) {
+//         return int.parse(b.size).compareTo(int.parse(a.size));
+//       });
+//       // print(folders);
+//     }
+//   }
+// }
diff --git a/lib/presentation/pages/home_page/home_page.dart b/lib/presentation/pages/home_page/home_page.dart
index b44e99f..f55813b 100644
--- a/lib/presentation/pages/home_page/home_page.dart
+++ b/lib/presentation/pages/home_page/home_page.dart
@@ -1,6 +1,11 @@
+// ignore_for_file: public_member_api_docs, sort_constructors_first
+import 'package:clouddisk_login_form/bloc/folder_tree_bloc/bloc/folder_tree_bloc.dart';
+
+import 'package:flutter/material.dart';
+
 import 'package:clouddisk_login_form/global_variable/global_variable.dart';
 import 'package:clouddisk_login_form/presentation/screens/folder_screen.dart';
-import 'package:flutter/material.dart';
+import 'package:flutter_bloc/flutter_bloc.dart';
 
 class HomePage extends StatefulWidget {
   const HomePage({
@@ -14,181 +19,101 @@ class HomePage extends StatefulWidget {
 class _HomePageState extends State<HomePage> {
   final navKey = GlobalKey<NavigatorState>();
   var path = "";
-  int selectedIndex = 0;
-  int selectedRadioTile = 0;
-  setSelectedRadioTile(int val) {
-    setState(() {
-      selectedRadioTile = val;
-    });
-  }
 
-  @override
-  Widget build(BuildContext context) {
-    Future pushDialog() {
-      return showDialog(
-          useRootNavigator: false,
+  void onSelected(BuildContext context, int value) {
+    switch (value) {
+      case 0:
+        showDialog(
           context: context,
           builder: (context) {
-            int selectedRadio = 0;
-            return AlertDialog(
-              contentPadding: EdgeInsets.zero,
-              content: SizedBox(
-                width: 170,
-                height: 250,
-                child: Row(
-                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
-                  crossAxisAlignment: CrossAxisAlignment.start,
-                  children: [
-                    Padding(
-                      padding: const EdgeInsets.only(top: 12, left: 12),
-                      child: Column(
-                        crossAxisAlignment: CrossAxisAlignment.start,
-                        children: [
-                          const Text(
-                            "Sort Type",
-                            style: TextStyle(
-                              color: Colors.black54,
-                            ),
-                          ),
-                          // StatefulBuilder(builder:
-                          //     (BuildContext context, StateSetter setState) {
-                          //   List<String> list = ["Size", "File Name", "Date"];
-                          //   return Column(
-                          //     mainAxisSize: MainAxisSize.min,
-                          //     children: List<Widget>.generate(3, (int index) {
-                          //       return Row(
-                          //         children: [
-                          //           Radio<int>(
-                          //             value: index,
-                          //             groupValue: selectedRadio,
-                          //             onChanged: (value) {
-                          //               setState(() => selectedRadio = value!);
-                          //             },
-                          //           ),
-                          //           const SizedBox(width: 8),
-                          //           Text(list[index]),
-                          //         ],
-                          //       );
-                          //     }),
-                          //   );
-                          // }),
-                          const Text(
-                            "Order",
-                            style: TextStyle(
-                              color: Colors.black54,
-                            ),
-                          ),
-                        ],
-                      ),
-                    ),
-                    InkWell(
-                      onTap: () {
-                        Navigator.of(context).pop();
-                      },
-                      child: const Icon(
-                        Icons.close,
-                        color: Colors.black54,
-                        size: 36,
-                      ),
-                    )
-                  ],
-                ),
-              ),
-              actions: [
-                ElevatedButton(
-                  onPressed: () {},
-                  style: ElevatedButton.styleFrom(
-                    backgroundColor: Colors.grey.shade300,
-                    padding: EdgeInsets.zero,
-                    fixedSize: const Size(135, 40),
-                  ),
-                  child: const Text(
-                    "SAVE AS DEFAULT",
-                    style: TextStyle(fontSize: 12),
-                  ),
-                ),
-                ElevatedButton(
-                  onPressed: () {},
-                  style: ElevatedButton.styleFrom(
-                    backgroundColor: Colors.grey.shade300,
-                    padding: EdgeInsets.zero,
-                    fixedSize: const Size(135, 40),
-                  ),
-                  child: const Text(
-                    "SAVE",
-                    style: TextStyle(fontSize: 12),
-                  ),
-                ),
-              ],
+            return MyDialog(
+              onValueChange: (int value1, int value2) {
+                switch (value1) {
+                  case 0:
+                    sortType = "size";
+                    break;
+                  case 1:
+                    sortType = "name";
+                    break;
+                  case 2:
+                    sortType = "time";
+                    break;
+                }
+                switch (value2) {
+                  case 0:
+                    order = "asc";
+                    break;
+                  case 1:
+                    order = "desc";
+                    break;
+                }
+              },
+              onSave: () {
+                print("Sort Type: $sortType");
+                print("Order: $order");
+              },
             );
-          });
-    }
-
-    void onSelected(BuildContext context, int value) {
-      switch (value) {
-        case 0:
-          pushDialog();
-          break;
-        default:
-      }
+          },
+        );
+        break;
     }
+  }
 
+  @override
+  Widget build(BuildContext context) {
     return Scaffold(
-      appBar: PreferredSize(
-        preferredSize: const Size.fromHeight(50),
-        child: AppBar(
-          elevation: 0,
-          automaticallyImplyLeading: false, //turn off leading
-          title: Row(
-            children: [
-              const Text(
-                "Home",
-                style: TextStyle(
-                  color: Colors.white,
-                ),
+      appBar: AppBar(
+        elevation: 0,
+        automaticallyImplyLeading: false, //turn off leading
+        title: Row(
+          children: [
+            const Text(
+              "Home",
+              style: TextStyle(
+                color: Colors.white,
               ),
-              Text(
-                " ${mapChecked.isNotEmpty ? "(" : ""}${mapChecked.isNotEmpty ? mapChecked.length : ""}${mapChecked.isNotEmpty ? ")" : ""}",
-                style: const TextStyle(
-                  color: Colors.amberAccent,
-                ),
-              ),
-            ],
-          ),
-          actions: [
-            mapChecked.isNotEmpty
-                ? IconButton(
-                    icon: const Icon(
-                      Icons.send,
-                      color: Colors.white,
-                    ),
-                    onPressed: () {
-                      ScaffoldMessenger.of(context).showSnackBar(
-                        const SnackBar(
-                          content: Text("Đang gửi..."),
-                        ),
-                      );
-                    },
-                  )
-                : Container(),
-            Theme(
-              data: Theme.of(context).copyWith(
-                  iconTheme: const IconThemeData(color: Colors.white),
-                  textTheme: const TextTheme().apply(bodyColor: Colors.white)),
-              child: PopupMenuButton<int>(
-                color: Colors.indigo,
-                onSelected: (value) {
-                  onSelected(context, value);
-                },
-                itemBuilder: ((context) {
-                  return [
-                    popupMenuItem("Sort"),
-                  ];
-                }),
+            ),
+            Text(
+              " ${mapChecked.isNotEmpty ? "(" : ""}${mapChecked.isNotEmpty ? mapChecked.length : ""}${mapChecked.isNotEmpty ? ")" : ""}",
+              style: const TextStyle(
+                color: Colors.amberAccent,
               ),
             ),
           ],
         ),
+        actions: [
+          mapChecked.isNotEmpty
+              ? IconButton(
+                  icon: const Icon(
+                    Icons.send,
+                    color: Colors.white,
+                  ),
+                  onPressed: () {
+                    ScaffoldMessenger.of(context).showSnackBar(
+                      const SnackBar(
+                        content: Text("Đang gửi..."),
+                      ),
+                    );
+                  },
+                )
+              : Container(),
+          Theme(
+            data: Theme.of(context).copyWith(
+                iconTheme: const IconThemeData(color: Colors.white),
+                textTheme: const TextTheme().apply(bodyColor: Colors.white)),
+            child: PopupMenuButton<int>(
+              color: Colors.indigo,
+              onSelected: (value) {
+                onSelected(context, value);
+              },
+              itemBuilder: ((context) {
+                return [
+                  popupMenuItem("Sort"),
+                ];
+              }),
+            ),
+          ),
+        ],
       ),
       body: WillPopScope(
         onWillPop: () async {
@@ -260,3 +185,159 @@ class _HomePageState extends State<HomePage> {
     );
   }
 }
+
+class RadioList extends StatefulWidget {
+  const RadioList({
+    Key? key,
+    required this.listItem,
+    required this.onTap,
+  }) : super(key: key);
+  final List<String> listItem;
+  final void Function(int) onTap;
+  @override
+  State<RadioList> createState() => _RadioListState();
+}
+
+class _RadioListState extends State<RadioList> {
+  int selectedRadio = 0;
+  @override
+  Widget build(BuildContext context) {
+    return Column(
+      crossAxisAlignment: CrossAxisAlignment.start,
+      children: widget.listItem.map((item) {
+        return InkWell(
+          onTap: () {
+            setState(() {
+              selectedRadio = widget.listItem.indexOf(item);
+              widget.onTap(selectedRadio);
+            });
+          },
+          child: Row(
+            children: [
+              Radio(
+                value: widget.listItem.indexOf(item),
+                groupValue: selectedRadio,
+                onChanged: (value) {
+                  setState(() {
+                    selectedRadio = value!;
+                    widget.onTap(selectedRadio);
+                  });
+                },
+              ),
+              SizedBox(
+                width: 180,
+                child: Text(item),
+              ),
+            ],
+          ),
+        );
+      }).toList(),
+    );
+  }
+}
+
+class MyDialog extends StatefulWidget {
+  const MyDialog({
+    Key? key,
+    required this.onValueChange,
+    required this.onSave,
+  }) : super(key: key);
+  final void Function(int, int) onValueChange;
+  final VoidCallback onSave;
+  @override
+  State<MyDialog> createState() => _MyDialogState();
+}
+
+class _MyDialogState extends State<MyDialog> {
+  int sortType = 0;
+  int order = 0;
+  @override
+  Widget build(BuildContext context) {
+    return AlertDialog(
+      contentPadding: EdgeInsets.zero,
+      content: SizedBox(
+        width: 170,
+        height: 300,
+        child: Row(
+          mainAxisAlignment: MainAxisAlignment.spaceBetween,
+          crossAxisAlignment: CrossAxisAlignment.start,
+          children: [
+            Padding(
+              padding: const EdgeInsets.only(top: 12, left: 12),
+              child: Column(
+                crossAxisAlignment: CrossAxisAlignment.start,
+                children: [
+                  const Text(
+                    "Sort Type",
+                    style: TextStyle(
+                      color: Colors.black54,
+                    ),
+                  ),
+                  RadioList(
+                    listItem: const ["Size", "File Name", "Date"],
+                    onTap: (value) {
+                      sortType = value;
+                      widget.onValueChange(sortType, order);
+                    },
+                  ),
+                  const Text(
+                    "Order",
+                    style: TextStyle(
+                      color: Colors.black54,
+                    ),
+                  ),
+                  RadioList(
+                    listItem: const ["Ascending", "Descending"],
+                    onTap: (value) {
+                      order = value;
+                      widget.onValueChange(sortType, order);
+                    },
+                  ),
+                ],
+              ),
+            ),
+            InkWell(
+              onTap: () {
+                Navigator.of(context).pop();
+              },
+              child: const Icon(
+                Icons.close,
+                color: Colors.black54,
+                size: 36,
+              ),
+            )
+          ],
+        ),
+      ),
+      actions: [
+        ElevatedButton(
+          onPressed: () {},
+          style: ElevatedButton.styleFrom(
+            backgroundColor: Colors.grey.shade300,
+            padding: EdgeInsets.zero,
+            fixedSize: const Size(135, 40),
+          ),
+          child: const Text(
+            "SAVE AS DEFAULT",
+            style: TextStyle(fontSize: 12),
+          ),
+        ),
+        ElevatedButton(
+          onPressed: () {
+            Navigator.of(context).pop();
+            widget.onSave();
+          },
+          style: ElevatedButton.styleFrom(
+            backgroundColor: Colors.grey.shade300,
+            padding: EdgeInsets.zero,
+            fixedSize: const Size(135, 40),
+          ),
+          child: const Text(
+            "SAVE",
+            style: TextStyle(fontSize: 12),
+          ),
+        ),
+      ],
+    );
+  }
+}
diff --git a/lib/presentation/screens/folder_screen.dart b/lib/presentation/screens/folder_screen.dart
index e2bbd7a..d6ca771 100644
--- a/lib/presentation/screens/folder_screen.dart
+++ b/lib/presentation/screens/folder_screen.dart
@@ -19,6 +19,7 @@ class FolderScreen extends StatefulWidget {
 
 class _FolderScreenState extends State<FolderScreen> {
   final FolderTreeBloc folderTreeBloc = FolderTreeBloc();
+
   @override
   void initState() {
     folderTreeBloc.add(LoadEvent(widget.folderId));
@@ -37,27 +38,26 @@ class _FolderScreenState extends State<FolderScreen> {
       create: (context) => folderTreeBloc,
       child: BlocBuilder<FolderTreeBloc, FolderTreeState>(
         builder: (context, state) {
-          if (state is FolderTreeLoading) {
-            return const Center(
-              child: CircularProgressIndicator(),
-            );
-          } else if (state is FolderTreeLoaded) {
-            return Scaffold(
-              body: Column(
-                children: [
-                  widget.folderId == ""
-                      ? Container()
-                      : Container(
-                          width: double.infinity,
-                          padding: const EdgeInsets.only(
-                              left: 12, top: 8, bottom: 8),
-                          decoration:
-                              BoxDecoration(color: Colors.cyan.shade100),
-                          child: Text(
-                            widget.currentPath,
-                            style: const TextStyle(fontSize: 16),
-                          ),
+          return Scaffold(
+            body: Column(
+              children: [
+                widget.folderId == ""
+                    ? Container()
+                    : Container(
+                        width: double.infinity,
+                        padding:
+                            const EdgeInsets.only(left: 12, top: 8, bottom: 8),
+                        decoration: BoxDecoration(color: Colors.cyan.shade100),
+                        child: Text(
+                          widget.currentPath,
+                          style: const TextStyle(fontSize: 16),
                         ),
+                      ),
+                if (state is FolderTreeLoading)
+                  const Center(
+                    child: CircularProgressIndicator(),
+                  )
+                else if (state is FolderTreeLoaded)
                   Expanded(
                     child: ListItems(
                       items: state.items,
@@ -66,11 +66,9 @@ class _FolderScreenState extends State<FolderScreen> {
                       },
                     ),
                   ),
-                ],
-              ),
-            );
-          }
-          return Container();
+              ],
+            ),
+          );
         },
       ),
     );
